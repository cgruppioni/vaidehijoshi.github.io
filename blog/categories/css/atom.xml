<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Css | Words and Code]]></title>
  <link href="http://vaidehijoshi.github.io/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://vaidehijoshi.github.io/"/>
  <updated>2015-10-20T08:53:46-04:00</updated>
  <id>http://vaidehijoshi.github.io/</id>
  <author>
    <name><![CDATA[Vaidehi Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implementing REM in CSS (or, How to Be a Shiny Happy Developer)]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/01/20/implementing-rem-in-css-or-how-to-be-a-shiny-happy-developer/"/>
    <updated>2015-01-20T17:39:10-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/01/20/implementing-rem-in-css-or-how-to-be-a-shiny-happy-developer</id>
    <content type="html"><![CDATA[<p>During a recent pair programming session, I came to the tough realization that I really know <em>nothing</em> about CSS. Granted, I can add in a <code>div</code> tag here and there, and yes, I can make a responsive page using Twitter Bootstrap like no one&rsquo;s business. But, what do I really know about design? Not as much as I thought I did.</p>

<p>I figured out that this was the case when the designer I was pairing with started using <strong>ems</strong> and <strong>rems</strong>. I should probably preface this and say that I have always been a pixel kind of girl. I was formerly of the mindset that you can have any font size you like &ndash;  as long as it&rsquo;s defined in pixels.</p>

<p>But, after doing a bit of research, I found that ems and rems actually have an interesting history behind them, and are super helpful when it comes to elastic layouts and responsive design.</p>

<!-- more -->


<h2>wait. there are different types of layouts?</h2>

<p>Yes! Trying to make your web applications responsive can be a nightmare, and kind of feels like this:</p>

<iframe src="//giphy.com/embed/13FrpeVH09Zrb2" width="480" height="462" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>Designers have long debated <a href="http://www.smashingmagazine.com/2009/06/02/fixed-vs-fluid-vs-elastic-layout-whats-the-right-one-for-you/">what kind of page layouts</a> are the best solution for this problem. The most interesting one is the elastic layout, which combines fluid and fixed layouts, and relies completely on sizing all the elements on a page by using <strong>ems</strong>. This is a pretty popular layout amongst designers and developers alike because, when it&rsquo;s properly implemented, the entire page grows or shrinks in proportion with the user&rsquo;s window size.</p>

<p>By now, you&rsquo;re probably thinking to yourself, <em>Okay, that&rsquo;s all great, but dear lord please tell me what ems and rems are!</em></p>

<p>Well, your wish is my command.</p>

<h2>Getting down with ems</h2>

<p>An <a href="http://en.wikipedia.org/wiki/Em_%28typography%29"><em>em</em></a> is nothing more than a unit of measurement. Ems have actually been around for awhile and date back to the early days of typography. The em was originally a point of reference to the width of the metal block used to make a capital &ldquo;M&rdquo; in any particular size of typeface.</p>

<p>But for our purposes, we only need to think about ems in the context of CSS, which is a vertical measurement. <a href="http://v1.jontangerine.com/log/2007/09/the-incredible-em-and-elastic-layouts-with-css">Jon Tan</a>, designer and typographer extrordinaire, describes em units pretty clearly:</p>

<blockquote><p>&ldquo;One em equals the vertical space needed for any given letter in a font, regardless of the horizontal space it occupies. Therefore:<br> If the font size is 16px, then 1em = 16px.&rdquo;</p></blockquote>

<p>Protip: most popular web browsers have a default font size of 16 pixels. So, if you wanted to have a font size that was half that size, or 8 pixels, you could specify that in ems as &ldquo;0.5em&rdquo; (in other words, 50% of the original font size).</p>

<h2>But do i really need to use &lsquo;em?</h2>

<p>You don&rsquo;t <em>have</em> to use ems. Case in point: I&rsquo;d never used them until a week ago. But using them can save you lines of code. The most important thing to remember about ems is how they are different from pixels: <strong>ems are relative, pixels are not.</strong> This is especially helpful when you have nested elements.</p>

<p>Imagine you have a file that needs to have four different font sizes:</p>

<pre><code class="css">.regular_font {
  font-size: 14px;
}

.big_font {
  font-size: 28px;
}

.med_font {
  font-size: 21px;
}

.small_font {
  font-size: 7px;
}
</code></pre>

<p>The <code>regular_font</code> class is the parent type, from which the three other classes will inherit. This code is perfectly fine, but imagine that you need six different font sizes or, for a larger app, ten or twenty. And what if you decided at the last minute that you wanted to make the parent element 16px, rather than 14px? Since pixel values don&rsquo;t inherit, you&rsquo;d have to go back and change <em>every single font size</em> to make all the styling to scale. No bueno, amirite?</p>

<p>The same styling could be rewritten using ems, like so:</p>

<pre><code class="css">.regular_font {
  font-size: 1.0em;
}

.big_font {
  font-size: 2.0em;
}

.med_font {
  font-size: 1.5em;
}

.small_font {
  font-size: 0.5em;
}
</code></pre>

<p>All of the font sizes now inherit from their parent element, which means that they will scale (think perecentages) depending on the size of the parent element. If you wanted to change the styling of all these font sizes, you&rsquo;d only actually have to change the parent element. Muy bueno, si?</p>

<h2>Okay, Okay &ndash; but what&rsquo;s this rem nonsense?</h2>

<p>Rems are almost the same as ems, except that there&rsquo;s no parent element that&rsquo;s defined. Instead, all the font sizes are based on the root <code>html</code> element. Don&rsquo;t freak out &ndash; all this really means is that you define a font size on the html element, and then all other elements will scale in font size relative to that.</p>

<p>In this example, the <code>.small_font</code> class inherits directly from the <code>html</code> parent element:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">html</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">1.0em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.small_font</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>But, but&hellip;I&rsquo;m really bad at math!</h2>

<p>Don&rsquo;t worry: there&rsquo;s an app for that. More specifically, a website that helps you calculate your ems. You can head on over to <a href="http://pxtoem.com/">PXtoEm.com</a>, and play around with pixels and ems and become a styling wizard.</p>

<p>Now, GO FORTH and style away!</p>

<iframe src="//giphy.com/embed/f0SFw1gXlmkc8" width="480" height="564" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>Ems are relative units of measurement, and pixels are not. Rems are basically just like ems, except that they inherit from the <code>html</code> element directly.</li>
<li>You don&rsquo;t have to use ems, but they can be helpful. A good way to start is by using pixels in development, and then assess whether your application actually <em>needs</em> to be responsive before heading over into em territory.</li>
<li>For more clarity on <strong>ems vs rems</strong>, check out <a href="https://j.eremy.net/confused-about-rem-and-em/">Jeremy Church&rsquo;s awesome post</a> on exactly that.</li>
</ul>

]]></content>
  </entry>
  
</feed>
