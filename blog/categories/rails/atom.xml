<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Words and Code]]></title>
  <link href="http://vaidehijoshi.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://vaidehijoshi.github.io/"/>
  <updated>2015-03-23T22:14:04-04:00</updated>
  <id>http://vaidehijoshi.github.io/</id>
  <author>
    <name><![CDATA[Vaidehi Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Machine State of Mind, Part 2: Implementing State Machines]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/03/24/a-machine-state-of-mind-part-2-implementing-state-machines/"/>
    <updated>2015-03-24T08:03:14-04:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/03/24/a-machine-state-of-mind-part-2-implementing-state-machines</id>
    <content type="html"><![CDATA[<iframe src="//giphy.com/embed/CYMzelWRqbQv6" width="480" height="345" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p><em>This blog post is part of a series on State Machines. Read Part 1 <a href="http://vaidehijoshi.github.io/blog/2015/03/17/a-machine-state-of-mind-part-1-understanding-state-machines/">here</a>.</em></p>

<p>Until you encounter a state machine in a gem, framework, or within someone else&rsquo;s code, you probably won&rsquo;t find one very easily. But as we learned last week, they&rsquo;re rather pervasive. I discovered state machines while helping build a large-scale eCommerce website.</p>

<p>But there actually weren&rsquo;t even that many state machines in our code! We were relying on state machines that lived in the source code of a Rails library with a variety of gems, commonly referred to as <a href="https://github.com/spree">spree</a>. (Why reinvent ecommerce platforms when so many people have already made &lsquo;em, amirite?)</p>

<p>So, I did what any self-respecting, completely unaware new developer would do: I dove into the spree source code. And boy, was <em>that</em> a rabbit hole. But, I learned some things about how state machines work in Rails and how to make them. It&rsquo;s good to conceptually understand the theory behind state machines, but the best way to learn something is by doing it. It&rsquo;s time to take off the training wheels and actually <em>build</em> our own state machine!</p>

<!--more-->


<h2>Starting Up The Machine Engine</h2>

<p>There are a few different options for implementing state machines in a Rails application; spree, for example, uses the <a href="https://github.com/pluginaweek/state_machine/tree/master">state_machine plugin</a>. Personally, I prefer the <a href="https://github.com/aasm/aasm">acts_as_state_machine gem</a> (aasm), as I&rsquo;ve found it to be a bit easier to use and understand.</p>

<p>Once we <code>gem install aasm</code> and add it to our application&rsquo;s <code>Gemfile</code>, we&rsquo;ll want to include it in the body of the class we&rsquo;re trying to implement the state machine on. In the case of our bookstore application, our <code>Order</code> objects are what will be transitioning from one state to another. As the application begins to grow, it&rsquo;ll be useful to namespace our objects (<code>Book::Order</code>) before including the module:</p>

<pre><code class="ruby">class Book::Order
  include AASM
end
</code></pre>

<p>Including the gem is the easy part. The next part is slightly trickier, yet remains pretty intuitive. First, we&rsquo;ll start by defining two states: an initial <code>state</code> that we want our object to start off in, and a second <code>state</code> we want our object to transition to. Then, we&rsquo;ll want to adding an <code>event</code> with an <code>from</code> and <code>to</code> in its <code>transition</code>:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">aasm</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">state</span> <span class="ss">:unplaced</span><span class="p">,</span> <span class="ss">:initial</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">state</span> <span class="ss">:submitted</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  event :submit do</span>
</span><span class='line'><span class="sr">    transitions :from =&gt; :unplaced, :to =&gt; :submitted</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Notice that the <code>event :submit</code> is the present tense verb form of the <code>state :submitted</code>. And when the <code>submit</code> event is called, the <code>Book::Order</code> object&rsquo;s <code>state</code> will transition from one state to the other.</p>

<p>That&rsquo;s pretty much all you really need to implement a state machine. But of course, we&rsquo;ve only got two states here, which isn&rsquo;t really much of a machine and definitely doesn&rsquo;t take advantage of all the functionalities that <code>aasm</code> provides us with.</p>

<p>Let&rsquo;s continue to build on the state machine based on <a href="http://i.imgur.com/Nd3ityK.png">the diagram</a> from last week&rsquo;s post and add a few more states and events:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">aasm</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:unplaced</span><span class="p">,</span> <span class="ss">:initial</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:submitted</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:processing</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:shipped</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:completed</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:returned</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:deleted</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;event :submit do</span>
</span><span class='line'><span class="sr">  transitions :from =&amp;gt; :unplaced, :to =&amp;gt; :submitted</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">event :process do</span>
</span><span class='line'><span class="sr">  transitions :from =&amp;gt; [:submitted, :returned], :to =&amp;gt; :processing</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">event :ship do</span>
</span><span class='line'><span class="sr">  transitions :from =&amp;gt; :processing, :to =&amp;gt; :shipped</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">event :complete do</span>
</span><span class='line'><span class="sr">  transitions :from =&amp;gt; :shipped, :to =&amp;gt; :completed</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">event :return do</span>
</span><span class='line'><span class="sr">  transitions :from =&amp;gt; :complete, :to =&amp;gt; :returned</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">event :delete do</span>
</span><span class='line'><span class="sr">  transitions :from =&amp;gt; :processing, :to =&amp;gt; :deleted</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Whoa &ndash; now we&rsquo;re talking! This state machine is even more complex than the diagram we started off with!</p>

<p>You&rsquo;ll notice that we even have a <code>state :returned</code> and an <code>event :return</code>, which transition from a <code>complete</code> state to a <code>returned</code> one. And if you&rsquo;ve got a really good eye, you&rsquo;ll see that the <code>process</code> event has changed, too. Now, we can call the <code>process</code> event on the object when it&rsquo;s either in the <code>submitted</code> state or the <code>returned</code> state.</p>

<p>Our state machine is now a <em>self-referential</em> structure, which means that the <code>process</code> event looks back to states within the machine to determine whether it can continue forward or not. This all seems pretty cool, but you better buckle in &ndash; it&rsquo;s about to get <em>even cooler</em>.</p>

<h2>Test Driving Your Machine</h2>

<p>It&rsquo;s lovely that we have this machine and all, but what&rsquo;s the fun if you can&rsquo;t take it out for a whirl? So, let&rsquo;s see what this thing can do.</p>

<p>This gem in particular provides us with a variety of public methods for any instances of our <code>Book::Order</code> class, all via our state machine:</p>

<pre><code>order = Book::Order.new # =&gt; =&gt; #&lt;Book::Order:0x007fad3d51aa30&gt;
order.unplaced?         # =&gt; true
order.may_submit?       # =&gt; true
order.submit            # calls the `submit` event

order.submitted?        # =&gt; true
order.unplaced?         # =&gt; false
order.may_submit?       # =&gt; false
order.submit            # =&gt; raises AASM::InvalidTransition
</code></pre>

<p><em>Protip</em>: If you&rsquo;re not a big fan of raising exceptions in your application, just add <code>aasm :whiny_transitions =&gt; false do</code> right inside of your class, and you&rsquo;ll return basic <code>boolean</code> values instead of exceptions.</p>

<p>Whew! So that&rsquo;s a lot of methods. But we didn&rsquo;t have to write <em>any</em> of them! Isn&rsquo;t that fantastic? Hopefully the usefulness of state machines is starting to come together now. Remember before we knew what a state machine was? How would we have had to handle all of this functionality?</p>

<p>We would&rsquo;ve had to do all of the following, multiple times:</p>

<ol>
<li>Make a migration that adds a <code>state</code> or <code>status</code> column in our <code>Book::Object</code> class, with a <code>string</code> value.</li>
<li>Give the <code>state</code> column an initial default value of <code>unplaced</code>.</li>
<li>Add an instance method called <code>unplaced?</code> with a <code>boolean</code> return value.</li>
<li>Add another instance method called <code>submit</code>, which changes the object&rsquo;s <code>state</code> property from <code>"unplaced"</code> to <code>"submitted"</code>.</li>
<li>Add yet <em>another</em> instance method called <code>submitted?</code>, with (at the very least), a single-line <code>if</code> conditional.</li>
<li>Add some more instance methods for good measure, all with some logic in them to keep track of our object&rsquo;s <code>state</code>.</li>
<li>Repeat steps 3-6 for every single new <code>state</code> we wanted to add.</li>
</ol>


<iframe src="//giphy.com/embed/ToMjGpx9F5ktZw8qPUQ" width="480" height="391" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>If we compare this horrifying list to our state machine, it&rsquo;s pretty clear that our machine takes care of all of this! Yes, it requires a little bit of setup when we create our class, but come on, it&rsquo;s like, four lines of code for each state! So much better. And you get all these methods for free! And they&rsquo;re pretty powerful, because we can call them anywhere in our code, on any instance of our object.</p>

<p>But can we customize this machine even further? Heck yes, we can!</p>

<h2>Trick Out Yo&#8217; Ride</h2>

<p>Now that we&rsquo;ve created a basic state machine, we can trick it out with any (or all!) of these options:</p>

<h3>1. Pass a block to an <code>event</code></h3>

<p>Whenever you want a specific event to call a particular method, simply pass a block to the method. The block will only be called if the transition occurs successfully.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">order_shipped_email</span>
</span><span class='line'>  <span class="c1"># Sends an email informing the User</span>
</span><span class='line'>  <span class="c1"># that their Order has been shipped</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;order.ship do</span>
</span><span class='line'><span class="sr">  order.user.send_order_shipped_email</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Only</span> <span class="k">if</span> <span class="n">order</span><span class="o">.</span><span class="n">may_ship?</span> <span class="n">returns</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kp">true</span><span class="o">&lt;</span><span class="sr">/code&gt;,&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">will</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">send_order_shipped_email</span><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="nb">method</span> <span class="n">actually</span> <span class="n">fire</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'><span class="sr">### 2. Use a callback</span>
</span><span class='line'><span class="sr">The `aasm` documentation defines a list of different callbacks you can use for your transitions; the callbacks will only be triggered when certain conditions are met (for example, when you exit a particular `state`).</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;state :shipped, :before_enter =&gt; :print_return_label</span>
</span><span class='line'><span class="sr">state :deleted&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">event</span> <span class="ss">:ship</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">transitions</span> <span class="ss">:from</span> <span class="o">=&gt;</span> <span class="ss">:processing</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:shipped</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;event :delete do, :after =&gt; :send_delete_confirmation do</span>
</span><span class='line'><span class="sr">  transitions :from =&gt; :processing, :to =&gt; :deleted</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">print_return_label</span>
</span><span class='line'>  <span class="c1"># Prints order details along with</span>
</span><span class='line'>  <span class="c1"># the return label information.</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def send_delete_confirmation</span>
</span><span class='line'><span class="sr">  # Sends a confirmation email</span>
</span><span class='line'><span class="sr">  # that the &lt;code&gt;Order&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">has</span> <span class="n">been</span> <span class="n">deleted</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>These callbacks work exactly as you might think, hooking into either a state or an event. Before the <code>Order</code> switches states from <code>processed</code> to <code>shipped</code>, the <code>print_return_label</code> method will fire. But the <code>send_delete_confirmation</code> method will only be called after the <code>delete event</code> is finished &ndash; only after the transition from <code>processing</code> to <code>deleted</code> occurs successfully.</p>

<h3>3. Implement a guard</h3>

<p>If you want to only allow a transition if a particular condition is defined; if the guard returns <code>false</code>, the transition will be denied, and will either return <code>false</code> or raise an error.</p>

<pre><code class="ruby">event :submit do
  transitions :from =&gt; :unplaced, :to =&gt; :submitted, :guard =&gt; :payment_successfully_processed?
end

def payment_successfully_processed?
  # Returns a truthy value based on
  # whether the user's credit card info
  # has been processed successfully or not
end
</code></pre>

<p>These are just three things you can do to spice up your state machine. Creating a state machine with this gem gives you a fair amount of flexibility. You can use multiple guards or build multiple transitions for a single event. As your state machine grows, you can call the <code>aasm.current_event</code> to keep track of where you are in your code.</p>

<p>Now that you know how to implement a state machine, hopefully you now realize the value in them and don&rsquo;t feel too intimidated. As long as you take it a step at a time, you can create your own state machine, with the exact kind of functionality your program needs. With that said, there&rsquo;s only one thing left to do: go forth implement one yourself! Fly young grasshopper, fly!</p>

<iframe src="//giphy.com/embed/dH89UD4eJuOeQ" width="480" height="269" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>State machines can be broken down into <code>states</code> and <code>events</code>. Events control the flow of one <code>state</code> to another.</li>
<li>Each <code>event</code> has a <code>from</code> and a <code>to transition</code>. Only if a transition occurs successfully will an object&rsquo;s <code>state</code> change. You can manipulate how an event or transition works using callbacks, blocks, and guards.</li>
<li>Find more great blog posts that implement FSM&rsquo;s <a href="http://www.sitepoint.com/state-machines-in-ruby/">here</a> and <a href="http://bits.citrusbyte.com/state-design-pattern-with-ruby/?utm_source=rubyweekly&utm_medium=email">here</a>. And if you want to get really fancy, learn how to use <a href="https://github.com/wvanbergen/state_machine-audit_trail">this</a>!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's All in the Family: Using Acts_as_tree]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/03/10/its-all-in-the-family-using-acts-as-tree/"/>
    <updated>2015-03-10T08:27:54-04:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/03/10/its-all-in-the-family-using-acts-as-tree</id>
    <content type="html"><![CDATA[<iframe src="//giphy.com/embed/eWYGCVTJuOcg0" width="480" height="360" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>When working in Rails, it&rsquo;s all the family &ndash; literally. No matter the size of your application, almost all of your objects are going to be related to each other. You can create however many objects you wan because database rows are cheap, cheap, cheap! But the more objects you make, the harder it is to keep track of the other data that the object relates to (which is generally yet <em>another</em> object).</p>

<p>I found myself in such a predicament last week, when I had to make numerous objects relate to one other to create a tree structure. The obvious first approach was to use the <code>belongs_to</code> and <code>has_many</code> relationship. But when I realized that I wanted some <code>Genre</code> objects to belong to <em>other</em> <code>Genre</code> objects, I ran into a problem. Depending solely on the ActiveRecord relationships turned out to be painful, messy, and complicated, and wouldn&rsquo;t make my code very flexible or sustainable over time.</p>

<p>So I Googled around and found a handy plugin created by DHH himself called <code>acts_as_tree</code>. This gem allows you to create a hierarchical structure of objects in your application and &ndash; to take it a step further &ndash; gives you a bunch of incredibly helpful methods. It even allows you to visualize your tree structure! Sound amazing? That&rsquo;s because it is. And if you follow a few easy steps, you can use it in your application, too.</p>

<!--more-->


<h2>Family Ties</h2>

<p>So, for this post I&rsquo;ll continue working through my basic eCommerce Bookstore application, which I&rsquo;ve been using as an example for my previous posts. I&rsquo;ve already got some <code>Book</code> objects, but as my store starts to grow, it&rsquo;s going to be pretty hard to keep track of the different genres of <code>Book</code> objects that I currently have available.</p>

<p>The first step to tackling this problem was easy: create <code>Genre</code> objects, each of which <code>has_many</code> different <code>Book</code> objects associated with it, while each <code>Book</code> object will <code>belong_to</code> one specific <code>Genre</code>.</p>

<p>But what about genres that are associated with and &ldquo;descend from&rdquo; other genres? Well, here&rsquo;s where the delightful and easy-to-use <code>acts_as_tree</code> gem comes in.</p>

<iframe src="//giphy.com/embed/pcPeWllpmv6Zq" width="480" height="431" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>First things first: we&rsquo;ll add <code>gem 'acts_as_tree'</code> to our Gemfile.</p>

<p>Next, we need to add a column to our <code>Genre</code> database. We can write a simple migration that will add a <code>parent_id</code> integer to our database, which will allow us to find the parents and children of a <code>Genre</code> object:
<code>ruby
class AddParentIdColumnToGenre &lt; ActiveRecord::Migration
  def change
    add_column :genres, :parent_id, :integer
  end
end
</code></p>

<p>Finally, we&rsquo;ll head over to our <code>Genre</code> model, which is what we needs to act as a (family) tree. We need to add a single line in here, which implements the ActiveRecord plugin and specifies what we&rsquo;ll be ordering our <code>Genre</code> objects by:
<code>ruby
class Genre &lt; ActiveRecord::Base
  has_many :books
  validates_presence_of :name
  acts_as_tree order: "name"
end
</code></p>

<h2>Blood Is Thicker Than Water</h2>

<p>Okay, now let&rsquo;s see this baby in action! We can start by making a root <code>Genre</code> object, and then giving it some children:</p>

<pre><code class="ruby">literature = Genre.create("name" =&gt; "Literature")

non_fiction = literature.children.create("name" =&gt; "Non-Fiction")
fiction = literature.children.create("name" =&gt; "Fiction")
</code></pre>

<p>Cool, but our tree doesn&rsquo;t really look like a tree yet. Let&rsquo;s give our <code>non_fiction</code> and <code>fiction</code> genres some children, grandchildren, and great-grandchildren of their own:</p>

<pre><code class="ruby">biography = non_fiction.children.create("name" =&gt; "Biography")
comic_novel = fiction.children.create("name" =&gt; "Comic Novel")
black_comedy = comic_novel.create("name" =&gt; "Black Comedy")
parody = comic_novel.create("name" =&gt; "Parody")
romantic_comedy = comic_novel.create("name" =&gt; "Romanic Comedy")
satire = comic_novel.create("name" =&gt; "Satire")
poltical_satire = satire.create("name" =&gt; "Political Satire")
</code></pre>

<p>Damn. Okay, well now our tree should look look less like a sprout and more like this bad boy:</p>

<iframe src="//giphy.com/embed/hMWmNKdcdhAyI" width="480" height="267" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>It Runs In The Family</h2>

<p>Even though we&rsquo;ve created all these parent-child relationships, what can we do with them, exactly? Well, a lot! You can call the <code>parent</code> and <code>children</code> methods to get a full list of all the objects associated with a particular <code>Genre</code> instance:</p>

<pre><code class="ruby">literature.parent                   # =&gt; nil
fiction.parent                      # =&gt; literature
literature.children                 # =&gt; [non_fiction, fiction]
literature.children.first.children  # =&gt; [Biography]

literature.root?                    # =&gt; true
fiction.root?                       # =&gt; false
biography.leaf?                     # =&gt; true

black_comedy.siblings               # =&gt; [parody, romantic_comedy, satire]
poltical_satire.ancestors           # =&gt; [satire, comic_novel, fiction, literature]

Genre.root                          # =&gt; literature
</code></pre>

<p>An important thing to note here is that the <code>children</code> method will return an <em>array</em> of objects, even if there&rsquo;s only one child! So if you&rsquo;re trying to get one particular object, remember to call the <code>first</code> method in the array, or search by a <code>Genre</code> object&rsquo;s specific <code>id</code> to avoid annoying bugs.</p>

<p>Some other cool methods to try include:</p>

<ol>
<li><p><code>leaves</code>, a class method that will return all the &ldquo;leaves&rdquo; of the tree (in an array).</p></li>
<li><p><code>descendants</code>, an instance method that will return all the children, and the children&rsquo;s children of an object (in an array).</p></li>
<li><p><code>self_and_siblings</code>, which returns the receiver object, as well as any siblings it may have (in an array).</p></li>
<li><p><code>default_tree_order</code>, which returns all the objects listed in alphabetical order!</p></li>
</ol>


<p>But the coolest feature of the <code>acts_as_tree</code> gem is Tree View, which allows you to see a visualization of your entire tree. All we have to do view this magic is add this line to our <code>Genre</code> model:</p>

<pre><code class="ruby">extend ActsAsTree::TreeView
</code></pre>

<p>And then, call the class method <code>tree_view</code>, which takes in an attribute parameter:</p>

<pre><code class="ruby">Genre.tree_view(:name)
</code></pre>

<p>The resulting return value is pure flora magic:
<code>
Literature
 |_ Non-Fiction
 |    |_ Biography
 |_ Fiction
 |    |_ Comic Novel
 |        |_ Black Comedy
 |        |_ Parody
 |        |_ Romantic Comedy
 |        |_ Satire
 |            |_ Political Satire
</code></p>

<p>Isn&rsquo;t it so beautiful?! Doesn&rsquo;t it make you feel like this:</p>

<iframe src="//giphy.com/embed/FlWgXEtj5aM5G" width="480" height="259" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>Or maybe it&rsquo;s just me.</p>

<h2>tl;dr?</h2>

<ul>
<li>A lot of people seem to like the <a href="https://github.com/stefankroes/ancestry"><code>ancestry</code> gem</a>, but I think that <code>acts_as_tree</code> is a good one to start off with. If you need the extra functionality that <code>ancestry</code> provides, then you can eventually level up to that. Another variation on the <code>acts_as_tree</code>  is the <a href="https://github.com/chrisroberts/acts_as_sane_tree"><code>acts_as_sane_tree</code> gem</a>, which is configured for PostgreSQL 8.4 and comes with some cool extra methods (but isn&rsquo;t nearly as massive as ancestry).</li>
<li>There are a lot of different ways to implement the <code>acts_as_tree</code>. Check out <a href="http://railscasts.com/episodes/162-tree-based-navigation">this railscast</a> on tree-based navigation using this gem/plugin (beware the date on this one, though!).</li>
<li>There are a lot of different ways to deal with recursive data structures in Rails. Check out this <a href="http://gmarik.info/blog/2012/10/14/recursive-data-structures-with-rails">in-depth look</a> at the tried and tested options to learn more.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bundle Up &amp; Let Your Objects Do the Freezing: Frozen Hashes]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/03/03/bundle-up-and-let-your-objects-do-the-freezing-frozen-hashes/"/>
    <updated>2015-03-03T08:43:04-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/03/03/bundle-up-and-let-your-objects-do-the-freezing-frozen-hashes</id>
    <content type="html"><![CDATA[<iframe src="//giphy.com/embed/b7pVN1KY8ycg0" width="480" height="213" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Snowmageddon. Snowpocalypse. The Deep Freeze of 2015. You can call it whatever you want, but we can all agree on one thing: it&rsquo;s so damn cold outside. In fact, it&rsquo;s so cold that I recently saw this error message while debugging a Postgres issue:
<code>RuntimeError: can't modify frozen Hash</code></p>

<p>My first thought was, naturally, <em>holy shit, even my hashes are frozen</em>. I did a little digging, and it turns out that we aren&rsquo;t the only ones susceptible to these chilly temperatures. Apparently, objects can also freeze!</p>

<p>So, in honor of the frozen tundra that we all seem to currently inhabit, I decided to explore the icy-cold depths of Rails frozen objects. Before you read on though, you should know: I&rsquo;m going to use only gifs from the Disney animated film, <em>Frozen</em> — don&rsquo;t say I didn&rsquo;t warn you.</p>

<!-- more -->


<h2>Objects As Cold As Ice</h2>

<p>First things first: what&rsquo;s a frozen object? Well, they&rsquo;re frozen, which means they can&rsquo;t change &ndash; they&rsquo;re immutable and cannot be modified. There are some objects in Ruby that are perpetually frozen, such as any <code>Fixnum</code>, <code>Bignum</code>, <code>Float</code>, and <code>Symbol</code> objects.</p>

<iframe src="//giphy.com/embed/Fjy5XItIvYjEQ" width="480" height="269" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>You&rsquo;ve probably worked with all of these objects before, but may not know that they&rsquo;re actually frozen! Don&rsquo;t believe me? Well, you can check for yourself. Just call the <code>frozen?</code> method on any object of this class:</p>

<pre><code>$ irb
2.2.0 :001 &gt; 1.frozen?
 =&gt; true
2.2.0 :002 &gt; a = :im_a_symbol
 =&gt; :im_a_symbol
2.2.0 :003 &gt; a.frozen?
 =&gt; true
2.2.0 :004 &gt; 3.14.frozen?
 =&gt; true
</code></pre>

<p>This kind of makes sense though, right? Imagine if I could just start rewriting values all over the damn place. I could set <code>1</code> equal to <code>nil</code> and make <code>2</code> equal <code>3</code>, and then we&rsquo;d really hit crazytown.</p>

<p>Frozen objects keep certain things secure and certain in Ruby (and also in Rails!) So, freezing objects is a&hellip;good thing? Well, yes. But also, no.</p>

<h2>The Freeze Method: A Cold Piece Of Work</h2>

<p>Just as there&rsquo;s a method to check whether an object is <code>frozen?</code> or not, there&rsquo;s also a method to freeze mutable objects and make them immutable called &ndash; you guessed it &ndash; <code>freeze</code>. This method is pretty simple: yuo just call it on an object in order to rpevent further modifications to said object. If you <em>do</em> try to modify the object after freezing it, you&rsquo;ll get a <code>RuntimeError</code>:
<code>
2.2.0 :005 &gt; x = {1 =&gt; 'a', 2 =&gt; 'b', 3 =&gt; 'c'}
 =&gt; {1=&gt;"a", 2=&gt;"b", 3=&gt;"c"}
2.2.0 :006 &gt; x.freeze
 =&gt; {1=&gt;"a", 2=&gt;"b", 3=&gt;"c"}
2.2.0 :007 &gt; x.frozen?
 =&gt; true
2.2.0 :008 &gt; x[1] = 'b'
RuntimeError: can't modify frozen Hash
</code></p>

<iframe src="//giphy.com/embed/oYKesMM459o4w" width="480" height="200" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>But before you get all Elsa on me and start freezing everything, you should know some things about how to use the <code>freeze</code> method as a responsible developer:</p>

<ol>
<li><p>First and foremost: don&rsquo;t try to call a <code>defrost</code> or <code>thaw</code> method, because there&rsquo;s no such thing. In fact, there is <em>absolutely no way</em> to unfreeze an object. It simply cannot be undone. So, proceed with great caution when freezing things. Or maybe just don&rsquo;t do it at all.</p></li>
<li><p>The <code>freeze</code> method operates on an object reference, not on a variable. Wait, whut? If this sounds like Ruby objects aren&rsquo;t actually being modified, but their references are instead, well&hellip;that&rsquo;s totally right.</p></li>
</ol>


<p>I really liked the way that Michael Morin explained this in <a href="http://ruby.about.com/od/qa/ss/Can-T-Modify-Frozen-String.htm">his post</a> on frozen objects:</p>

<blockquote><p>When you freeze a hash, it just freezes the references to the objects it already has, it doesn&rsquo;t actually freeze the objects themselves. The frozen hash won&rsquo;t know the difference here. This is an important thing to understand about freezing objects, it&rsquo;s not recursive. All freezing does is prevent the references the object holds from being modified.</p></blockquote>

<p>While we can&rsquo;t unfreeze &ldquo;frozen&rdquo; objects, this particular quality gives us a little bit leeway to get around the lack of a thaw method.</p>

<h2>Chill Out, But Don&rsquo;t Freeze</h2>

<p>There are a few different ways to change an immutable frozen object (which, hello, aren&rsquo;t actually frozen, just their references are). One thing you can do is create a duplicated object, which will <em>not</em> be frozen and therefore, completely mutable:
<code>
2.2.0 :009 &gt; x.dup
 =&gt; {1=&gt;"a", 2=&gt;"b", 3=&gt;"c"}
2.2.0 :010 &gt; y = _
 =&gt; {1=&gt;"a", 2=&gt;"b", 3=&gt;"c"}
2.2.0 :011 &gt; y.frozen?
 =&gt; false
2.2.0 :012 &gt; x.frozen?
 =&gt; true
2.2.0 :013 &gt; y[1] = 'b'
 =&gt; "b"
2.2.0 :014 &gt; y
 =&gt; {1=&gt;"b", 2=&gt;"b", 3=&gt;"c"}
</code></p>

<p>Keep in mind, however, that this only changes the data in the duplicated object, not the original one! So&hellip;what now? Well, since only the reference to an object is frozen, that means that you can modify the actual data inside of the frozen object:
<code>
2.2.0 :015 &gt; x[1] &lt;&lt; 'bc'
 =&gt; "ab"
2.2.0 :016 &gt; x
 =&gt; {1=&gt;"abc", 2=&gt;"b", 3=&gt;"c"}
2.2.0 :017 &gt; x.frozen?
 =&gt; true
</code></p>

<p>Weird, right!? Our <code>x</code> variable, which points to the <code>Hash</code> object, is still very much frozen. But, we can modify the data and values inside of the object itself. Since we don&rsquo;t want to make an actual copy of the variable, we can instead modify the objects held within that variable (in our case, we&rsquo;re directly modifying the <code>String</code> object, which is a the value of a key in this frozen Hash)</p>

<h2>Freezing Out Those Error Messages</h2>

<p>Cool, so this I guess this is a thing in Ruby. But wait &ndash; it&rsquo;s also a pretty important thing in Rails! Objects in Rails are infinitely more complicated than in Ruby, mostly because you&rsquo;re dealing with ActiveRecord and its methods. Whenever you&rsquo;re trying to delete an ActiveRecord object, you depend on the <code>destroy</code> method.</p>

<p>For example, I use this method in my bookstore app, and I have a <code>delete</code> action in my <code>BooksController</code> that contains code that looks something like this:
<code>ruby
@book = Book.find(1)
@book.destroy
</code></p>

<p>Now if I wanted to modfiy this book&rsquo;s type after I delete it, I&rsquo;d get an error:
<code>
[1] pry(main)&gt; @book.type = 'hardcover'
TypeError: can't modify frozen hash
</code></p>

<p>Why is this? Well, even though I deleted the object, it still exists in the <code>@book</code> variable, which still retains all the attributes of the object. Once I destroy the record, the object became frozen. Since the object&rsquo;s attributes hash is frozen, when I try to modify it, I get this error.</p>

<p>The <a href="http://api.rubyonrails.org/classes/ActiveRecord/Persistence.html#method-i-destroy">Rails documentation</a> explains how it implements the <code>freeze</code> method, stating that <code>destroy</code> method:</p>

<blockquote><p>Deletes the record in the database and freezes this instance to reflect that no changes should be made (since they can&rsquo;t be persisted).</p></blockquote>

<p>To avoid creating a <code>@book</code> object that&rsquo;s frozen and still hanging around for no apparent reason, I could instead implicitly delete the object in a single line. Either this:
<code>ruby
Book.find(1)destroy
</code>
or
<code>ruby
Book.destroy(1)
</code>
would work.</p>

<p>Alternatively, I could just use the <code>delete</code> method, which doesn&rsquo;t instantiate an object, but isntead directly removes the row from the database.</p>

<p>Frozen objects are in front of us everyday. Ruby actually uses the <code>freeze</code> method when you copy certain objects. According to <a href="http://rubylearning.com/satishtalim/mutable_and_immutable_objects.html">this post</a>, when you use a string as a key of a <code>Hash</code> object, the string is copied, frozen, and then that duplicated copy is used as the key of the hash. This is pretty cool because this means that even if the original string is modified, the duplicated one isn&rsquo;t affected because it has been frozen! The same goes for filenames: internal operations of an application rely on a frozen copy of a filename, rather than the original one.</p>

<p>Once you understand the functionality of <code>freeze</code>, it becomes a lot easier to understand those weird error messages. Soon, you&rsquo;ll no longer fear the ice, but instead bask in the sun. Or&hellip;something more poetic.</p>

<p>Anyways, here&rsquo;s a dancing snowman:</p>

<iframe src="//giphy.com/embed/N80v6XYayA5vG" width="480" height="213" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>You can use the <code>freeze</code> method to make mutable objects immutable. To check whether an object can be modified or not, use the <code>frozen?</code> method, which will return a boolean value.</li>
<li>Certain Ruby objects, such as integers, floats, and symbols, are always frozen and cannot be modified.</li>
<li>Someone made a <a href="https://github.com/zizkovrb/melt">melt gem</a> &ndash; for realsies!</li>
<li>Some people are <a href="http://m.onkey.org/ruby-i-don-t-like-3-object-freeze">not big fans</a> of the weird functionality of Ruby <code>freeze</code>. But it&rsquo;s still worth it to <a href="http://blog.adamstegman.com/activerecord-hangs-on-to-destroyed-relations.html">learn how it works</a>, especially since it can be <a href="http://blog.adamstegman.com/activerecord-hangs-on-to-destroyed-relations.html">super helpful</a> for <a href="http://www.devarticles.com/c/a/Ruby-on-Rails/Updating-and-Deleting-with-the-Active-Record/2/">debugging Rails apps</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time: The Black Sheep of the Programming Family]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/02/17/time-the-black-sheep-of-the-programming-family/"/>
    <updated>2015-02-17T08:30:24-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/02/17/time-the-black-sheep-of-the-programming-family</id>
    <content type="html"><![CDATA[<iframe src="//giphy.com/embed/FHuIOZoauNXXO" width="480" height="480" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>No matter where you&rsquo;re from, what programming language you prefer, or which JavaScript framework you&rsquo;re committed to, I think you&rsquo;ll agree with me on one thing: time is a bitch. And no, I don&rsquo;t mean the wrinkles on your forehead kind of time (although that sucks too); I&rsquo;m talking about time as a programming concept.</p>

<p>I mean, you create some migrations, build some models, make some API calls, but then time shows up and brings down the party. I happened to learn all about programming&rsquo;s royal pain in the ass while working with the <a href="http://instagram.com/developer/">Instagram API</a> last week. After I finally got my code working, I took a look at my JSON response and saw this strange creature:
<code>
"created_time": "1423694433"
</code></p>

<p>Yeah, I didn&rsquo;t know what that was either. So I went down the rabbit hole and learned about all the different things there are to know about dealing with time in your Rails applications. So save yourself some time (HAHA get it, get it?) and get the lowdown below.</p>

<!-- more -->


<h2>In The Beginning, It Was&hellip;1970?</h2>

<p>Okay, so you know that weird JSON response I got? The one that looked like this crazysauce: <code>"1423694433"</code>.</p>

<p>Well, believe it or not, that&rsquo;s not just a random number &ndash; it&rsquo;s a representation of time. When I first saw this in my API reponse, I knew that this definitely was neither a typical Ruby <code>Time</code> object, nor something I&rsquo;d ever seen in any of the databases of my Rails applications (which usually uses the <code>datetime</code> format).</p>

<p>So, I asked the interwebz for help. It turns out that this format is something called <strong>Unix time</strong> (also sometimes referred to as POSIX time or Epoch time). Unix time is short for the &ldquo;Unix Epoch&rdquo;, which is what we refer to when we use <a href="http://en.wikipedia.org/wiki/Unix_time">Unix time formats</a>. Basically what you need to know is this: when the first computer turned on at 00:00:00 Coordinated Universal Time (UTC) on Thursday, January 1st, 1970, time officially began. I mean, time just <em>started</em>. The computer turned on and BOOM! It just started counting.</p>

<p>If you&rsquo;ve ever played around in irb, you&rsquo;ve probably used this method to figure out what time it is:
<code>
♥ irb
2.1.2 :001 &gt; Time.now
 =&gt; 2015-02-16 18:29:23 -0500
</code>
But that&rsquo;s just one format of dealing with time. Want to know what time it is in the Unix Epoch? Simply apply the ever-handy <code>to_i</code> method:
<code>
2.1.2 :002 &gt; Time.now.to_i
 =&gt; 1424129416
</code>
And what if you want to convert a Unix timestamp (like the one in my JSON response) back to a Ruby <code>Time</code> object? Just use the <code>Time.at</code> method:
<code>
2.1.2 :003 &gt; Time.at(1423694433)
 =&gt; 2015-02-11 17:40:33 -0500
</code></p>

<p>Okay, okay &ndash; but what about all the stuff that happened before 1970? How do we account for that? I&rsquo;ll tell you how: NEGATIVE. NUMBERS.
<code>
2.1.2 :003 &gt; Time.at('-1423694433'.to_i)
 =&gt; 1924-11-19 20:19:27 -0500
</code>
Pretty sweet, right? Don&rsquo;t worry; I&rsquo;m about to complicate it a bit further.</p>

<h2>Even More Types of Time</h2>

<p>Another very common format for handling Time is ISO8601. There have been a lot of arguments <a href="http://japhr.blogspot.com/2009/01/iso-8601-is-only-date-format.html">in favor of ISO8601</a>, its YYYY-MM-DD formatting being one of the foremost reasons for that debate. The ISO8601 format is also supported by various libraries, and can be sorted easily, which makes it the ideal candidate for your database.</p>

<p>An important thing to remember about using ISO8601 is that it&rsquo;s part of the Ruby Standard Library, which means you must require it. (If you missed my explanation on the difference between the Ruby Standard Library and the Core Library, head over to <a href="http://vaidehijoshi.github.io/blog/2015/02/10/money-makes-the-world-go-round-using-money-rails-and-bigdecimal/">last week&rsquo;s post</a> to catch up.)</p>

<p>But if we play with ISO8601 in irb, you&rsquo;ll notice something kind of strange:
<code>
2.1.2 :004 &gt; require 'time'
 =&gt; true
2.1.2 :005 &gt; Time.now.iso8601
 =&gt; "2015-02-16T19:09:38-05:00"
2.1.2 :006 &gt; Time.now.utc.iso8601
 =&gt; "2015-02-17T00:09:34Z"
</code>
See that <code>Z</code> at the end of the string? That&rsquo;s how the <code>UTC</code> time zone is represented in ISO8601, with the <code>Z</code> short for &ldquo;Zero&rdquo; time. It&rsquo;s also worth reminding ourselves that Unix timestamps are also set in the <code>UTC</code> time zone.</p>

<h2>Goddamn Time Zones</h2>

<iframe src="//giphy.com/embed/CsV1pnR9hYLuM" width="480" height="269" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Look man, I&rsquo;m not gonna lie to you: time zones will jack your shit up. Time zone bugs are <em>so</em> common, it&rsquo;s like they&rsquo;re just waiting there patiently, hoping that you&rsquo;ll make a mistake.</p>

<p>But you&rsquo;re a Rails developer &ndash; ain&rsquo;t no time zone gonna stop you! Instead, you&rsquo;re going to make your code defensive and subscribe to these best practices:</p>

<ol>
<li><p>Set your time zone in the <code>config/application.rb</code> file in your Rails app. Look for <code>config.time_zone</code>, and configure your time zone equal to that value. Rails will refer to that as your base time zone going forward, and ActiveRecord will convert between `UTC and your set time zone whenever you query.</p></li>
<li><p>Use the <code>in_time_zone</code> method to convert <code>Time</code> to your system&rsquo;s current set time zone. For example, <code>Time.now.in_time_zone("EST").iso8601</code>.</p></li>
<li><p>Use <code>Time.current</code> whenever you make an ActiveRecord query (ActiveRecord will convert <code>Time.current</code> and convert it to <code>UTC</code>: <code>Comment.where(["comments.published_at &gt; ?", Time.current])</code></p></li>
<li><p>DO NOT use <code>Time.now</code>! This returns <em>your</em> system&rsquo;s time, and ignores whatever time zone you configured for your Rails app. Instead, use numerical attributes and methods (such as <code>1.day.from_now</code> or <code>Date.current</code>), which rely on the time zone you configured in your <code>application.rb</code> to determine the return value.</p></li>
</ol>


<p>There are a lot of loopholes when it comes to dealing with Time zones. You can read more about them on <a href="http://www.elabs.se/blog/36-working-with-time-zones-in-ruby-on-rails">this super helpful post</a>.</p>

<h2>Time: Annoying, But Also&hellip;Awesome?</h2>

<p>Ok, don&rsquo;t get me wrong &ndash; time makes our lives miserable as developers. But it also presents some pretty epic challenges, which also makes our jobs interesting! (Look, I&rsquo;m trying to point out the silver lining here.)</p>

<p>For example, <strong>leap seconds</strong>. Yes, really &ndash; it&rsquo;s a thing. <a href="http://en.wikipedia.org/wiki/Leap_second">Leap seconds</a> occur 1-2 times a year, on either June 30 and/or December 31st. They&rsquo;re necessary in order to keep the Earth&rsquo;s time of day close enough to the Sun&rsquo;s mean time. But, how do you account for this in programs? Well, Google actually does something pretty cool: instead of adding one second, Google&rsquo;s servers implement &ldquo;leap smears&rdquo;, which extend the seconds surrounding a leap second by just a little bit &ndash; enough to account for an entire extra second! Side note: the next leap second is on June 30th of this year! I hope you&rsquo;re ready.</p>

<p>Another bizarre thing is <strong>Y2038</strong>. If this sounds reminiscent of Y2K, that&rsquo;s because it is. Essentially, <a href="http://www.y2038.com/">the 2038 problem</a> boils down to this: On January 19, 2038, Unix timestamps will stop working because of a 32-bit overflow. So, all of the millions of applications that use this time format will have to either reconfigure to 64-bit systems, or choose a new format to store dates and times. There&rsquo;s supposedly no universal solution to this, but hopefully someone will figure out a fix in the next 22 years.</p>

<p>Hopefully by that point, someone will have figured out how to get rid of time zones completely.</p>

<iframe src="//giphy.com/embed/f96k0qHpzmnPG" width="480" height="269" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>Unix timestamps and ISO8601 are both good formats for storing date and time in your database. Do a little research to decide <a href="http://stackoverflow.com/questions/15554586/timestamps-iso8601-vs-unix-timestamp">which of these formats</a> is the best tool for whatever job you&rsquo;re trying to accomplish.</li>
<li>Dealing with time zones is hard, but the <a href="http://danilenko.org/2012/7/6/rails_timezones/">Exhaustive Guide to Rails Time Zones</a> will save you hours of banging your head against the wall &ndash; well, for time-related things, at least.</li>
<li>Want to be a <code>Time</code> object superstar? Read <a href="https://unix4lyfe.org/time/?v=1">this post</a>, which was featured on HackerNews, and peruse the <a href="http://ruby-doc.org//core-2.2.0/Time.html">Ruby documentation</a> to get the skinny on all things time-related.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Money Makes the World Go Round: Using Money-Rails and BigDecimal]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/02/10/money-makes-the-world-go-round-using-money-rails-and-bigdecimal/"/>
    <updated>2015-02-10T08:07:09-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/02/10/money-makes-the-world-go-round-using-money-rails-and-bigdecimal</id>
    <content type="html"><![CDATA[<p><img src="http://s3-ec.buzzfed.com/static/enhanced/webdr02/2013/3/26/12/enhanced-buzz-19756-1364314697-15.jpg" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>Mo money, mo problems. This is especially the case when you&rsquo;re a new developer trying to onboard onto a huge eCommerce Rails application.</p>

<p>No, but really - money is such a pain in the ass to deal with as a programmer. So much logic and detail goes into accepting a payment, processing a transaction, checking an order&rsquo;s status&hellip;and don&rsquo;t even get me <em>started</em> on shipping &ndash; seriously, I&rsquo;m saving the entire concept of shipping for another blog post.</p>

<p>But, at some point or another, you have to deal with other people&rsquo;s money. And you have to try and not screw it up, because apparently people really don&rsquo;t like that. So, how do you handle all those dolla dolla bills? Yup, you guessed it: with the <strong>money-rails library</strong> and Ruby&rsquo;s <strong>BigDecimal object</strong>.</p>

<!-- more -->


<h2>Get Dat Dough: Implementing Money-Rails</h2>

<p>Including the money-rails library is fairly simple: add <code>gem 'money-rails'</code> to your Gemfile and then <code>bundle</code> in your console.</p>

<p>But what exactly <em>is</em> this library, and how do you effectively use it? Well, that&rsquo;s another thing entirely.</p>

<p>The most important thing to note is that the <code>money-rails</code> library provides integration of the <code>money</code> gem for Rails applications. So, before you go around throwing about your dough every which way, here are a few things about the <code>money</code> gem to keep in mind:</p>

<ol>
<li>It gives you a <code>Money</code> class, and instances of this class (<code>Money</code> objects) contain all the information about a certain <em>amount</em> of money.  Provides a Money class which encapsulates all information about an certain amount of money, such as its value and its currency.</li>
<li>It provides you with a <code>Money::Currency</code> class, which contains all the information about a certain monetary unit. Instances of this class are how we will represent different currencies.</li>
<li>It includes APIs to exchange one kind of currency into another.</li>
<li>It represents money in <code>Integer</code> values, not <code>Float</code>, in order to avoid rounding errors.</li>
</ol>


<p>This last one is important, so try to remember it &ndash; we&rsquo;re going to come back to this in a bit.</p>

<h2>Make It Rain!</h2>

<p>Ok, time to get rich: let&rsquo;s make ourselves some money. Instantiating a <code>Money</code> object isn&rsquo;t too hard; simply create a new instance and pass it an amount and a currency:
<code>ruby
five_bucks = Money.new(500, "USD")  #=&gt; $5.00 USD
five_bucks.cents     #=&gt; 500
five_bucks.currency  #=&gt; Currency.new("USD")
</code></p>

<p>Notice that the amount must be passed in as cents, while the currency must be passed in as either a <code>String</code> or a <code>Money::Currency</code> object.</p>

<p>Money usually means math, so let&rsquo;s do some:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_money</span> <span class="o">=</span> <span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">USD</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">your_money</span> <span class="o">=</span> <span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1500</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">USD</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;my_money + your_money == Money.new(4500, &amp;ldquo;USD&amp;rdquo;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can also use the <code>parse</code> method, which takes in a symbol and number in a string format, and returns a <code>Money</code> object with the correct currency type:
<code>ruby
Money.parse("£60") == Money.new(60, "GBP")
</code></p>

<p>In addition to comparing currencies, you can create an access them as objects:
<code>ruby
currency = Money.new(60, "GBP").currency #=&gt; "£60.00 GBP"
currency.iso_code #=&gt; "GBP"
currency.name     #=&gt; "British Pound"
</code></p>

<p>You can access any information of a currency (which is, again, just a <code>Money</code> object), including its <code>name</code>, <code>iso_code</code>, <code>symbol</code>, and <code>delimiter</code>. And if you want to create a new currency, you&rsquo;d simply need to pass in the values as a hash into the <code>register</code> class method. There&rsquo;s also the <code>default_currency</code> class method, which does exactly what you think it does, and an <code>exchange_to</code> method, which can be super handy if you ever want to sell your products&hellip;well, basically anywhere.</p>

<p>So. You can make money now. Like, actually <em>create</em> it. Do you feel like a god yet? Okay good. Hold onto that feeling, because it&rsquo;s about to get a little more complicated.</p>

<iframe src="//giphy.com/embed/jUNAEqdvpQCcM" width="480" height="239" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>BigDecimal: Not Just Any Ol&#8217; Number</h2>

<p>When I was first playing around with this gem, I was much like you: young, naive, thoroughly amused by the fact that I could play with money in my console with (mostly) no consequences. And then I saw this:</p>

<pre><code class="ruby">#&lt;BigDecimal:7fbd6eab87f8,'0.8E1',9(36)&gt;
</code></pre>

<p><em>Um. What? Is that an association? An object? Is it even Ruby?</em></p>

<p>The answer to my questions were no, yes, and absolutely. Actually, that little guy up there is my new friend, <code>BigDecimal</code>. And by the time you finish reading this post, I think you&rsquo;re going to like him, too.</p>

<p>Okay, time for a quick exercise! Open up irb and type in: <code>1.01 - 1.00</code></p>

<pre><code>2.1.2 :001 &gt; 1.01 - 1.00
 =&gt; 0.010000000000000009 
2.1.2 :002 &gt; n = _
 =&gt; 0.010000000000000009 
2.1.2 :003 &gt; n &gt; 0.01
 =&gt; true 
</code></pre>

<p>Wait&hellip;Ruby thinks that the difference between <code>1.01</code> and <code>1.00</code> is greater than <code>0.01</code>? OH SHIT. DID WE BREAK RUBY?!</p>

<p>Nope, nope we did not. But, we <em>did</em> just discover the one true flaw of Ruby <code>Float</code>, which is that they can&rsquo;t store decimals very precisely. Apparently, the reason for this</a> is that floats are stored in a binary number format, which means that there&rsquo;s a lot of conversion from binary to decimal going on under the hood.</p>

<p>This probably doesn&rsquo;t seem all that important, but here&rsquo;s the thing: people really don&rsquo;t like it when you take their money. And when you use floats, you may very well be rounding up in cases when you really shouldn&rsquo;t be, which would result in some sort of numerical error.</p>

<p>Enter our new buddy, <code>BigDecimal</code>. We can do the exact same calculation with this object, but without the arbitrary rounding! If we try it out in irb, we&rsquo;ll get the number that we were originally expecting:</p>

<pre><code>2.1.2 :005 &gt; BigDecimal.new("1.01") - BigDecimal.new("1.00")
 =&gt; #&lt;BigDecimal:7fee2add1560,'0.1E-1',9(27)&gt; 
2.1.2 :006 &gt; n = _
 =&gt; #&lt;BigDecimal:7fee2add1560,'0.1E-1',9(27)&gt; 
2.1.2 :007 &gt; n.to_f
 =&gt; 0.01 
</code></pre>

<p>If you remember scientific notation from middle school, then you&rsquo;ll notice what&rsquo;s going on in <code>0.1E-1</code>, and how that converts to <code>0.01</code> when we called the <code>to_f</code> method on it. This takes more time, but it is far more accurate &ndash; something that&rsquo;s pretty important when it comes to the monies.</p>

<p>Remember earlier in the post when I told you to remember that the <code>money</code> gem uses <code>Integer</code> but not <code>Float</code>? Well, it also uses <code>BigDecimal</code> objects, for the same exact reason that we just discovered on our own.</p>

<h2>What Is Standard Cannot Be Core</h2>

<p>If your first reaction to reading this post was opening up irb and trying to make your own <code>BigDecimal</code> object, then you most certainly encountered this error:</p>

<pre><code>♥ irb
2.1.2 :001 &gt; BigDecimal.new
NameError: uninitialized constant BigDecimal
  from (irb):1
</code></pre>

<p>Before you freak out, let me assure you that I did not lie to you &ndash; <code>BigDecimal</code> most surely is a real thing. But it&rsquo;s not a core thing. What I mean by that is, <code>BigDecimal</code> is not part of the Ruby Core Library; it&rsquo;s actually part of the Ruby Standard Library.</p>

<p>If you&rsquo;re thinking to yourself, <em>Whut?! Ruby has two different libraries?</em>, you&rsquo;d be right. But even though both deal with Ruby objects, there&rsquo;s a fundamental difference between the two.</p>

<p>The <a href="http://www.ruby-doc.org/core-2.2.0/">Ruby Core Library</a> is what you use every day, including basic objects such as <code>String</code>, <code>Integer</code>, <code>Float</code>, <code>Array</code>, <code>Hash</code>, and many others. On the other hand, the objects in the <a href="http://www.ruby-doc.org/stdlib-2.2.0/">Ruby Standard Library</a> may seem a little less familiar. Unlike the Core Library, objects from the Standard Library have to be explicitly required. <code>BigDecimal</code> objects are part of the Standard Library, as are <code>Abbrev</code>, <code>Logger</code>, and <code>Matrix</code> objects.</p>

<p>The Standard Library is an extension of the Ruby language. You will always have access to the Core Library, but if you want to use an object that exists outside of the Core Library, you&rsquo;ll need to specifically require it. So, if you want to play with <code>BigDecimal</code> in the console or use it in your application, you&rsquo;ll have to type this in to have access to the object: <code>require 'bigdecimal'</code>.</p>

<h2>More Bang For Your Buck</h2>

<p>When I first started reading about <code>BigDecimal</code>, I wondered why I had never run into this type of object before. How could I have missed it entirely? As a beginner, it may not sense to use this type of Ruby object at all, and it may very well slow you down. In fact, I think floats are the default object in use for a reason: they&rsquo;re much cheaper to use in memory, and can convert, lookup, and do arithmetic much faster than <code>BigDecimal</code>. Calculations on <code>BigDecimal</code> objects are much slower because they are objects, which take up <em>far</em> more space and memory. However, if you&rsquo;re actually dealing with currency values &ndash; building an ecommerce application, for example &ndash; <code>BigDecimal</code> still seems to be a clear winner to me.</p>

<p>The <code>money</code> gem and <code>money-rails</code> library provide a lot of flexibility when it comes to handling money in your application mostly because they create <code>Money</code> objects. I&rsquo;m a huge fan of object-oriented programming, and these libraries allow you to manipulate and access your currency with far more ease than if they were stored as simple integers, or even floats.</p>

<p>However, these resources are only the tip of the iceberg when it comes to dealing with money in your Rails application. Another awesome library is <a href="https://github.com/RubyMoney/monetize">monetize</a>, which allows you to convert different types of Ruby objects into <code>Money</code> objects. Once you get the basic structure and namespacing of these libraries, learning about new ones will be a piece of cake. Pretty soon, you&rsquo;ll be breaking the bank with all your knowledge about using money in Rails. Maybe you&rsquo;ll even end up like this guy:</p>

<iframe src="//giphy.com/embed/3Jhdg8Qro5kMo" width="480" height="295" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>The <code>money-rails</code> library allows you to create <code>Money</code> objects, including different currencies. Ruby <code>BigDecimal</code> objects round more accurately and are more precise than <code>Float</code> objects, making them more preferable when working with money.</li>
<li>Read more about the methods available to <code>BigDecimal</code> objects in the <a href="http://www.ruby-doc.org/stdlib-2.2.0/libdoc/bigdecimal/rdoc/index.html">Ruby documentation</a>, and check out all the cool stuff that the <code>money</code> gem can do over on <a href="http://rubymoney.github.io/money/">their website</a>.</li>
<li>Want to know more about what makes floats weird? Read <a href="http://www.rails-troubles.com/2011/12/ruby-float-quirks.html">this blog post</a>.</li>
</ul>

]]></content>
  </entry>
  
</feed>
