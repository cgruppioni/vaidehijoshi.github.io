<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: #technicaltuesdays | Words and Code]]></title>
  <link href="http://vaidehijoshi.github.io/blog/categories/number-technicaltuesdays/atom.xml" rel="self"/>
  <link href="http://vaidehijoshi.github.io/"/>
  <updated>2015-06-08T22:34:56-04:00</updated>
  <id>http://vaidehijoshi.github.io/</id>
  <author>
    <name><![CDATA[Vaidehi Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Refactoring to Reveal Rails Group_by]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/06/09/refactoring-to-reveal-rails-group-by/"/>
    <updated>2015-06-09T08:43:24-04:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/06/09/refactoring-to-reveal-rails-group-by</id>
    <content type="html"><![CDATA[<p><img src="http://img.pandawhale.com/post-10513-Code-Refactoring-Cat-in-Bathtu-U295.gif" style="display: block; margin-left: auto; margin-right: auto;"/></p>

<p>There are a lot of opportunities in programming to feel pretty silly about yourself. I&rsquo;m sure that the more coding experience you have, the less often these moments actually occur. But early on in your career, they seem to happen quite often &ndash; or they do to <em>me</em>, at least.</p>

<p>I had one of those moments a couple weeks ago, when I wrote a super long method and then asked a senior developer to take a look at it. While I was writing it, something seemed inherently wrong. I was sure there was a better way to do it, but I guess my Googling skills aren&rsquo;t quite superb yet, because I couldn&rsquo;t find quite the right answer anywhere. It was then that I decided to ask someone who would know exactly which tool to reach for.</p>

<p>What happened next was pretty awesome, albeit slightly depressing. I watched my code be refactored from ten lines down to a single line. It blew my mind &ndash; and not just because I didn&rsquo;t know that this method even <em>existed</em>, but because I wanted to know how it worked! So, I did some digging and learned a bit about the method that I wrote which, as it turns out, already existed: the Rails <code>group_by</code> method on Enumerables.</p>

<!--more-->


<h2>Data Is For Manipulating</h2>

<p>I started off writing my super long method because I wanted to structure my data in a very specific way. In fact, we&rsquo;ll probably want to structure the data in our Bookstore eCommerce app in a very similar way, too, so let&rsquo;s use that as our working example.</p>

<p>For our admin panel, we want a list of <code>Author</code> objects, categorized by <code>genre</code>. Because our collection of <code>Books</code> is going to grow extensively, it would be helpful for an admin to know which authors are included in a <code>genre</code> or time period. Eventually, this could be used by admins to add new authors by a genre, to filter or sort by a genre, or to calculate an author count per genre, and figure out which authors to add to our collection of books.</p>

<p>Right now, our collection of <code>Author</code> objects isn&rsquo;t very big, but has just enough information for us to start implementing this functionality:</p>

<pre><code class="ruby">&gt; Author.all
=&gt; [{#&lt;Author:0x192ajk21a6d0b0 last_name: "Shakespeare", genre: "Renaissance"&gt;}, 
{#&lt;Author:0w917qwl38f6s8v6 last_name: "Homer", genre: "Classics"&gt;}, 
{#&lt;Author:0x390akd23a5d9m4 last_name: "Faulkner", genre: "Southern Gothic"&gt;}, 
{#&lt;Author:1r103aur58b7c4r2 last_name: "Marlowe", genre: "Renaissance"&gt;}]
</code></pre>

<p>Even though our data is easy to read now, we can be sure that it isn&rsquo;t going to stay that way. But we know that if we structure each of our objects correctly, we could have something simple, like this, in our view:</p>

<pre><code class="ruby">div
  - Author.sort_by_genre.each do |genre, author|
    h2 = genre
    - author.each do |a|
      p = a.last_name
</code></pre>

<p>I&rsquo;m a big fan of slim, which is what I&rsquo;ve used above, but this view would still be pretty minimal when using another templating language such as erb.</p>

<p>Given that this is the view we want to render, we can use this information to structure our data. I&rsquo;m thinking a hash is the tool for the job, with each key being a <code>genre</code> name, and the value being an array of <code>Author</code> objects that we can iterate through for each specific <code>genre</code>.</p>

<p>It would be nice if we could call something like <code>Author.sort_by_genre</code> and have it return a structure like this:</p>

<pre><code class="ruby">=&gt; {"Renaissance": [Shakespeare, Marlowe], 
"Southern Gothic": [Faulkner], 
"Classics": [Homer]}
</code></pre>

<p>So now that we know what we <em>want</em> our data to look like, let&rsquo;s write it the ugly way, just like I did!</p>

<h2>The First Iteration</h2>

<p>To start with, we know that we want to return a hash. So we can start by instantiating a hash, which will be our <code>authors_by_genre</code>. We also know that we&rsquo;ll need all the <code>Author</code> objects in an array; since we&rsquo;re specifically looking for an author&rsquo;s <code>last_name</code> and <code>genre</code>, we can query for those directly. And we can return our empty hash, since that will eventually be filled up:</p>

<pre><code class="ruby">def sort_by_genre
  authors_by_genre = {}
  authors = Author.all.collect { |author| [author.last_name, author.genre] }

  authors_by_genre
end
</code></pre>

<p>Okay, so now we need to fill up our hash. We have our <code>authors</code> variable, which is set to the collection of all <code>Author</code> objects. We will need to iterate through all of them, and put that <code>Author</code> in the correct array for the right <code>genre</code> key. If the right <code>genre</code> key doesn&rsquo;t exist, we&rsquo;ll need to create a key for that author&rsquo;s <code>genre</code>. We can accomplish this with another iteration. Now our method looks like this:</p>

<pre><code class="ruby">class Author
  class &lt;&lt; self
    def sort_by_genre
      authors_by_genre = {}
      authors = Author.all.collect { |author| [author.last_name, author.genre] }

      authors.each do |genre, author|
        if authors_by_genre[genre]
          authors_by_genre[genre] &lt;&lt; author
        else
          authors_by_genre[genre] = [author]
        end
      end

      authors_by_genre
      end
    end
  end
end
</code></pre>

<p>Okay&hellip;so hopefully, by this point, you should be thinking to yourself: <em>This isn&rsquo;t just ugly, it&rsquo;s also <strong>super</strong> inefficient</em>. And you&rsquo;d be right. It&rsquo;s pretty bad.</p>

<iframe src="//giphy.com/embed/asIa0FVaBSQNO" width="480" height="307" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>If you weren&rsquo;t sure how bad it really is, think about all the queries we&rsquo;re making! And how many times we&rsquo;re iterating! As soon as I finished writing this and got it working, I knew it was <em>definitely</em> not the right approach. But the first step is to get it working. Now, we need to seriously consider how we can make it right and make it fast.</p>

<p>You know what what this means, right? Refactoring time.</p>

<h2>Group All The Things</h2>

<p>A quick way to refactor some of the messiness from our first iteration is by first changing how we initialize our hash object, and also modifying how we go about deciding whether to create a new key or add to a key that already exists.</p>

<p>Enter the <code>each_with_object</code> method! This is a pretty rad method I learned about while refactoring my first iteration of this <code>sort_by_genre</code> method. The <code>each_with_object</code> method requires a single argument: the object that you want to pass to it in each iteration. In our case, we&rsquo;ll pass it a hash. And since the items we want to actually &ldquo;categorize&rdquo; are our <code>Author</code> objects, we&rsquo;ll call <code>each_with_object</code> on our collection of <code>Authors</code>:</p>

<pre><code class="ruby">class Author
  class &lt;&lt; self
    def sort_by_genre
      Author.all.each_with_object({}) {  }
    end
  end
end
</code></pre>

<p>Now, what about that block &ndash; what goes inside? Well, we can think about what we want to do with each of our <code>Author</code> objects that we&rsquo;re iterating over. Inside of our hash, which we&rsquo;re passing explicitly as an argument to <code>each_with_object</code>, we want to either find the correct key and put the correct <code>Author</code> into that array, or create a new key based on the current <code>Author</code> object&rsquo;s genre. We can write that quite nicely by using the <code>||=</code> <strong>or equals</strong> operator, which will assign a new object, or whatever is to the right of the operator, equal to the left side of the pipes, or whatever is to the left of the operator:</p>

<pre><code class="ruby">class Author
  class &lt;&lt; self
    def sort_by_genre
      Author.all.each_with_object({}) { |author, hash| (hash[author.genre] ||= []) &lt;&lt; author }
    end
  end
end
</code></pre>

<p>Much better, right? In this second iteration, we&rsquo;re passing a hash directly to the <code>each_with_object</code> method, and basically telling it, <em>Find the key in the hash I just passed you that is equal to this author&rsquo;s genre. And if no such key exists, make one, set it equal to an empty array, and then put this current author into that array</em>.</p>

<p>The order of our or equals operator is particularly important, because if it were switched, it would never run what is on the right side of the pipes. The <code>||=</code> operator is exactly like the <code>||</code> operator in that it will run what is to its right <em>only</em> if what is to its left evaluates to <code>false</code>. This is what keeps our method from trying to create multiple keys again and again, and instead forces it to find an existing key first. The super cool thing about the <code>||=</code> operator is that it is actually assigning a new key value to an empty array, which cuts out a lot of extra lines we had in our first iteration!</p>

<p>Okay, so this second iteration has been a vast improvement. But I think it&rsquo;s time for some serious refactoring magic. Are you ready? Okay. This <em>entire</em> method can be rewritten into a single, simple line:</p>

<pre><code class="ruby">class Author
  class &lt;&lt; self
    def sort_by_genre
      Author.all.group_by(&amp;:genre)
    end
  end
end
</code></pre>

<p>Yup. I kid you not.</p>

<iframe src="//giphy.com/embed/sHytgXD2vlNVC" width="480" height="376" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>This is the magic of the Rails <code>group_by</code> method, which collects an enumerable into sets, grouping it by the result of a block. This method takes a proc using the ampersand shortcut as an argument (which we started using last week!). The <code>group_by</code> method is passed the symbol <code>:genre</code>, which is an attribute on each <code>Author</code> object, and corresponds to a <code>genre</code> column in the <code>authors</code> table. So, we are effectively grouping all of our <code>Author</code> objects by the result of calling <code>.genre</code> on each object. In other words, we&rsquo;re grouping by the <code>genre</code> attribute since the attribute corresponds to an <code>attr_accessor</code> method in the class.</p>

<p>And now, if we call our <code>sort_by_genre</code> class method, we get the exact data structure we were hoping for:</p>

<pre><code class="ruby">&gt; Author.sort_by_genre
=&gt; {"Renaissance": [{#&lt;Author:0x192ajk21a6d0b0 last_name: "Shakespeare", genre: "Renaissance"&gt;}, 
{#&lt;Author:1r103aur58b7c4r2 last_name: "Marlowe", genre: "Renaissance"&gt;}], 
"Southern Gothic": [{#&lt;Author:0x390akd23a5d9m4 last_name: "Faulkner", genre: "Southern Gothic"&gt;}], 
"Classics": [{#&lt;Author:0w917qwl38f6s8v6 last_name: "Homer", genre: "Classics"&gt;}]}
</code></pre>

<p>Hooray! Or maybe not hooray. Maybe instead of hooray, you feel like I did when I realized that you could refactor all of this into one line:</p>

<blockquote class="twitter-tweet tw-align-center" lang="en"><p lang="en" dir="ltr">PROGRAMMING:&#10;Write a 10-line method.&#10;Feel proud when it works.&#10;Find out you can write the same thing in a single line.&#10;Cry in the corner.</p>&mdash; Vaidehi Joshi (@vaidehijoshi) <a href="https://twitter.com/vaidehijoshi/status/601156228723642369">May 20, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><br></p>

<p>Although it made me feel pretty silly, the actual process of writing the <code>group_by</code> method from scratch was a really great learning experience. I ended up using the examples above in a talk I gave on refactoring at <a href="http://www.twitter.com/reddotrubyconf">Red Dot Ruby Conference</a> in Singapore last week. And I actually recreated the <em>exact same</em> functionality when I had to write my <em>own</em> <code>groupBy</code> function in JavaScript for a React component I had to build! I guess that however deep of a rabbit hole refactoring can be, sometimes it&rsquo;s exactly the right kind of deep dive you need to learn how something works under the hood. I still totally feel like that cat in the bathtub whenever I do it &ndash; but I&rsquo;m kind of okay with that.</p>

<h2>tl;dr?</h2>

<ul>
<li>The <code>group_by</code> method takes a block, which it uses to group a collection of objects. The <code>each_with_object</code> method takes an object as an argument, and a block which tells it how to sort the collection you call the method upon.</li>
<li>Read more on the <code>group_by</code> method in the <a href="http://apidock.com/rails/Enumerable/group_by">Rails docs</a>, which also has a great example!</li>
<li>Looking for another example of how to implement Rails&#8217; <code>group_by</code> in a view? Check out <a href="https://ariejan.net/2007/01/12/rails-group-results-by-week-using-group_by/">this blog post</a>.</li>
<li>Did you know that Ruby also has a similar <code>group_by</code> method? It&rsquo;s great when you want to <a href="http://ruby-doc.org/core-2.2.2/Enumerable.html#method-i-group_by">return a hash</a> where the keys are evaluated by a block!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Smells and Ruby Shorthand: Unpacking Ampersand + To_proc]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/06/02/code-smells-and-ruby-shorthand-unpacking-ampersand-plus-to-proc/"/>
    <updated>2015-06-02T08:45:24-04:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/06/02/code-smells-and-ruby-shorthand-unpacking-ampersand-plus-to-proc</id>
    <content type="html"><![CDATA[<iframe src="//giphy.com/embed/918rCUjV2XWhi" width="480" height="360" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>There aren&rsquo;t too many things that bring me down when I&rsquo;m deep into programming. But there&rsquo;s always one thing that&rsquo;ll stop me dead in my tracks: a code smell. In the context of programming, a code smell is something that tells you that your code is&hellip;well, a bit <em>off</em>.</p>

<p>Whether you&rsquo;ve been programming for months or for decades, you&rsquo;ll run into &ldquo;code that smells&rdquo; again and again. Except the better that you get, you&rsquo;ll anticipate your code smelling, or before you even write it, you&rsquo;ll know that it&rsquo;s going to stink. For me, a lot of my code that tends to smell are sections where I&rsquo;ve duplicated what I&rsquo;ve written, which is to say that I&rsquo;ve written something that&rsquo;s identical or at least very, very similar to another piece of code in my application. I&rsquo;ve noticed that I&rsquo;ve started catching myself as I write duplicated code, which is a sign that I&rsquo;m getting better as a developer &ndash; hooray!</p>

<p>But, there are a lot of <a href="http://en.wikipedia.org/wiki/Code_smell#Common_code_smells">common code smells</a>, and I definitely still can&rsquo;t catch all of them in my own code. Generally, if any part of your program has a common code smell, it&rsquo;s a sign that you need to rethink how your system is structured on a deeper level, and that it&rsquo;s probably time to start refactoring.</p>

<p>Recently, I&rsquo;ve noticed that I&rsquo;ve been sniffing out the same issue in my code: long methods. So I did a bit of investigating and found that there are some cool ways to shorten up your longer methods. Thanks to Ruby magic, we have easy access to methods like <code>to_proc</code> in the form of &ldquo;ampersand and object&rdquo;, or the <strong>&amp;:</strong> syntax. If you have no clue what those are, don&rsquo;t worry. I didn&rsquo;t either! Until I wrote this post, obvs.</p>

<!--more-->


<h2>A Slim Method Is A Beautiful Method</h2>

<p>In our eCommerce bookstore app, we&rsquo;re storing our <code>Order</code> <code>amount</code> totals as BigDecimals. You might remember why BigDecimals <a href="http://vaidehijoshi.github.io/blog/2015/02/10/money-makes-the-world-go-round-using-money-rails-and-bigdecimal/">are better than floats</a> when it comes to performing accurate monetary calculations. But even though we&rsquo;re using BigDecimal on the backend, there may be times when we want to convert our decimals back into floats. Like what if we want to start integrating a JavaScript frontend? (yes, I went there). The point is, we should be able to do something like that pretty easily, especially if we wanted to serialize and return a JSON object that has the correct object type.</p>

<p>We&rsquo;d probably start by iterating through all of our order amounts and turn them into floats, like this:</p>

<pre><code class="ruby">class Order
    class &lt;&lt; self
        def amounts_to_floats
            Order.all.map do |order|
                order.amount.to_f
            end
        end
    end
end
</code></pre>

<p>Well, it does the job. But&hellip;it doesn&rsquo;t look so great, does it? Let&rsquo;s cut it down:</p>

<pre><code class="ruby">class Order
    class &lt;&lt; self
        def amounts_to_floats
            Order.all.map {|order| order.amount.to_f }
        end
    end
end
</code></pre>

<p>Okay, let&rsquo;s make it a little fancier and throw in the <code>pluck</code> method, which will query for only the to grab <em>only</em> an <code>Order</code>&rsquo;s <code>amount</code>?</p>

<pre><code class="ruby">class Order
    class &lt;&lt; self
        def amounts_to_floats
            Order.pluck(:amount).map {|amount| amount.to_f }
        end
    end
end
</code></pre>

<p>I guess it&rsquo;s better, but still not as good as it could be. Are you thinking what I&rsquo;m thinking? There&rsquo;s <em>gotta</em> be a better way!</p>

<p><img src="http://provensal.com/lbb/wp-content/uploads/2013/03/better_way.jpg" style="display: block; margin-left: auto; margin-right: auto;"></p>

<h2>A Proc And An Object Walk Into A Bar&hellip;</h2>

<p>As is the case with most things in programming, if we wish for a better way to do something, we can generally assume that there is! And in our case, the better way to do it is by using something called <strong>ampersand and object</strong>.</p>

<p>And we can implement it on our <code>amounts_to_floats</code> method like so:</p>

<pre><code class="ruby">class Order
    class &lt;&lt; self
        def amounts_to_floats
            Order.pluck(:amount).map(&amp;:to_f)
        end
    end
end
</code></pre>

<p>The result of this will be the exact same thing as the <code>map</code> we wrote above:</p>

<pre><code class="ruby">&gt; Order.amounts_to_floats
=&gt; [210.99, 150.5, 24.99, 391.99, 120.25]
</code></pre>

<p>So, what happened here? Well, let&rsquo;s just start with what we know for sure.</p>

<ol>
<li><p>We took all the <code>Order</code> objects and queried for just their <code>amounts</code>, which are in <code>BigDecimal</code> format.</p></li>
<li><p>The <code>pluck</code> method returns an array of the attributes that you query for, so, which would mean that our array would look something like this:
<code>[#&lt;BigDecimal:7f87ed12b2f0,'0.21099E3',18(18)&gt;, #&lt;BigDecimal:7f87ed121700,'0.1505E3',18(18)&gt;, #&lt;BigDecimal:7f87ed119348,'0.2499E2',18(18)&gt;...]</code></p></li>
<li><p>Okay, so then we mapped over all of these amounts, right? And somehow we called <code>.to_f</code> on all of them. Which returned the array that we were hoping for:
<code>[210.99, 150.5, 24.99, 391.99, 120.25]</code></p></li>
</ol>


<p>All of this begs one question: how on earth did the <code>&amp;</code> (ampersand) know to call <code>to_f</code> on each of our objects? And how did <code>map</code> know what to do with the ampersand that we passed it?</p>

<p>Time to find out.</p>

<h2>Procs on Procs</h2>

<iframe src="//giphy.com/embed/umwRSMxcXW31m" width="480" height="244" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Whenever something seems super daunting, I go back to the basics. Which is exactly what I think we should do here, too. We can all agree that in Ruby is an object, right? And methods are how we send messages to objects. With that in mind, let&rsquo;s look back at that confusing line of code:</p>

<pre><code class="ruby">Order.pluck(:amount).map(&amp;:to_f)
</code></pre>

<p>We know <code>Order.pluck(:amount)</code> to be an array &ndash; it&rsquo;s an object, which means it&rsquo;s the <em>receiver</em> of our method. That means that <code>.map</code> is our method. And <code>map</code> has been passed <code>&amp;:to_f</code>, which seems to have replaced the usual <code>do end</code> or <code>{}</code> blocks that generally accompany the <code>map</code> iterator.</p>

<p>At this point, if you&rsquo;re thinking that the <code>&amp;</code> ampersand is responsible for executing that <code>to_f</code> method on each of the elements of the array, you&rsquo;re definitely onto something.</p>

<p>In fact, the <code>&amp;</code> calls <em>another</em> method on the object: <code>to_proc</code>. The ampersand calls <code>to_proc</code> on whatever comes after it. In our case, it&rsquo;s the <code>to_f</code>. But it&rsquo;s not just the plain old method <code>to_f</code> &ndash; it&rsquo;s actually the <em>symbol</em>, <code>:to_f</code>.</p>

<p>And we can double check this by looking at <a href="http://ruby-doc.org/core-1.9.3/Symbol.html#method-i-to_proc">the Ruby docs</a>! The <code>to_proc</code> method is defined on the <code>Symbol</code> class:</p>

<blockquote><p><code>to_proc</code> Returns a Proc object which responds to the given method by sym.</p></blockquote>

<p>So all the <code>&amp;</code> is doing is: <code>:to_f.to_proc</code>. It turns the symbol into a proc, and whatever object you pass to it, it&rsquo;ll call that method on that object. You&rsquo;re basically telling the <code>map</code> function, <em>Hey, I already have this method I want to call on every single item you&rsquo;re iterating over. So when you invoke yourself on the receiving object, run this code that I&rsquo;m passing you.</em></p>

<p>Because <code>:to_f</code> isn&rsquo;t actually a block, the ampersand tries to make it a block by calling <code>to_proc</code> on it. This means that you can pass any method to <code>&amp;</code> in symbol form, and it will convert it to and invoke that proc.</p>

<p>But what if you didn&rsquo;t want to pass it a defined method in Ruby as a symbol? What if, instead, you wanted to write your own block and pass it to <code>&amp;</code> explicitly? That would look something like this:</p>

<pre><code class="ruby">half_off_sale = Proc.new { |amount| amount/2 }

Order.pluck(:amount).map &amp;half_off_sale
=&gt; [#&lt;BigDecimal:7f87ec20e4c0,'0.105495E3',18(45)&gt;, #&lt;BigDecimal:7f87ec20e3d0,'0.7525E2',18(45)&gt;, #&lt;BigDecimal:7f87ec20e2e0,'0.12495E2',18(45)&gt;...]
</code></pre>

<p>Pretty cool, right? In this case, we created a <code>half_off_sale</code> proc, that we passed directly to the ampersand. The <code>&amp;</code> didn&rsquo;t have to make it a proc (meaning that it didn&rsquo;t have to invoke <code>to_proc</code>) since we already passed it one. So when <code>map</code> iterated through all the amounts, it yielded to our <code>half_off_sale</code> proc, and ran that code on every single element in our array of amounts.</p>

<p>As you can see, the ampersand and object and <code>to_proc</code> methods can be pretty powerful &ndash; particularly when they&rsquo;re combined into this handy little shortcut! That doesn&rsquo;t mean you have to use them all the time, but if you understand the fundamentals of how they work, they can really help clean up your code, especially when it&rsquo;s pretty smelly.</p>

<p>This is just a primary introduction to the concepts of ampersand and object and <code>to_proc</code>. There&rsquo;s definitely a lot more to them, and they can get quite complicated. I&rsquo;m still learning about them myself! But, I&rsquo;m going to keep reading about how procs work and, hopefully, there&rsquo;ll be a forthcoming Technical Tuesdays post about how to pass methods to procs! Until then, keep sniffin&#8217; out those code smells, my friends!</p>

<iframe src="//giphy.com/embed/LeaMGoMmMGrf2" width="480" height="360" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>The <code>&amp;</code> (ampersand) can be used with an iterator like <code>map</code>, and will call <code>to_proc</code> on whatever symbol you pass it, unless you pass it a block explicitly.</li>
<li>More examples and explanations on <a href="http://stackoverflow.com/questions/9429819/what-is-the-functionality-of-operator-in-ruby">these</a> <a href="http://stackoverflow.com/questions/2259775/what-do-you-call-the-operator-in-ruby">two</a> StackOverflow posts.</li>
<li>Here&rsquo;s a <a href="http://www.dan-manges.com/blog/29">great blog post</a> on all the ways you can use <code>&amp;</code> to manipulate ActiveRecord models.</li>
<li>If you&rsquo;re still curious about different ways to pass around procs, check out <a href="http://ablogaboutcode.com/2012/01/04/the-ampersand-operator-in-ruby/">this post</a>, which is what I used when I was learning about them!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Secret Life of Your Database, Part 2: Join Tables]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/05/26/the-secret-life-of-your-database-part-2-join-tables/"/>
    <updated>2015-05-26T08:02:30-04:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/05/26/the-secret-life-of-your-database-part-2-join-tables</id>
    <content type="html"><![CDATA[<p><img src="http://daviddickball.uk/wp-content/uploads/2015/03/sql-join.gif" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>When it comes to databases, there are generally two schools of thought. There are those people who love them, and there are those people who just hate them. While I wholeheartedly admit that I belong to the former camp of believers, I can understand why someone would subscribe to the latter group. Databases are hard! They&rsquo;re beautiful and super fun once you understand how to manipulate them, but until you get to that point, they&rsquo;re pretty much just hard.</p>

<p>I think that a large part of what makes databases hard to understand is the sheer amount of things you can do with the data it contains. Between database migrations, which we unpacked <a href="http://vaidehijoshi.github.io/blog/2015/05/19/the-secret-life-of-your-database-part-1-migrations/">last week</a>, and writing SQL queries that actually do what you want them to do, it&rsquo;s really easy to just throw your hands up in the air and give up completely. But, you shouldn&rsquo;t! And I hope that, after reading this post, you won&rsquo;t! Because <em>databases are beautiful</em> (that should be on a t-shirt somewhere), and you just have to get to know them a little bit.</p>

<p>So, what should we get to know about them? Well, the scariest part, of course: <strong>join tables</strong>. Join tables are used to combine two sets of data from two different tables. Depending on what you query the database for, different values can be returned. No matter the size of your application, you&rsquo;re probably going to have at least a few tables, and usually many more. Most of the time, the data in a single table by itself isn&rsquo;t super useful; when it&rsquo;s combined with another database&rsquo;s information, however, then things really get cooking. Join tables are how we get specific information from two different datasets (or two different database tables). There are seven different types of join tables, but there are three in particular that I&rsquo;ve encountered time and again. Let&rsquo;s explore the differences between inner joins, left outer joins, and right outer joins.</p>

<!--more-->


<h2>Know Thy Data</h2>

<p>Before we get too deep into join syntax, let&rsquo;s take a look at our data! We&rsquo;ll stick with the schema from our eCommerce bookstore application. Since we don&rsquo;t have any real users yet, we can just populate our database with some fake, super fun seed data.</p>

<p><em>Disclaimer</em>: I may or may not have gotten carried away when making the seed data. Anyways, here&rsquo;s what our databases look like:
<img src="http://i.imgur.com/voemAen.png" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>We&rsquo;ll be working with the same two tables: a <code>Users</code> table, and an <code>Orders</code> table. Each <code>User</code> instance has a <code>first_name</code> and a <code>last_name</code> (and realistically speaking, probably a bunch of other attributes&hellip;but let&rsquo;s keep it simple for now).</p>

<p>Each <code>Order</code> object <code>belongs_to</code> a <code>User</code>, which means it has a <code>user_id</code> column to store the foreign key from the <code>Users</code> table. Each <code>Order</code> also has a unique, randomly-generated <code>number</code> (think order confirmation number), and an order <code>total</code>, which is stored as a <a href="http://vaidehijoshi.github.io/blog/2015/02/10/money-makes-the-world-go-round-using-money-rails-and-bigdecimal/">Ruby BigDecimal object</a>.</p>

<h2>Inner Joins</h2>

<p>The most common and easiest join table syntax to understand is the <em>inner join</em>. Inner joins are our tool of choice if we&rsquo;re looking for a specific set of data that only matches the parameters we identify in our query.</p>

<p>For example, say we&rsquo;re looking for a subset of data that shows <em>only</em> <code>users</code> with <code>orders</code>. We&rsquo;re not interested in any <code>Users</code> that haven&rsquo;t placed an order; we only want the data of a <code>User</code> that actually <em>has</em> placed an order. This is a set of data that might be useful for something like an admin panel that we might want to build out in our next feature, so let&rsquo;s return just some basic information right now, like the <code>User</code>&rsquo;s <code>last_name</code> and their <code>user_id</code>.</p>

<p>So, what would that look like in a SQL query? Well, we know that we want to select only the <code>last_name</code> and the <code>id</code> of the <code>User</code> instance. But, we don&rsquo;t want ALL <code>Users</code> by their <code>ids</code>; we actually want only the <code>Users</code> that are associated with an <code>user_id</code> on an <code>Order</code>. So, that&rsquo;s what we&rsquo;ll select:</p>

<pre><code class="sql">SELECT users.last_name, orders.user_id
FROM users
</code></pre>

<p>Cool, we&rsquo;re halfway there. Now for the join. Let&rsquo;s think for a second&hellip;we want to <em>join</em> the data in our <code>Users</code> table with the data in our <code>Orders</code> table. And, we want to match the rows by <code>ids</code>. What does that mean, exactly? Well, it means that we only want to return an <code>User</code> row where that <code>User's</code> <code>id</code> exists in a row of the <code>Order</code> database, where it&rsquo;ll be under the <code>user_id</code> foreign key column. We&rsquo;ll also order our data by the <code>Order's</code> <code>id</code> for now, but we&rsquo;ll change that as we play around a bit more. So let&rsquo;s add all that to our query:</p>

<pre><code class="sql">SELECT users.last_name, orders.user_id
FROM users
INNER JOIN orders
ON users.id=orders.user_id
ORDER BY orders.id;
</code></pre>

<p>And if we run this query, what&rsquo;ll happen? We&rsquo;ll get this fabulousness:
<br><br>
<img src="http://i.imgur.com/sWlj3zx.png" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>Nice! So, we get five records returned to us, and it returns exactly what we asked for: the <code>User's</code> <code>last_name</code> and the <code>Order's</code> <code>user_id</code>. But there are some <code>User</code> instances that are there twice, and one of the <code>Users</code> (which is apparently T.S. Eliot) doesn&rsquo;t even show up in our records!</p>

<p>If we take a closer look at our <code>Orders</code> database table, that&rsquo;s exactly what we should <em>expect</em> to happen. The <code>User</code> with an <code>id</code> of <code>1</code> placed two <code>Orders</code>, so there are two records with his <code>last_name</code> and <code>id</code> that are returned to us. And Eliot, who hasn&rsquo;t placed any <code>Orders</code> yet, isn&rsquo;t returned to us at all! That makes sense though, since we&rsquo;re asking for a subset of information &ndash; only the rows that fit the requirements of our query &ndash; or, the inner information of our database, and nothing superfluous, meaning that all the outer, extra information is ignored.</p>

<h2>Left Outer Joins</h2>

<p>Now that we&rsquo;ve covered the relatively easier inner join, it&rsquo;s time to get to the slightly trickier stuff: outer joins! Outer joins come in two shapes and sizes: <strong>left outer joins</strong> and <strong>right outer joins</strong>. The concept behind the two is fundamentally the same, but they kind of work like opposites. Let&rsquo;s look at a left
outer join to start.</p>

<p>Let&rsquo;s say that our admins actually want to see all the <code>Users</code> at once in the admin panel, regardless of whether they&rsquo;ve placed an order or not. This means that we want to widen our data query to ALL <code>Users</code>, and all the <code>Orders</code> associated with any of those <code>Users</code>. We&rsquo;ll begin our SQl query the same way as before, selecting the <code>User's</code> <code>last_name</code>.</p>

<p>But our admin&rsquo;s also want to see the <code>Order</code> <code>totals</code> for each <code>User</code> &ndash; if the <code>User</code> has placed an order, obviously. So, we&rsquo;ll add that to our select statement as well.</p>

<pre><code class="sql">SELECT users.last_name, orders.total
FROM users
</code></pre>

<p>Now, we want to join our <code>Users</code> table with our <code>Orders</code> table again. Except this time, we don&rsquo;t want to do an inner join. Instead, we want all the data from our <code>Users</code> table, and any data that might correspond to all of our <code>Users</code> from the <code>Orders</code> database. We&rsquo;ll still do something similar to before and join our tables on the <code>id</code> columns, but we&rsquo;ll order by each <code>User's</code> <code>id</code>:</p>

<pre><code class="sql">SELECT users.last_name, orders.total
FROM users
LEFT OUTER JOIN orders
ON users.id=orders.user_id
ORDER BY users.id;
</code></pre>

<p>If we look at our data, we&rsquo;ll remember that the <code>User</code> with an <code>id</code> of <code>4</code> never placed any orders! How might this affect what data is returned to us? Let&rsquo;s run our query and find out:</p>

<p><br><br>
<img src="http://i.imgur.com/STqLeW3.png" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>Whoa! Since our <code>User</code> T.S. Eliot never placed an order, he didn&rsquo;t have any row in the <code>Orders</code> database that corresponded to him. Because there was no <code>Order</code> <code>total</code> column that was attributed to his <code>id</code>, what got returned instead? <code>NULL</code>!</p>

<p>And that&rsquo;s exactly what outer joins will do if they don&rsquo;t find anything! If there is no match on the right table that is being &ldquo;joined&rdquo; (in our case, the <code>Orders</code> database), the default return value will always be <code>NULL</code>. Now that we know that&hellip;how do you think that a right outer join might work?</p>

<h2>Right Outer Joins</h2>

<p>A <strong>right outer join</strong> is almost the same as a left outer join. The difference is that the table that you&rsquo;re joining is on the <em>right</em>. What does that mean for your return set of data?</p>

<p>Well, it means that all the data on the <em>right</em> table will be returned &ndash; even if it doesn&rsquo;t have a corresponding value. Our query might look something like this:</p>

<pre><code class="sql">SELECT orders.number, orders.total
FROM users
RIGHT OUTER JOIN orders
ON users.id=orders.user_id
ORDER BY orders.id;
</code></pre>

<p>Here, we are ordering by the <code>Order's</code> <code>id</code>, and we&rsquo;re only looking at the <code>Order</code> <code>number</code> and <code>total</code>. When we run our query, this is what we&rsquo;ll get:</p>

<p><br><br>
<img src="http://i.imgur.com/LJoNd8I.png" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>In our case, our data doesn&rsquo;t look super different with a right outer join. In fact, it looks a lot like the inner join we started with! So why do right inner joins matter, then?</p>

<p>Well, what if our admins change their minds (again!) and instead want ONLY orders to be returned. And what if you have an order that doesn&rsquo;t have a <code>User</code>, because that user deleted their account? Well, in that case, our <code>Order</code> would still show up in the returned data, and if we selected the corresponding <code>User</code> <code>ids</code>, then the deleted <code>User</code> would have a <code>NULL</code> <code>id</code> value! Pretty cool, right?</p>

<p>See, databases can be pretty awesome once you understand a little bit about how they work! In fact, I love them so much that I give &lsquo;em two thumbs way, way up!</p>

<iframe src="//giphy.com/embed/5fBH6zoy1szfjORd14s" width="480" height="270" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>Join tables allow us to combine two different sets of data. You can make your data subset be as specific or broad as you want, depending on what you query for!</li>
<li>An inner join will only return values that exist in both tables.</li>
<li>A left outer join will return all the values from the left database, and any values that correspond from the right database. A right outer join will return all the values from the right database, and any values that correspond form the left. Any values that don&rsquo;t have a corresponding row will be returned as <code>NULL</code>.</li>
<li>Still curious about inner vs outer joins? Check out <a href="http://www.programmerinterview.com/index.php/database-sql/inner-vs-outer-joins/">this blog post</a>.</li>
<li>Want to know about ALL the different join tables out there? Here&rsquo;s a dope <a href="https://raw.githubusercontent.com/equivalent/scrapbook2/master/assets/images/2014/sql-joins.png">graphic</a> that explains it well.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Secret Life of Your Database, Part 1: Migrations]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/05/19/the-secret-life-of-your-database-part-1-migrations/"/>
    <updated>2015-05-19T08:51:11-04:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/05/19/the-secret-life-of-your-database-part-1-migrations</id>
    <content type="html"><![CDATA[<p><img src="http://31.media.tumblr.com/tumblr_mcsccsfcnn1qz9l5so1_1280.gif" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>As young developers, we often get caught up in what we don&rsquo;t know. One of the first and hardest lessons to learn when you&rsquo;re starting out as a programmer is the sheer volume of things that you don&rsquo;t know. You have to get comfortable not knowing them, and you have to work towards learning as much about them as you can.</p>

<p>However, sometimes we focus so much on learning new things, that we forget to come back to what we already know &ndash; or at least, what we <em>think</em> we already know. In fact, this is exactly what I&rsquo;ve been guilty of for the past few weeks. I&rsquo;ve been focusing so much on learning new frameworks and getting comfortable with other languages, that I forgot to question my knowledge of Rails. Since it was a known domain and language, I assumed that I didn&rsquo;t need to revisit it that often.</p>

<p>But boy, was I wrong. Just because you&rsquo;re familiar with something doesn&rsquo;t mean that you understand it completely. The trick to dealing with this is to make yourself feel uncomfortable in your otherwise familiar language. And that&rsquo;s exactly what happened to me. Last week, while writing some lines of SQL (yes, really), I ran across a database migration that used an <code>up</code> and a <code>down</code> method. I saw those lines of code and realized something: I had no idea how my database really works. In fact, I&rsquo;ve written so many migrations in so many Rails applications that, at some point, I&rsquo;ve stopped thinking about what was actually going on under the hood. So, I set out to make myself uncomfortable and uncover the secret life of my database.</p>

<!--more-->


<h2>Teach Me How To Migrate</h2>

<p>Most of us were introduced to Rails databases through migrations. Migrations are how we alter our database schema over time. They implement a Ruby DSL (domain-specific language), and run SQL queries in our database for us. And, they are super easy to learn to use and understand:</p>

<pre><code class="ruby">rails generate migration CreateBooks
</code></pre>

<p>Running a command like the one above prompts Active Record to create a unique, timestamped file within our <code>/db</code> directory, with a migration class that might look something like this:</p>

<pre><code class="ruby">class CreateBooks &lt; ActiveRecord::Migration
  def change
    create_table :books do |t|
      t.string :title
      t.integer :year

      t.timestamps null: false
    end
  end
end
</code></pre>

<p>Nothing <em>too</em> surprising here; we&rsquo;ve seen this kind of <code>change</code> method before. But what you may <em>not</em> have seen &ndash; or at least, understood &ndash; is something that looks like this:</p>

<pre><code class="ruby">class CreateBooks &lt; ActiveRecord::Migration
  def up
    create_table :books do |t|
      t.string :title
      t.integer :year
    end
  end

  def down
    drop_table :books
  end
end
</code></pre>

<p>So, what does that <code>up</code> and <code>down</code> <em>actually</em> mean? What is going up, exactly&hellip;and what&rsquo;s going down? And how is this different from using the <code>change</code> method, which probably seems way simpler right about now? Well, it&rsquo;s time for us to find out.</p>

<h2>All The Migrations Fit To Run</h2>

<p>The first step to understanding how something works is by unpacking it, step by step. And that&rsquo;s what we&rsquo;ll do with our migrations. Let&rsquo;s first look at how many migrations we currently have.</p>

<p>We&rsquo;ve already generated a few migrations using the <code>rails generate migration</code> commands for our in-progress bookstore application. We can take a look at what all those migrations look like by running the <code>rake db:migrate:status</code> command, which will show us the status of our migrations, including any pending ones we may have:</p>

<pre><code class="ruby">❤ rake db:migrate:status

database: bookstore_development

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20140217160517  Create users
   up     20150424175043  Create books
   up     20150429145355  Add media columns to books
   up     20150430140850  Add author to books
   up     20150430160704  Add genre to books
   up     20150430192426  Create reading lists
   down   20150430191950  Add user id to reading lists
</code></pre>

<p>Whoa &ndash; look at all those migrations! And more importantly, look at the column to the left of the migrations: seem familiar? Each one of our migrations has a <code>status</code>, which is either <code>up</code> or <code>down</code>. Let&rsquo;s remember this, we&rsquo;re going to come back to it in a second.</p>

<p>According to the Rails <a href="https://github.com/rails/rails/blob/f47b4236e089b07cb683ee9b7ff8b06111a0ec10/activerecord/lib/active_record/railties/databases.rake#L91">source code</a>, the <code>rake:db:migrate:status</code> rake task displays the status of all our migrations. This can be helpful in determining if we have any migrations we need to run. And it looks like we do! Let&rsquo;s run <code>rake db:migrate</code> and then check the status of our migrations again with <code>rake db:migrate:status</code>:</p>

<pre><code class="ruby">❤ rake db:migrate:status

database: bookstore_development

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20140217160517  Create users
   up     20150424175043  Create books
   up     20150429145355  Add media columns to books
   up     20150430140850  Add author to books
   up     20150430160704  Add genre to books
   up     20150430192426  Create reading lists
   up     20150430191950  Add user id to reading lists
</code></pre>

<p>Hm, interesting. That last migration, which adds a <code>user_id</code> column to our <code>reading_lists</code> table, now has a status of <code>up</code>. We&rsquo;ve basically migrated our database up, meaning that we have no pending migrations and all of our migrations are up to date.</p>

<p>But what if we wanted to rollback our migration, instead? Or, better yet, what if we wanted to rollback the last two migrations? Could we go back in time? Back to when we didn&rsquo;t even have a <code>reading_lists</code> table in our database? How would we do that?</p>

<p>Well, we could run a command like <code>rake db:rollback STEP=</code>, which rolls back our database however many steps we specify. For this example, we&rsquo;ll just rollback to two migrations ago (<code>rake db:rollback STEP=2</code>). What is the state of our database now? Let&rsquo;s check the <code>migrate:status</code> again:</p>

<pre><code class="ruby">❤ rake db:migrate:status

database: bookstore_development

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20140217160517  Create users
   up     20150424175043  Create books
   up     20150429145355  Add media columns to books
   up     20150430140850  Add author to books
   up     20150430160704  Add genre to books
   down   20150430192426  Create reading lists
   down   20150430191950  Add user id to reading lists
</code></pre>

<p>Nice! We&rsquo;ve migrated our database down, back to two migrations ago. There&rsquo;s some serious <em>Back To The Future</em> stuff going down right now.</p>

<iframe src="//giphy.com/embed/uYfz9FKd0EGpG" width="480" height="255" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<h2>What Your Database Won&rsquo;t Tell You (Unless You Ask)</h2>

<p>Okay, so we can migrate up and down a database. Cool. We can go back and forth in time, to older versions of our database and to newer &ndash; and even the newest! &ndash; version of our database. Double cool. But what about what we <em>originally</em> set out to figure out? What do the <code>up</code> and <code>down</code> methods do in our migrations? And why do we only see them <em>some</em> of the time?</p>

<p>If you had an inkling that the <code>up</code> and <code>down</code> methods were somehow interlinked with the migration <code>status</code> column we saw when we ran <code>rake db:migrate:status</code>&hellip;well, your inkling was right on the money. They <em>are</em> connected, and in a really cool way.</p>

<p>The <code>up</code> and <code>down</code> methods are defined on a <code>Migration</code> class, which inherits from the <code>ActiveRecord::Migration</code> class. Active Record literally puts the M (model) in MVC, since it&rsquo;s what handles all of our database records. And Active Record is pretty darn smart. Depending on which rake task we provide it, Active Record will execute either an <code>up</code> method in a migration file, or a <code>down</code> method.</p>

<p>The Rails Guides <a href="http://edgeguides.rubyonrails.org/active_record_migrations.html">explain this</a> pretty well:</p>

<blockquote><p>&ldquo;The up method should describe the transformation you&rsquo;d like to make to your schema, and the down method of your migration should revert the transformations done by the up method. In other words, the database schema should be unchanged if you do an up followed by a down. For example, if you create a table in the up method, you should drop it in the down method. It is wise to perform the transformations in precisely the reverse order they were made in the up method.&rdquo;&#8221;</p></blockquote>

<p>As you might have guessed, these two methods are inverse of each other in both form and function. The <code>up</code> method is called when migrating &ldquo;up&rdquo; the database &ndash; <em>forward</em> in time &ndash; while the <code>down</code> method is called when migrating &ldquo;down&rdquo; the database &ndash; or, <em>back</em> in time. In other words, <strong>the <code>up</code> method is a set of directions for running a migration, while the <code>down</code> method is a set of instructions for reverting a migration</strong>. This implies that the code in these two methods should fundamentally do the opposite things of one another.</p>

<p>This also means is that only <em>one</em> of these methods can ever actually run during a migration. If we run <code>rake db:migrate</code>, all of the <code>up</code> methods will execute, and every migration that is currently set to <code>down</code> will change to a status of <code>up</code>:</p>

<pre><code class="ruby">❤ rake db:migrate:status

database: bookstore_development

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20140217160517  Create users
   up     20150424175043  Create books
   down   20150429145355  Add media columns to books
   down   20150430140850  Add author to books
   down   20150430160704  Add genre to books
   down   20150430192426  Create reading lists
   down   20150430191950  Add user id to reading lists

❤ rake db:migrate
❤ rake db:migrate:status

database: bookstore_development

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20140217160517  Create users
   up     20150424175043  Create books
   up     20150429145355  Add media columns to books
   up     20150430140850  Add author to books
   up     20150430160704  Add genre to books
   up     20150430192426  Create reading lists
   up     20150430191950  Add user id to reading lists
</code></pre>

<p>And if we run <code>rake db:rollback</code>, the most <em>recent</em> migration that was run (and had its status set to <code>up</code>) will be reverted by calling the <code>down</code> method in the migration file. If we run <code>rake db:rollback STEP=</code>, the <code>down</code> method will be invoked in every migration file we specify we want to rollback (or how many steps back we want to go in the database&rsquo;s history):</p>

<pre><code class="ruby">❤ rake db:migrate:status

database: bookstore_development

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20140217160517  Create users
   up     20150424175043  Create books
   up     20150429145355  Add media columns to books
   up     20150430140850  Add author to books
   up     20150430160704  Add genre to books
   up     20150430192426  Create reading lists
   up     20150430191950  Add user id to reading lists

❤ rake db:rollback STEP=3
❤ rake db:migrate:status

database: bookstore_development

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20140217160517  Create users
   up     20150424175043  Create books
   up     20150429145355  Add media columns to books
   up     20150430140850  Add author to books
   down   20150430160704  Add genre to books
   down   20150430192426  Create reading lists
   down   20150430191950  Add user id to reading lists
</code></pre>

<p>And, we could <em>even</em> run or revert a specific migration by giving ActiveRecord the version number/migration id of the migration:</p>

<pre><code class="ruby">❤ rake db:migrate:down VERSION=20150429145355
❤ rake db:migrate:status

database: bookstore_development

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20140217160517  Create users
   up     20150424175043  Create books
   down   20150429145355  Add media columns to books
   up     20150430140850  Add author to books
   up     20150430160704  Add genre to books
   up     20150430192426  Create reading lists
   up     20150430191950  Add user id to reading lists
</code></pre>

<p>In the example above, when we ran a <code>migrate:down</code> task, all that was happening is that only the <code>down</code> method written in the &ldquo;AddMediaColumnsToBooks&rdquo; migration file was was invoked!</p>

<iframe src="//giphy.com/embed/i2gzQAinKY3hS" width="480" height="264" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>Neat, right!? Or maybe just kind of mind-blowing if you&rsquo;ve never seen this before. Who knew that this is what migrations were really all about? Well, now you and I both know, so that&rsquo;s pretty rad.</p>

<h2>Why Change When You Can Go Up And Down?</h2>

<p>The <code>change</code> method is pretty standard when it comes to migrations partly because it&rsquo;s a newer addition to Rails. Just like <code>up</code> and <code>down</code>, the <code>change</code> method is defined on the <code>ActiveRecord::Migration</code> class. In fact, it does exactly what <code>up</code> and <code>down</code> accomplish together. The <code>change</code> method is <em>usually</em> able to automatically figure out the inverse operation you provide it; for example, if you call <code>create_table</code> inside of the <code>change</code> method, when you run <code>rake db:rollback</code>, it will <code>drop_table</code>. The same goes for <code>add_column</code> and <code>remove_column</code>.</p>

<p>So, if the <code>change</code> method can do all of these things in one go (rather than in two methods), why do we sometimes see an <code>up</code> and <code>down</code> method defined together in a migration file?</p>

<p>Well, there are many times when we might want Active Record to be smart and figure out when to drop a column or table. But other times, it might not be as clear.</p>

<p>For example, what if we wanted a migration that just created or fixed data? We wouldn&rsquo;t want ActiveRecord to try to figure out whether to add or remove a column&hellip;or worse, drop our table! Or what if we wanted to remove columns when we migrated up, and <em>add</em> columns when we migrated down? We&rsquo;d have to specify that explicitly in our <code>up</code> and <code>down</code> methods.</p>

<p>We could even get fancy with some SQL and do something a bit more granular like rename a table:</p>

<pre><code class="ruby">class RenameReadingListsToWishLists &lt; ActiveRecord::Migration
  def up
    execute &lt;&lt;-SQL
      ALTER TABLE reading_lists
        RENAME TO wish_lists;
    SQL
  end

  def down
    execute &lt;&lt;-SQL
      ALTER TABLE wish_lists
        RENAME TO reading_lists;
    SQL
  end
end
</code></pre>

<p>In this example, we&rsquo;re using the <code>execute</code> method, which takes either a string value of a SQL query, or a heredoc like the one we&rsquo;ve written above.</p>

<p>And we might even want to make it completely impossible for someone to ever revert a migration. We could specify that kind of behavior in our <code>down</code> method by raising an ActiveRecord error:</p>

<pre><code class="ruby">def down
  raise ActiveRecord::IrreversibleMigration
end
</code></pre>

<p>Depending on which migration file this <code>down</code> method lived in, that migration could never be &ldquo;migrated down&rdquo;. This can sometimes be dangerous, but also useful &ndash; particularly if we had many other data models that were depending on those tables existing in the first place!</p>

<p>It turns out that our database is a pretty powerful thing. Rails provides us with a lot of functionality and flexibility of moulding it to be exactly the way that we want it to be. It&rsquo;s just up to us to take advantage of it in the right situations! The more we learn about shaping our database, the better equipped we&rsquo;ll be to creating effective, concise, and streamlined databases for each and every one of our applications.</p>

<p>But the truth is, we&rsquo;ve only scratched the surface of databases today. Tune in again next week, when I&rsquo;ll uncover the secret life of all your&hellip;JOIN TABLES! Try and contain your enthusiasm, my friends.</p>

<iframe src="//giphy.com/embed/2yAjmbCfYcQUw" width="480" height="293" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>The <code>up</code> and <code>down</code> methods are a more granular way of defining the <code>change</code> method in a Rails migration. The <code>up</code> method is a set of instructions of what to do when you migrate, and the <code>down</code> method is a set of directions of what to do when you rollback.</li>
<li>Want to see more examples of when you might want to use the <code>up</code> and <code>down</code> methods in place of the <code>change</code> method? Check out the Rails Guides on <a href="http://api.rubyonrails.org/classes/ActiveRecord/Migration.html">Active Record Migrations</a>.</li>
<li>Need to read more on running migrations? <a href="http://guides.rubyonrails.org/v2.3.11/migrations.html#running-migrations">Read this</a>. Gotta brush up on migrations after reading this post? Head over <a href="http://edgeguides.rubyonrails.org/active_record_migrations.html">here</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Investigating Ruby's Global Functions + Kernel Module With Puts]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/05/12/investigating-rubys-global-functions-plus-kernel-module-with-puts/"/>
    <updated>2015-05-12T08:09:27-04:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/05/12/investigating-rubys-global-functions-plus-kernel-module-with-puts</id>
    <content type="html"><![CDATA[<iframe src="//giphy.com/embed/10Vy7fN9fr7dD2" width="480" height="361" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>When you&rsquo;re a relatively new developer, it&rsquo;s easy to get caught up in all of the things that you don&rsquo;t know. And boy is <em>that</em> a long, long list of things. But there&rsquo;s also another list that we should probably consider and revisit from time to time: the list of all the things we thought we knew, but didn&rsquo;t <em>really</em> understand when we learned them.</p>

<p>Last week, while developing some curriculum for an Intro to Programming course, my co-teacher and I had one of those moments. We were trying to draw a diagram to explain the concept of an object &ldquo;receiving&rdquo; a method. As I looked back through our code snippets, I noticed that we were using very basic methods like <code>puts</code> and <code>gets</code> quite often, as most Ruby tutorials usually do. And then I realized something: I had no clue what the receiver of the <code>puts</code> method was.</p>

<p>We both just sat there, partly perplexed and partly dumbfounded. How could we not know how <code>puts</code> and <code>gets</code> really worked? We used them all the time when we were learning to code, so perhaps we didn&rsquo;t really think past the flexibility of these methods. But now that we are both more seasoned programmers, it seemed strange that we had never really thought about this before.</p>

<p>So, I did exactly what any good developer would do: I asked Twitter. Well, okay, I asked Twitter&hellip;and then I put on my detective hat and did some investigating of my own.</p>

<!--more-->


<h2>Puts, I love you, but you&rsquo;re bringing me down</h2>

<blockquote class="twitter-tweet tw-align-center" lang="en"><p lang="en" dir="ltr">RUBYISTS, please help: what is the receiver of the puts and gets methods? Is it the main Object? I need to know, it&#39;s driving me crazy</p>&mdash; Vaidehi Joshi (@vaidehijoshi) <a href="https://twitter.com/vaidehijoshi/status/596465002669875201">May 8, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I have a bone to pick with the <code>puts</code> method. Well, okay, two bones I guess. First, it has no explicit receiver:</p>

<pre><code>♥ irb
2.2.0 :001 &gt; puts "wat"
wat
 =&gt; nil 
</code></pre>

<p>And second, it&rsquo;s just REALLY hard to figure out what on earth is happening with this method. In fact, the hardest part about understanding <code>puts</code> was figuring out exactly <em>where</em> inside of Ruby it lived.</p>

<p>Apparently though, there&rsquo;s a method for that &ndash; well, two methods, actually. The <code>owner</code> and the <code>receiver</code> methods can be used to ask a method where it lives and who it can be called on. We can just pass it the name of the method we&rsquo;re curious about as a symbol, and then ask it where it belongs:</p>

<pre><code>2.2.0 :002 &gt; method(:puts).receiver
 =&gt; main 

2.2.0 :003 &gt; method(:puts).owner
 =&gt; Kernel 
</code></pre>

<p>WAT. It seemed like <code>main</code> was the receiver of this method, while <code>Kernel</code> was the owner, or the place where this method was actually defined.</p>

<p>But did that mean that <code>main</code> was also self within the context of <code>irb</code>? And what <em>was</em> <code>main</code>, exactly? There was only one way to find out:</p>

<pre><code>2.2.0 :004 &gt; method(:gets).receiver == self
 =&gt; true 

2.2.0 :005 &gt; self
 =&gt; main 

2.2.0 :006 &gt; self.class
 =&gt; Object
</code></pre>

<p>Pretty weird, right? But hang on&hellip;there was a line up there that was pretty new for me. Something about a <code>Kernel</code>? Let&rsquo;s do a bit more detective work.</p>

<h2>Tell Me &lsquo;Bout Them Kernels</h2>

<iframe src="//giphy.com/embed/rambtrormFyWQ" width="480" height="268" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Okay, you&rsquo;re probably wondering: <em>So that <code>Kernel</code> thing &ndash; what&rsquo;s the deal?</em> Well, it turns out that <code>Kernel</code> is a module, and if you&rsquo;re like me, you probably haven&rsquo;t thought about it that much until now.</p>

<p>But what you might remember about modules is that they have to be mixed into a class in order to be included; that is to say, in order for a class or instances of a class to have access to methods in a module, that module has to be included or extended into the class.</p>

<p>Which means that <code>Kernel</code> has to be included into a Ruby class. But&hellip;which one? To figure out, we need to think back to what <code>self</code> was within the context of <code>irb</code>: <code>main</code>. If we try to ask <code>main</code> for its ancestors (so that we can deduce where the <code>Kernel</code> module is coming into play), we get this error:</p>

<pre><code>2.2.0 :007 &gt; main.ancestors
NoMethodError: undefined method `ancestors' for main:Object
  from (irb):75
  from /usr/bin/irb:12:in `&lt;main&gt;'
</code></pre>

<p>Okay, not so great. But hang on a second&hellip;since we know that <code>main</code> is an instance of the <code>Object</code> class, we can just ask the <code>Object</code> class who its ancestors are!</p>

<pre><code>2.2.0 :008 &gt; Object.ancestors
 =&gt; [Object, Kernel, BasicObject] 
</code></pre>

<p>Nice! We found <code>Kernel</code>, and it looks like it&rsquo;s included the <code>Object</code> class. We can figure this out because it appears to the right of <code>Object</code>, which means it has been mixed into the class to its left.</p>

<p>So, if a method like <code>puts</code> is written in the <code>Kernel</code> module, what can it be called on? Who is doing the &ldquo;receiving&rdquo; of this method call? Well, according to <a href="http://ruby-doc.com/docs/ProgrammingRuby/html/ref_m_kernel.html">the Ruby docs</a>, pretty much anything:</p>

<blockquote><p>The Kernel module is included by class Object, so its methods are available in every Ruby object. These methods are called without a receiver and thus can be called in functional form.</p></blockquote>

<p>So, theoretically-speaking, if the Kernel module is included by class Object, and is therefore available to <em>every</em> Ruby object, we should be able to call <code>puts</code> on a <code>String</code> instance, right?</p>

<pre><code>2.2.0 :009 &gt; "".puts('wat')
NoMethodError: private method `puts' called for "":String
  from (irb):79
  from /usr/bin/irb:12:in `&lt;main&gt;'
</code></pre>

<p>Uh oh! Maybe we can&rsquo;t. But&hellip;why not?</p>

<h2>Global Functions</h2>

<p>If you are smart cookie, you probably read that error and guessed that <code>puts</code> is a private method defined on <code>Kernel</code>. We can confirm this by using the <code>private_method_defined?</code> method to double check:</p>

<pre><code>2.2.0 :010 &gt; Kernel.private_method_defined?(:puts)
 =&gt; true
</code></pre>

<p>The fact that <code>puts</code> is a private method is important. It means that it can&rsquo;t be called explicitly by anyone else. But how is it, then, that we use this method so frequently and easily? Well, because its mixed in to class <code>Object</code>, it&rsquo;s accessible to any Ruby object &ndash; but only in the current context. This explains why <code>puts</code> never has to be called explicitly upon any object; instead, it will be called <em>implicitly</em> on whatever <code>self</code> happens to be. In other words, the method will be called on the current context of <code>self</code>.</p>

<p>It&rsquo;s also pretty crucial that a method like <code>puts</code> can be called in the current context of self. In fact, that&rsquo;s exactly what allows us to do this within a Ruby class:</p>

<pre><code class="ruby">Class Duck
  def self.swim
    puts "We're swimming."
  end

  def quack
    puts "Quack quack!"
  end
end
</code></pre>

<p>or something like this in <code>irb</code>:</p>

<pre><code>2.2.0 :011 &gt; puts "Waddle waddle"
Waddle waddle
 =&gt; nil 
</code></pre>

<p>Even though the context of <code>self</code> changes from the Duck Class, to an instance of a Duck, back to <code>main</code> in <code>irb</code>, we have access to <code>puts</code> in all contexts. It&rsquo;s kind of magical, if you think about it: a single private method, defined in a module, trickles down to all Ruby objects that descend from it!</p>

<p>And this magic has a name: <strong>global functions</strong> work. Since methods like <code>puts</code> are defined on the <code>Kernel</code> and mixed into the <code>Object</code> class, they are accessible <em>everywhere</em>. They&rsquo;re private methods, which means they must be invoked without an explicit receiver (also known as a &ldquo;function form&rdquo; of method invocation).</p>

<p>I really liked the way that <a href="https://codequizzes.wordpress.com/2014/04/22/rubys-kernel-module/">this blog post</a> explains the concept:</p>

<blockquote><p>Virtually all Ruby objects inherit from Object and have access to the methods defined in the Kernel module, so Kernel’s private instance methods are accessible virtually anywhere in a Ruby program, regardless of self.</p></blockquote>

<p>And you know what&rsquo;s even cooler? These global functions defined on <code>Kernel</code> are used everywhere! In fact, you probably don&rsquo;t even realize that you use them. Here are some of the ones that surprised me:</p>

<ul>
<li><code>gets</code></li>
<li><code>chomp</code></li>
<li><code>sleep</code></li>
<li><code>require</code></li>
<li><code>gem</code></li>
<li><code>rand</code></li>
<li><code>gsub</code></li>
<li><code>proc</code></li>
<li><code>eval</code></li>
</ul>


<p>Yup. All of these methods are defined on <code>Kernel</code>, available to all objects (including <code>main</code> as <code>self</code> in <code>irb</code>), and don&rsquo;t need a receiver to be called!</p>

<iframe src="//giphy.com/embed/gLRDi5KnA3Fte" width="480" height="374" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Now that you know where all these methods live and where they come from, you probably feel pretty powerful. You also will hopefully feel more purposeful when you write even a simple <code>puts</code> statement in a line of code.</p>

<p>Perhaps the moral of the story here is to never take code for granted: always question how it works and try to understand exactly what&rsquo;s going on in every line that you type.</p>

<p>The second moral is to use other developers on Twitter as resources to help you figure out what to Google, obvs.</p>

<h2>tl;dr?</h2>

<ul>
<li>The <code>Kernel</code> module is mixed into the <code>Object</code> class, which means all methods (including private methods!) defined on this module are accesible to all Ruby objects, making them &ldquo;global&rdquo; functions.</li>
<li>Even though a method&rsquo;s implicit receiver is <code>self</code>, the context of <code>self</code> changes depending on which class you are in; this is particularly important when dealing with &ldquo;global&rdquo; functions.</li>
<li>Curious about <code>main</code> and <code>self</code> in <code>irb</code>? Check out these two great <a href="http://www.sitepoint.com/rubys-top-self-object/">blog</a> <a href="https://banisterfiend.wordpress.com/2010/11/23/what-is-the-ruby-top-level/">posts</a>.</li>
</ul>

]]></content>
  </entry>
  
</feed>
