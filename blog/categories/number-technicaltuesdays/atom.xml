<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: #technicaltuesdays | Words and Code]]></title>
  <link href="http://vaidehijoshi.github.io/blog/categories/number-technicaltuesdays/atom.xml" rel="self"/>
  <link href="http://vaidehijoshi.github.io/"/>
  <updated>2015-02-09T23:03:49-05:00</updated>
  <id>http://vaidehijoshi.github.io/</id>
  <author>
    <name><![CDATA[Vaidehi Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Money Makes the World Go Round: Using Money-Rails and BigDecimal]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/02/10/money-makes-the-world-go-round-using-money-rails-and-bigdecimal/"/>
    <updated>2015-02-10T08:07:09-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/02/10/money-makes-the-world-go-round-using-money-rails-and-bigdecimal</id>
    <content type="html"><![CDATA[<p><img src="http://s3-ec.buzzfed.com/static/enhanced/webdr02/2013/3/26/12/enhanced-buzz-19756-1364314697-15.jpg" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>Mo money, mo problems. This is especially the case when you&rsquo;re a new developer trying to onboard onto a huge eCommerce Rails application.</p>

<p>No, but really - money is such a pain in the ass to deal with as a programmer. So much logic and detail goes into accpeting a payment, processing a transaction, checking an order&rsquo;s status&hellip;and don&rsquo;t even get me <em>started</em> on shipping &ndash; seriously, I&rsquo;m saving the entire concept of shipping for another blog post.</p>

<p>But, at some point or another, you have to deal with other people&rsquo;s money. And you have to try and not screw it up, because apparently people really don&rsquo;t like that. So, how do you handle all those dolla dolla bills? Yup, you guessed it: with the <strong>money-rails library</strong> and Ruby&rsquo;s <strong>BigDecimal object</strong>.</p>

<!-- more -->


<h2>Get Dat Dough: Implementing Money-Rails</h2>

<p>Including the money-rails library is fairly simple: add <code>gem 'money-rails'</code> to your Gemfile and then <code>bundle</code> in your console.</p>

<p>But what exactly <em>is</em> this library, and how do you effectively use it? Well, that&rsquo;s another thing entirely.</p>

<p>The most important thing to note is that the <code>money-rails</code> library provides integration of the <code>money</code> gem for Rails applications. So, before you go around throwing about your dough every which way, here are a few things about the <code>money</code> gem to keep in mind:</p>

<ol>
<li>It gives you a <code>Money</code> class, and instances of this class (<code>Money</code> objects) contain all the information about a certain <em>amount</em> of money.  Provides a Money class which encapsulates all information about an certain amount of money, such as its value and its currency.</li>
<li>It provides you with a <code>Money::Currency</code> class, which contains all the information about a certain monetary unit. Instances of this class are how we will represent different currencies.</li>
<li>It includes APIs to exchange one kind of currency into another.</li>
<li>It represents money in <code>Integer</code> values, not <code>Float</code>, in order to avoid rounding errors.</li>
</ol>


<p>This last one is important, so try to remember it &ndash; we&rsquo;re going to come back to this in a bit.</p>

<h2>Make It Rain!</h2>

<p>Ok, time to get rich: let&rsquo;s make ourselves some money. Instantiating a <code>Money</code> object isn&rsquo;t too hard; simply create a new instance and pass it an amount and a currency:
<code>ruby
five_bucks = Money.new(500, "USD")  #=&gt; $5.00 USD
five_bucks.cents     #=&gt; 500
five_bucks.currency  #=&gt; Currency.new("USD")
</code></p>

<p>Notice that the amount must be passed in as cents, while the currency must be passed in as either a <code>String</code> or a <code>Money::Currency</code> object.</p>

<p>Money usually means math, so let&rsquo;s do some:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_money</span> <span class="o">=</span> <span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">USD</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">your_money</span> <span class="o">=</span> <span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1500</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">USD</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;my_money + your_money == Money.new(4500, &amp;ldquo;USD&amp;rdquo;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can also use the <code>parse</code> method, which takes in a symbol and number in a string format, and returns a <code>Money</code> object with the correct currency type:
<code>ruby
Money.parse("£60") == Money.new(60, "GBP")
</code></p>

<p>In addition to comparing currencies, you can create an access them as objects:
<code>ruby
currency = Money.new(60, "GBP").currency #=&gt; "£60.00 GBP"
currency.iso_code #=&gt; "GBP"
currency.name     #=&gt; "British Pound"
</code></p>

<p>You can access any information of a currency (which is, again, just a <code>Money</code> object), including its <code>name</code>, <code>iso_code</code>, <code>symbol</code>, and <code>delimiter</code>. And if you want to create a new currency, you&rsquo;d simply need to pass in the values as a hash into the <code>register</code> class method. There&rsquo;s also the <code>default_currency</code> class method, which does exactly what you think it does, and an <code>exchange_to</code> method, which can be super handy if you ever want to sell your products&hellip;well, basically anywhere.</p>

<p>So. You can make money now. Like, actually <em>create</em> it. Do you feel like a god yet? Okay good. Hold onto that feeling, because it&rsquo;s about to get a little more complicated.</p>

<iframe src="//giphy.com/embed/jUNAEqdvpQCcM" width="480" height="239" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>BigDecimal: Not Just Any Ol&#8217; Number</h2>

<p>When I was first playing around with this gem, I was much like you: young, naive, thoroughly amused by the fact that I could play with money in my console with (mostly) no consequences. And then I saw this:</p>

<pre><code class="ruby">#&lt;BigDecimal:7fbd6eab87f8,'0.8E1',9(36)&gt;
</code></pre>

<p><em>Um. What? Is that an association? An object? Is it even Ruby?</em></p>

<p>The answer to my questions were no, yes, and absolutely. Actually, that little guy up there is my new friend, <code>BigDecimal</code>. And by the time you finish reading this post, I think you&rsquo;re going to like him, too.</p>

<p>Okay, time for a quick exercise! Open up irb and type in: <code>1.01 - 1.00</code></p>

<pre><code>2.1.2 :001 &gt; 1.01 - 1.00
 =&gt; 0.010000000000000009 
2.1.2 :002 &gt; n = _
 =&gt; 0.010000000000000009 
2.1.2 :003 &gt; n &gt; 0.01
 =&gt; true 
</code></pre>

<p>Wait&hellip;Ruby thinks that the difference between <code>1.01</code> and <code>1.00</code> is greater than <code>0.01</code>? OH SHIT. DID WE BREAK RUBY?!</p>

<p>Nope, nope we did not. But, we <em>did</em> just discover the one true flaw of Ruby <code>Float</code>, which is that they can&rsquo;t store decimals very precisely. Apparently, the reason for this</a> is that floats are stored in a binary number format, which means that there&rsquo;s a lot of conversion from binary to decimal going on under the hood.</p>

<p>This probably doesn&rsquo;t seem all that important, but here&rsquo;s the thing: people really don&rsquo;t like it when you take their money. And when you use floats, you may very well be rounding up in cases when you really shouldn&rsquo;t be, which would result in some sort of numerical error.</p>

<p>Enter our new buddy, <code>BigDecimal</code>. We can do the exact same calculation with this object, but without the arbitrary rounding! If we try it out in irb, we&rsquo;ll get the number that we were originally expecting:</p>

<pre><code>2.1.2 :005 &gt; BigDecimal.new("1.01") - BigDecimal.new("1.00")
 =&gt; #&lt;BigDecimal:7fee2add1560,'0.1E-1',9(27)&gt; 
2.1.2 :006 &gt; n = _
 =&gt; #&lt;BigDecimal:7fee2add1560,'0.1E-1',9(27)&gt; 
2.1.2 :007 &gt; n.to_f
 =&gt; 0.01 
</code></pre>

<p>If you remember scientific notation from middle school, then you&rsquo;ll notice what&rsquo;s going on in <code>0.1E-1</code>, and how that converts to <code>0.01</code> when we called the <code>to_f</code> method on it. This takes more time, but it is far more accurate &ndash; something that&rsquo;s pretty important when it comes to the monies.</p>

<p>Remember earlier in the post when I told you to remember that the <code>money</code> gem uses <code>Integer</code> but not <code>Float</code>? Well, it also uses <code>BigDecimal</code> objects, for the same exact reason that we just discovered on our own.</p>

<h2>What Is Standard Cannot Be Core</h2>

<p>If your first reaction to reading this post was opening up irb and trying to make your own <code>BigDecimal</code> object, then you most certainly encountered this error:</p>

<pre><code>♥ irb
2.1.2 :001 &gt; BigDecimal.new
NameError: uninitialized constant BigDecimal
  from (irb):1
</code></pre>

<p>Before you freak out, let me assure you that I did not lie to you &ndash; <code>BigDecimal</code> most surely is a real thing. But it&rsquo;s not a core thing. What I mean by that is, <code>BigDecimal</code> is not part of the Ruby Core Library; it&rsquo;s actually part of the Ruby Standard Library.</p>

<p>If you&rsquo;re thinking to yourself, <em>Whut?! Ruby has two different libraries?</em>, you&rsquo;d be right. But even though both deal with Ruby objects, there&rsquo;s a fundamental difference between the two.</p>

<p>The <a href="http://www.ruby-doc.org/core-2.2.0/">Ruby Core Library</a> is what you use every day, including basic objects such as <code>String</code>, <code>Integer</code>, <code>Float</code>, <code>Array</code>, <code>Hash</code>, and many others. On the other hand, the objects in the <a href="http://www.ruby-doc.org/stdlib-2.2.0/">Ruby Standard Library</a> may seem a little less familiar. Unlike the Core Library, objects from the Standard Library have to be explicitly required. <code>BigDecimal</code> objects are part of the Standard Library, as are <code>Abbrev</code>, <code>Logger</code>, and <code>Matrix</code> objects.</p>

<p>The Standard Library is an extension of the Ruby language. You will always have access to the Core Library, but if you want to use an objec that exists outside of the Core Library, you&rsquo;ll need to specifically require it. So, if you want to play with <code>BigDecimal</code> in the console or use it in your application, you&rsquo;ll have to type this in to have access to the object: <code>require 'bigdecimal'</code>.</p>

<h2>More Bang For Your Buck</h2>

<p>When I first started reading about <code>BigDecimal</code>, I wondered why I had never run into this type of object before. How could I have missed it entirely? As a beginner, it may not sense to use this type of Ruby object at all, and it may very well slow you down. In fact, I think floats are the default object in use for a reason: they&rsquo;re much cheaper to use in memory, and can convert, lookup, and do arithmetic much faster than <code>BigDecimal</code>. Calculations on <code>BigDecimal</code> objects are much slower because they are objects, which take up <em>far</em> more space and memory. However, if you&rsquo;re actually dealing with currency values &ndash; building an ecommerce application, for example &ndash; <code>BigDecimal</code> still seems to be a clear winner to me.</p>

<p>The <code>money</code> gem and <code>money-rails</code> library provide a lot of flexibility when it comes to handling money in your application mostly because they create <code>Money</code> objects. I&rsquo;m a huge fan of object-oriented programming, and these libraries allow you to manipulate and access your currency with far more ease than if they were stored as simple integers, or even floats.</p>

<p>However, these resources are only the tip of the iceberg when it comes to dealing with money in your Rails application. Another awesome library is <a href="https://github.com/RubyMoney/monetize">monetize</a>, which allows you to convert different types of Ruby objects into <code>Money</code> objects. Once you get the basic structure and namespacing of these libraries, learning about new ones will be a piece of cake. Pretty soon, you&rsquo;ll be breaking the bank with all your knowledge about using money in Rails. Maybe you&rsquo;ll even end up like this guy:</p>

<iframe src="//giphy.com/embed/3Jhdg8Qro5kMo" width="480" height="295" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>The <code>money-rails</code> library allows you to create <code>Money</code> objects, including different currencies. Ruby <code>BigDecimal</code> objects round more accurately and are more precise than <code>Float</code> objects, making them more preferable when working with money.</li>
<li>Read more about the methods available to <code>BigDecimal</code> objects in the <a href="http://www.ruby-doc.org/stdlib-2.2.0/libdoc/bigdecimal/rdoc/index.html">Ruby documentation</a>, and check out all the cool stuff that the <code>money</code> gem can do over on <a href="http://rubymoney.github.io/money/">their website</a>.</li>
<li>Want to know more about what makes floats weird? Read <a href="http://www.rails-troubles.com/2011/12/ruby-float-quirks.html">this blog post</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Enough Is Enough: How to Know When to Use Enums]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/02/03/when-enough-is-enough-how-to-know-when-to-use-enums/"/>
    <updated>2015-02-03T08:32:19-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/02/03/when-enough-is-enough-how-to-know-when-to-use-enums</id>
    <content type="html"><![CDATA[<p>NERD ALERT: I love databases. God, they&rsquo;re just <em>fantastic</em>. Few things give me as much joy as an empty whiteboard and a couple of intricate join tables that need to be sketched out. But there&rsquo;s also an art to understanding how to handle data &ndash; particularly when you have a shit ton of it.</p>

<p>The main issue people run into with data is first, how to go about storing it, and second, how to go about getting it when you actually need it! This doesn&rsquo;t sound super complicated though, right? <em>Wrong</em>. Databases grow vertically, not horizontally, and they grow hella fast. At a certain point, the way that you go about storing your data ends up <em>directly impacting</em> how you go about retrieving it!</p>

<p>Many Rubyists write different helper methods to do their querying for them. But this is Rails Land, which means that we have <del>black</del> Rails magic at our disposal. And with the advent of Rails 4.1, that magic now has a name: <strong>enum</strong>.</p>

<!-- more -->


<h2>Get Yo Enum On</h2>

<p>When Rails 4.1 was released less than a year ago, it came out with a bunch of new features. One of those was <strong>ActiveRecord enums</strong>, which essentially cut out a lot of methods and superfluous code.</p>

<p>ActiveRecord enums allow you to manipulate the attributes of an ActiveRecord object in Rails such that an attribute&rsquo;s values map to <em>integers</em> in the database (as opposed to strings), and yet can also be <em>queried by name</em>. If all this sounds kind of crazy to you, that&rsquo;s because it is! Enums are pretty cool because they have the flexibility of a string, but the speed and efficiency of an integer. You can look up values in a huge database using an integer, but you can also update and add attributes as string. Oh &ndash; you also get a bunch of methods for FREE!</p>

<iframe src="//giphy.com/embed/eYieKG19ZuaR2" width="480" height="338" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>So how does this magic work, exactly? I thought you&rsquo;d never ask!</p>

<h2>Multiple Columns?! Ain&rsquo;t Nobody Got Time For That!</h2>

<p>To demonstrate how to implement ActiveRecord enums, I&rsquo;ll continue using <a href="http://vaidehijoshi.github.io/blog/2015/01/27/embrace-your-inner-paranoia-use-acts-as-paranoid/">last week&rsquo;s ecommerce bookstore app</a> as my example. So, I have these <code>Book</code> objects in my store, and I want to keep track of what their status is: either <code>in stock</code>, <code>out of stock</code>, or <code>ordered</code>. For the sake of simplicity, we&rsquo;ll pretend that I&rsquo;m not a super sophisticated bookseller, so I don&rsquo;t have a lot of <code>Book</code>s, and therefore each <code>Book</code> object can only ever have one of these three states.</p>

<p>I might first start off by having three different columns to represent each of these states:
<code>ruby
class AddStatusesToBooks &lt; ActiveRecord::Migration
  def change
    add_column :books, :in_stock?, :boolean
    add_column :books, :out_of_stock?, :boolean
    add_column :books, :ordered?, :boolean
  end
end
</code>
But this seems kind of&hellip;ridiculous. I&rsquo;m always going to have <em>two empty columns</em>. This code has me all like:</p>

<iframe src="//giphy.com/embed/zrdUjl6N99nLq" width="480" height="380" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>Alternatively, I could combine all of these columns into one and use some helper methods that return boolean values when I call them on an instance of a <code>Book</code>:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">in_stock?</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="k">in</span> <span class="n">stock</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def out_of_stock?</span>
</span><span class='line'><span class="sr">    self.status == &amp;lsquo;out of stock&amp;rsquo;</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">ordered?</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">ordered</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
Well, now I have one column, so that&rsquo;s better. But this is still so repetitive, ugly, and inefficient. Don&rsquo;t worry, it&rsquo;s about to get real good.</p>

<h2>Query Your Little Heart Out</h2>

<p>Implementing enum is pretty simple. First, add the macro to your class:
<code>ruby
class Book &lt; ActiveRecord::Base
  enum status: [:in_stock, :out_of_stock, :ordered]
end
</code>
You&rsquo;ll notice that I have my <code>status</code> attribute categorized into my three different options. The fact that they look like symbols in an array is no mistake &ndash; each of these symbols is actually associated with its index. So <code>in_stock</code> will be referenced by its index number <code>0</code>, <code>out_of_stock</code> by <code>1</code>, and <code>ordered</code> by <code>2</code>.</p>

<p>Next, add a column to your migration that will allow ActiveRecord enum to carry out your queries:
<code>ruby
class AddStatusToBooks &lt; ActiveRecord::Migration
  def change
    add_column :books, :status, :integer, default: 0
  end
end
</code>
I want all my <code>Book</code> objects to default to an <code>in_stock</code> status when they are created, so I added a <code>default: 0</code> to my column. Adding a default is always a good way to keep your code defensive.</p>

<p>Now if I want to create a <code>Book</code> object and check its status:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">create</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;book.status&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">in_stock</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;book.out_of_stock?&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="kp">false</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;book.status = :ordered</span>
</span><span class='line'><span class="sr">book.ordered! #updates the object</span>
</span><span class='line'><span class="sr">book.ordered?&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;book.status?&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">ordered</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;book.out_of_stock&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="c1">#&amp;lt;ActiveRecord::Relation []&gt;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Go</span> <span class="n">ahead</span> <span class="ow">and</span> <span class="n">scroll</span> <span class="n">up</span> <span class="k">if</span> <span class="n">you</span> <span class="n">don</span><span class="s1">&#39;t believe me -- I promise I didn&#39;</span><span class="n">t</span> <span class="n">make</span> <span class="n">any</span> <span class="n">of</span> <span class="n">these</span> <span class="nb">methods</span><span class="o">!</span> <span class="no">Enum</span> <span class="n">gave</span> <span class="n">them</span> <span class="n">to</span> <span class="n">me</span><span class="p">,</span> <span class="no">FO</span> <span class="no">FREE</span><span class="o">.</span> <span class="no">So</span> <span class="n">what</span><span class="s1">&#39;s actually going on here? Well, not much more than ActiveRecord mapping the integer corresponding to the indexes of the symbols we provided in the enum macro array.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Our database has only one column storing all this information: `status`. That column has rows that are all either `1`, `2`, or `3`. ActiveRecord pulls the actual symbols that correspond to these array indexes, and returns them, simultaneously creating an `in_stock`, `out_of_stock`, and `ordered` scope. And the icing on the cake: all the helper methods that are immediately generated for us in the process!</span>
</span><span class='line'>
</span><span class='line'><span class="s1">## Tips and Tricks</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Enums give you a lot of flexibility. For example, I played around with the `in_stock` scope of my `Book` object to create a specific class method that would order the top three newest books added to my inventory:</span>
</span><span class='line'><span class="s1">`scope :newest_stock, -&amp;gt; (limit: 3) { in_stock.order(&#39;</span><span class="n">date</span> <span class="no">DESC</span><span class="err">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span> <span class="p">}</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="sb">Another thing to remember is that you *cannot* use the same names for different enums of the same class:</span>
</span><span class='line'><span class="sb">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;p&gt;class Book &amp;lt; ActiveRecord::Base</span>
</span><span class='line'><span class="sb">  enum status: [ :ordered ]</span>
</span><span class='line'><span class="sb">  enum inventory: [ :ordered ]</span>
</span><span class='line'><span class="sb">end</span>
</span></code></pre></td></tr></table></div></figure>
Definitely <strong>don&rsquo;t</strong> do this &ndash; this will raise an ActiveRecord error!</p>

<p>A huge upside to using enums is their contribution to your application&rsquo;s speed and performance. It&rsquo;s a <a href="http://dev.mysql.com/doc/refman/5.1/en/storage-requirements.html">well-known fact</a> that it&rsquo;s much cheaper to store data as an integer in memory, rather than as a string value. Enums take advantage of that, yet allow you to use all the ActiveRecord methods you know and love.</p>

<p>So, you can have your human-readable and fun-to-program code without sacrificing any of the speed and performance that you need to save and access your information. I guess dreams really do come true.</p>

<iframe src="//giphy.com/embed/aCu2aFhWKR84M" width="480" height="198" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>The ActiveRecord enum feature allows you compose a single complex state on your models, and can help avoid using multiple boolean value columns to check the status of different objects.</li>
<li>There are a bunch more resources out there, so make sure <a href="http://brewhouse.io/blog/2013/12/17/whats-new-in-rails-4-1.html">you</a> <a href="http://richonrails.com/articles/active-record-enums-in-ruby-on-rails-4-1">check</a> <a href="https://hackhands.com/ruby-on-enums-queries-and-rails-4-1/">them</a> <a href="http://robots.thoughtbot.com/whats-new-in-edge-rails-active-record-enum">all</a> <a hef="http://dev.mikamai.com/post/82355998967/rails-4-1-activerecord-enums">out</a>.</li>
<li>Check out the enum <a href="http://edgeguides.rubyonrails.org/4_1_release_notes.html#active-record-enums">release notes</a> and <a href="http://api.rubyonrails.org/v4.1.0/classes/ActiveRecord/Enum.html">documentation</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embrace Your Inner Paranoia: Using Acts_as_paranoid]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/01/27/embrace-your-inner-paranoia-use-acts-as-paranoid/"/>
    <updated>2015-01-27T19:36:16-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/01/27/embrace-your-inner-paranoia-use-acts-as-paranoid</id>
    <content type="html"><![CDATA[<p>Yesterday, I started my very first job as a software engineer! It&rsquo;s been super exciting, slightly terrifying, and sometimes overwhelming. I think one of the trickiest parts of starting as a new engineer at a company is the onboarding process.</p>

<p>It might seem kind of scary, but if you think about it, it&rsquo;s actually pretty fun. You get to dive down a rabbit hole and look at production code that you didn&rsquo;t write. It&rsquo;s getting a new puzzle that you haven&rsquo;t solved yet: you try to figure out how one thing connects to another, where modules and methods exist, how things are namespaced, not to mention learning about new frameworks and gems. I feel like I&rsquo;m entering into new dimensions and travelling through a space-time continuum or something. This also might be attributed to the fact that I&rsquo;ve been  listening exclusively to the <a href="https://www.youtube.com/watch?v=YOWSTtXxf9s">Interstellar soundtrack</a> for the past two days, but whatever &ndash; you get the point.</p>

<p>My favorite part of the onboarding process is how much I&rsquo;ve been learning. Every new class or module definition brings a new piece of the puzzle that I&rsquo;ve never seen before, but can&rsquo;t wait to learn about. It&rsquo;s kind of crazy that I get paid to read and learn all day, every day &ndash; that&rsquo;s the dream, right?</p>

<p>Anyways, all of this is to say that I&rsquo;ve found and learned about some cool stuff! For example this little ditty: <code>acts_as_paranoid</code>. I saw this in a class definition and my first thought was literally: <em>Damn, that&rsquo;s a great name for a validation!</em> But as it turns out, it&rsquo;s not actually a validation &ndash; it&rsquo;s Rails magic!</p>

<!-- more -->


<h2>Start acting paranoid!</h2>

<p>Okay, I lied: <code>acts_as_paranoid</code> not actually <em>magic</em> &ndash; it&rsquo;s a Rails ActiveRecord plugin. But it&rsquo;s still pretty magical, you guys! So, what does it do? Well, it helps you be less paranoid about deleting stuff by accident (hence the name). Essentially, <code>acts_as_paranoid</code> allows you to make soft deletes in Rails. That means that it gives you the flexibility to delete an object without actually deleting it from the database.</p>

<iframe src="//giphy.com/embed/VpbctjT9VrALS" width="480" height="260" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>Does this sound like black magic yet? Just wait, you&rsquo;re about to see some real magic.</p>

<h2>So&hellip;how do I starting acting paranoid?</h2>

<p>In my example, I&rsquo;ll be implementing <code>acts_as_paranoid</code> on some <code>Book</code> objects in my eCommerce bookstore app. Using <code>acts_as_paranoid</code> is relatively simple. You can break it down into two simple steps:</p>

<p>First, add <code>acts_as_paranoid</code> to your class definition:
<code>ruby
class Book &lt; ActiveRecord::Base
  acts_as_paranoid
end
</code></p>

<p>Then, add a column to the database for that class called <code>deleted_at</code>, which is set to a <code>datetime</code> format:
<code>ruby
class AddDatetimeToBooks &lt; ActiveRecord::Migration
  def change
    add_column :books, :deleted_at, :datetime
  end
end
</code></p>

<h2>Ok, I&rsquo;m getting paranoid now &ndash; how does this work?</h2>

<p>So, we have another column in our <code>Books</code> table that has a <code>deleted_at</code> column with a type of <code>:datetime</code>. Now, this is where the magic happens: the <code>acts_as_paranoid</code> plugin actually <em>overrides</em> ActiveRecord&rsquo;s <code>find</code>, <code>count</code>, and <code>destroy</code> methods. So now when we call the <code>destroy</code> method on a <code>Book</code> object, instead of actually deleting the object, the object&rsquo;s <code>deleted_at</code> field will be set to the current date and time.</p>

<p>And, if we call the <code>find</code> method on all of our <code>Book</code> objects, the one we just &ldquo;deleted&rdquo; won&rsquo;t show up! Instead, only the objects that <em>don&rsquo;t</em> have a value in their <code>deleted_at</code> column will render.</p>

<p>So, calling <code>@book.destroy</code> doesn&rsquo;t delete a row from the database; it actually just updates the row by giving a datetime to the object&rsquo;s <code>deleted_at</code> field. If you&rsquo;re into SQL queries, this is what&rsquo;s going on:</p>

<p><code>UPDATE books SET deleted_at = '2015-01-27 19:36:16' WHERE (id = 50)</code></p>

<p>The <code>Book</code> object with an id of <code>50</code> isn&rsquo;t <em>actually</em> deleted from the database, even though it will appear so in all of our views, and to our users/admins.</p>

<h2>But who needs soft deletes, anyways?</h2>

<p>I actually didn&rsquo;t realize the use case for soft deletes at first. But it turns out that they are incredibly helpful when building out large, more complicated Rails applications.</p>

<p>It&rsquo;s important to remember that Ruby is an object-oriented programming language. Any object that has an association with another object inherently relies upon it. In my bookstore app example, a <code>Book</code> object would belong to a <code>Order</code> object, and also be associated with a <code>User</code> object of some sort. If you think about the appliation on a broader, less granular level, you might realize that deleting any given <code>Book</code> object could actually have serious repercussions.</p>

<p>For example, you might want to see a <code>Book</code> object that was ordered in the past, even if that <code>Book</code> has since been deleted from a store. Perhaps you want to view the details of a <code>Shipment</code> object, even if that shipment was cancelled. Or, you might want to see an order that was placed by a <code>User</code> who may have deactivated their account months ago.</p>

<p>The <code>acts_as_paranoid</code> plugin helps you access all of this information, without keeping you up at night, wondering whether you deleted the wrong row from the database. Because honestly, who has time for that? Not this kitty, for sure:</p>

<p><img src="https://idp05.files.wordpress.com/2008/03/paranoid-cat.jpg" style="display: block; margin-left: auto; margin-right: auto;"></p>

<h2>tl;dr?</h2>

<ul>
<li>The <code>acts_as_paranoid</code> plugin modifies ActiveRecord methods and allows you to implement soft deletes on your Ruby objects. Just remember to include it in your class definition and add a <code>deleted_at</code> column to your migration, with a type of <code>datetime</code>.</li>
<li>Want to see another example of disabling records using <code>acts_as_paranoid</code>? Check out <a href="https://www.safaribooksonline.com/library/view/rails-cookbook/0596527314/ch14s11.html">this blog post</a>.</li>
<li>To read more about <code>acts_as_paranoid</code> and its many caveats, check out <a href="https://github.com/ActsAsParanoid/acts_as_paranoid/">the easy-to-follow documentation</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing REM in CSS (or, How to Be a Shiny Happy Developer)]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/01/20/implementing-rem-in-css-or-how-to-be-a-shiny-happy-developer/"/>
    <updated>2015-01-20T17:39:10-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/01/20/implementing-rem-in-css-or-how-to-be-a-shiny-happy-developer</id>
    <content type="html"><![CDATA[<p>During a recent pair programming session, I came to the tough realization that I really know <em>nothing</em> about CSS. Granted, I can add in a <code>div</code> tag here and there, and yes, I can make a responsive page using Twitter Bootstrap like no one&rsquo;s business. But, what do I really know about design? Not as much as I thought I did.</p>

<p>I figured out that this was the case when the designer I was pairing with started using <strong>ems</strong> and <strong>rems</strong>. I should probably preface this and say that I have always been a pixel kind of girl. I was formerly of the mindset that you can have any font size you like &ndash;  as long as it&rsquo;s defined in pixels.</p>

<p>But, after doing a bit of research, I found that ems and rems actually have an interesting history behind them, and are super helpful when it comes to elastic layouts and responsive design.</p>

<!-- more -->


<h2>wait. there are different types of layouts?</h2>

<p>Yes! Trying to make your web applications responsive can be a nightmare, and kind of feels like this:</p>

<iframe src="//giphy.com/embed/13FrpeVH09Zrb2" width="480" height="462" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>Designers have long debated <a href="http://www.smashingmagazine.com/2009/06/02/fixed-vs-fluid-vs-elastic-layout-whats-the-right-one-for-you/">what kind of page layouts</a> are the best solution for this problem. The most interesting one is the elastic layout, which combines fluid and fixed layouts, and relies completely on sizing all the elements on a page by using <strong>ems</strong>. This is a pretty popular layout amongst designers and developers alike because, when it&rsquo;s properly implemented, the entire page grows or shrinks in proportion with the user&rsquo;s window size.</p>

<p>By now, you&rsquo;re probably thinking to yourself, <em>Okay, that&rsquo;s all great, but dear lord please tell me what ems and rems are!</em></p>

<p>Well, your wish is my command.</p>

<h2>Getting down with ems</h2>

<p>An <a href="http://en.wikipedia.org/wiki/Em_%28typography%29"><em>em</em></a> is nothing more than a unit of measurement. Ems have actually been around for awhile and date back to the early days of typography. The em was originally a point of reference to the width of the metal block used to make a capital &ldquo;M&rdquo; in any particular size of typeface.</p>

<p>But for our purposes, we only need to think about ems in the context of CSS, which is a vertical measurement. <a href="http://v1.jontangerine.com/log/2007/09/the-incredible-em-and-elastic-layouts-with-css">Jon Tan</a>, designer and typographer extrordinaire, describes em units pretty clearly:</p>

<blockquote><p>&ldquo;One em equals the vertical space needed for any given letter in a font, regardless of the horizontal space it occupies. Therefore:<br> If the font size is 16px, then 1em = 16px.&rdquo;</p></blockquote>

<p>Protip: most popular web browsers have a default font size of 16 pixels. So, if you wanted to have a font size that was half that size, or 8 pixels, you could specify that in ems as &ldquo;0.5em&rdquo; (in other words, 50% of the original font size).</p>

<h2>But do i really need to use &lsquo;em?</h2>

<p>You don&rsquo;t <em>have</em> to use ems. Case in point: I&rsquo;d never used them until a week ago. But using them can save you lines of code. The most important thing to remember about ems is how they are different from pixels: <strong>ems are relative, pixels are not.</strong> This is especially helpful when you have nested elements.</p>

<p>Imagine you have a file that needs to have four different font sizes:</p>

<pre><code class="css">.regular_font {
  font-size: 14px;
}

.big_font {
  font-size: 28px;
}

.med_font {
  font-size: 21px;
}

.small_font {
  font-size: 7px;
}
</code></pre>

<p>The <code>regular_font</code> class is the parent type, from which the three other classes will inherit. This code is perfectly fine, but imagine that you need six different font sizes or, for a larger app, ten or twenty. And what if you decided at the last minute that you wanted to make the parent element 16px, rather than 14px? Since pixel values don&rsquo;t inherit, you&rsquo;d have to go back and change <em>every single font size</em> to make all the styling to scale. No bueno, amirite?</p>

<p>The same styling could be rewritten using ems, like so:</p>

<pre><code class="css">.regular_font {
  font-size: 1.0em;
}

.big_font {
  font-size: 2.0em;
}

.med_font {
  font-size: 1.5em;
}

.small_font {
  font-size: 0.5em;
}
</code></pre>

<p>All of the font sizes now inherit from their parent element, which means that they will scale (think perecentages) depending on the size of the parent element. If you wanted to change the styling of all these font sizes, you&rsquo;d only actually have to change the parent element. Muy bueno, si?</p>

<h2>Okay, Okay &ndash; but what&rsquo;s this rem nonsense?</h2>

<p>Rems are almost the same as ems, except that there&rsquo;s no parent element that&rsquo;s defined. Instead, all the font sizes are based on the root <code>html</code> element. Don&rsquo;t freak out &ndash; all this really means is that you define a font size on the html element, and then all other elements will scale in font size relative to that.</p>

<p>In this example, the <code>.small_font</code> class inherits directly from the <code>html</code> parent element:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">html</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">1.0em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.small_font</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>But, but&hellip;I&rsquo;m really bad at math!</h2>

<p>Don&rsquo;t worry: there&rsquo;s an app for that. More specifically, a website that helps you calculate your ems. You can head on over to <a href="http://pxtoem.com/">PXtoEm.com</a>, and play around with pixels and ems and become a styling wizard.</p>

<p>Now, GO FORTH and style away!</p>

<iframe src="//giphy.com/embed/f0SFw1gXlmkc8" width="480" height="564" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>Ems are relative units of measurement, and pixels are not. Rems are basically just like ems, except that they inherit from the <code>html</code> element directly.</li>
<li>You don&rsquo;t have to use ems, but they can be helpful. A good way to start is by using pixels in development, and then assess whether your application actually <em>needs</em> to be responsive before heading over into em territory.</li>
<li>For more clarity on <strong>ems vs rems</strong>, check out <a href="https://j.eremy.net/confused-about-rem-and-em/">Jeremy Church&rsquo;s awesome post</a> on exactly that.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tidying Up Those Views: Using Decorators in Rails]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/01/13/tidying-up-those-views-using-decorators-in-rails/"/>
    <updated>2015-01-13T22:53:10-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/01/13/tidying-up-those-views-using-decorators-in-rails</id>
    <content type="html"><![CDATA[<p>Last week, I had my first full-day technical interview. It was a thrilling experience, and so much more fun than I expected. Part of that was because I viewed the whole experience not as an evaluation, but rather an opportunity to learn as much as I could from experienced developers. I also knew that, irrespective of whether I did well or not, I&rsquo;d learn some new technologies and tricks. And boy, was that the truth.</p>

<p>I left the interview with a long list of things I&rsquo;d never heard of (<em>why hello, blog posts for the next five Tuesdays!</em>), one of which included the use of decorators in Rails. I was actually kind of surprised that I had never encountered decorators while building my own Rails apps, but it turns out that these are actually pretty advanced topics and there&rsquo;s a good amount of <a href="https://bibwild.wordpress.com/2012/12/19/the-simplest-rails-decorator-implementation-that-just-might-work/">debate on how and when to use decorators</a>, and <a href="http://thepugautomatic.com/2014/03/draper/">whether or not they&rsquo;re actually useful</a>.</p>

<p>But hey, none these discussions apply or make any sense unless you know <em>what</em> a decorator actually is. So, let&rsquo;s find out!</p>

<!-- more -->


<p></p>

<p>It&rsquo;s a well-known fact that your Rails model should be fat, and your controllers should be skinny. But what about your views? Well, there are varying schools of thought on the MVC framework and how it should function. Steve Klabnik <a href="http://blog.steveklabnik.com/posts/2011-12-30-active-record-considered-harmful">argued that views should have no logic</a>, stating that otherwise &ldquo;They&rsquo;re hard to test, they&rsquo;re hard to read, and it&rsquo;s not just a slippery slope, but a steep one. Things go downhill rapidly.&rdquo;</p>

<p>I really liked the way that John Otander described how views should function in <a href="http://johnotander.com/rails/2014/03/07/decorators-on-rails/">his blog post on decorators</a>:</p>

<blockquote><p>&ldquo;Your views should be stupid. I like to use the analogy that views should read similarly to a shopping list. There shouldn&rsquo;t be any complexity or logic.&rdquo;</p></blockquote>

<p>I decided to look back at <a href="https://flatiron-cabbie.herokuapp.com/">Cabbie</a>, one of my first projects, and check out the shape of my own views. This app basically was a review system (think Yelp) for New York City cab drivers. We had models such as Users, Drivers, Reviews, etc.</p>

<p>Here&rsquo;s a taste of our driver show page:</p>

<p>&#8220;`erb</p>

<div class="driver-info">
  <%= @driver.medallion_number %>
  <% if @driver.medallion_number.length == 4 %>
    Medallion Number: <%= @driver.medallion_number %>
  <% else %>
    License Number: <%= @driver.medallion_number %>
  <% end %>
</div>


<p>&#8220;`</p>

<iframe src="//giphy.com/embed/jrK9MW7x3GkOk" width="480" height="199" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>That&rsquo;s pretty much the face I made when I looked at this code with a fresh set of eyes. This is one tiny little snippet of code, but imagine many more conditionals and much more logic in this view, and you get the idea. Not a pretty picture.</p>

<p>A couple things seemed problematic about this code:</p>

<ol>
<li>The first problem was that the view had to do the logic of figuring out whether a driver had a four-digit medallion number (NYC taxi) or a longer medallion number (an Uber driver). How could we fix this? Well, we could abstract this into a method in the class.</li>
<li>The second problem: why is it the <code>Driver</code> object&rsquo;s job to keep track of this? Do we really need a helper method in this case? All we really need this logic for is in rendering the view. We could make it its own class that inherits from the Driver class, maybe?</li>
<li>Ok, the third problem: we know what we want &ndash; a <code>Driver</code> object that has some special functionality when it comes to presenting it in the view. But how do we get it? We want to extend the behavior of the <code>Driver</code> class purely for decorative purposes. Sounds like a job for a <strong>decorator</strong>!</li>
</ol>


<p>So, what is a decorator, you might ask? Well, firstly, it&rsquo;s actually known as the <strong>decorator pattern</strong>. An aspect of object-oriented programming, decorators allow you to add functionality to an object, but also retains all the other methods that belong to that object&rsquo;s class. It&rsquo;s a great tool to use when you want to implement and/or encapsulate certain methods that are only used in the view, and yet still have access to all the other properties of that object.</p>

<p>The best way to learn what a decorator does is to try and use it yourself and see what happens. I implemented my decorator on my Cabbie app, using the <a href="https://github.com/drapergem/draper">Draper gem</a>.</p>

<p>First, you&rsquo;ll want to make sure you add <code>gem 'draper'</code> to your Gemfile.</p>

<p>Next, you&rsquo;ll want to generate the decorator for whatever object you want to &lsquo;decorate&rsquo;. In my case, I wanted to implement it on the driver object, so I typed <code>rails generate decorator Driver</code> into my terminal.</p>

<p>Then, add <code>.decorate</code> to your object in the appropriate controller. Here&rsquo;s how I did it in my <code>DriversController</code>:</p>

<pre><code class="ruby">class DriversController &lt; ApplicationController

  def show
    @driver = Driver.find(params[:id]).decorate
  end

  def search
    @driver = Driver.find_by(:medallion_number =&gt; params[:medallion_number].upcase).decorate
  end

end
</code></pre>

<p>After generating your decorator, you&rsquo;ll notice that there&rsquo;s a new directory in your <code>/app</code> file called <code>decorators</code>. Nothing to be scared of here: it&rsquo;s just a class that inherits from the Draper Decorator gem. Here&rsquo;s where you&rsquo;ll add any additonal functionality you want your &lsquo;decorated&rsquo; object to have.</p>

<p>In my case, I wanted to abstract away the Driver&rsquo;s medallion/license number away and encapsulate it into a method. I created an <code>id_number</code> method in my decorator file:</p>

<pre><code class="ruby">class DriverDecorator &lt; Draper::Decorator
  delegate_all

  def id_number
    if medallion_number.length == 4
      "Medallion Number: #{medallion_number}"
    else
      "License Number: #{medallion_number}"
    end
  end

end
</code></pre>

<p>Okay, you still with me? Here&rsquo;s the satisfying part. Cut out all that ridiculous erb from your view &ndash; we don&rsquo;t need that anymore! Instead, we&rsquo;ll just call on the decorator method that we wrote for exactly this purpose. Ready? Okay. Let&rsquo;s do this:</p>

<p>&#8220;`erb</p>

<div class="driver-info">
  <%= @driver.id_number %>
</div>


<p>&#8220;`</p>

<p>LOOK. AT. THAT. No iterations. No <code>if</code>/<code>elsif</code>/<code>end</code> keywords. One method, being called on exactly one object. No logic at all. You can read this and know exactly what we&rsquo;re trying to render. <em>Beautiful</em>.</p>

<p>As lovely as this looks, it&rsquo;s also important to keep in mind that this is an advanced topic and not always necessary. Only use decorators if they&rsquo;ll actually clean up your code and be helpful.</p>

<p>And on that note, there&rsquo;s only one thing left to do: Get tidying, kids!</p>

<iframe src="//giphy.com/embed/s90QFDMh0RAIg" width="480" height="269" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>Using a decorator isn&rsquo;t always the right answer. Make sure you&rsquo;re comfortable with the MVC framework and that you really need to use a decorator before you go about implementing one.</li>
<li>If you want a more in-depth introduction to presenters and decorators, check out <a href="https://www.youtube.com/watch?v=xf7i44HJ_1o">this RailsConf presentation by Mike Moore</a>.</li>
<li>If this is still confusing, read more code examples; there are lots of <a href="http://robots.thoughtbot.com/evaluating-alternative-decorator-implementations-in">really</a> <a href="https://bibwild.wordpress.com/2012/12/19/the-simplest-rails-decorator-implementation-that-just-might-work/">good</a> <a href="http://robots.thoughtbot.com/tidy-views-and-beyond-with-decorators">blog</a> <a href="http://johnotander.com/rails/2014/03/07/decorators-on-rails/">posts</a> that implement decorators.</li>
</ul>

]]></content>
  </entry>
  
</feed>
