<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Words and Code]]></title>
  <link href="http://vaidehijoshi.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://vaidehijoshi.github.io/"/>
  <updated>2015-02-16T20:58:04-05:00</updated>
  <id>http://vaidehijoshi.github.io/</id>
  <author>
    <name><![CDATA[Vaidehi Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Time: The Black Sheep of the Programming Family]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/02/17/time-the-black-sheep-of-the-programming-family/"/>
    <updated>2015-02-17T08:30:24-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/02/17/time-the-black-sheep-of-the-programming-family</id>
    <content type="html"><![CDATA[<iframe src="//giphy.com/embed/FHuIOZoauNXXO" width="480" height="480" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>No matter where you&rsquo;re from, what programming language you prefer, or which JavaScript framework you&rsquo;re committed to, I think you&rsquo;ll agree with me on one thing: time is a bitch. And no, I don&rsquo;t mean the wrinkles on your forehead kind of time (although that sucks too); I&rsquo;m talking about time as a programming concept.</p>

<p>I mean, you create some migrations, build some models, make some API calls, but then time shows up and brings down the party. I happened to learn all about programming&rsquo;s royal pain in the ass while working with the <a href="http://instagram.com/developer/">Instagram API</a> last week. After I finally got my code working, I took a look at my JSON response and saw this strange creature:
<code>
"created_time": "1423694433"
</code></p>

<p>Yeah, I didn&rsquo;t know what that was either. So I went down the rabbit hole and learned about all the different things there are to know about dealing with time in your Rails applications. So save yourself some time (HAHA get it, get it?) and get the lowdown below.</p>

<!-- more -->


<h2>In The Beginning, It Was&hellip;1970?</h2>

<p>Okay, so you know that weird JSON response I got? The one that looked like this crazysauce: <code>"1423694433"</code>.</p>

<p>Well, believe it or not, that&rsquo;s not just a random number &ndash; it&rsquo;s a representation of time. When I first saw this in my API reponse, I knew that this definitely was neither a typical Ruby <code>Time</code> object, nor something I&rsquo;d ever seen in any of the databases of my Rails applications (which usually uses the <code>datetime</code> format).</p>

<p>So, I asked the interwebz for help. It turns out that this format is something called <strong>Unix time</strong> (also sometimes referred to as POSIX time or Epoch time). Unix time is short for the &ldquo;Unix Epoch&rdquo;, which is what we refer to when we use <a href="http://en.wikipedia.org/wiki/Unix_time">Unix time formats</a>. Basically what you need to know is this: when the first computer turned on at 00:00:00 Coordinated Universal Time (UTC) on Thursday, January 1st, 1970, time officially began. I mean, time just <em>started</em>. The computer turned on and BOOM! It just started counting.</p>

<p>If you&rsquo;ve ever played around in irb, you&rsquo;ve probably used this method to figure out what time it is:
<code>
â™¥ irb
2.1.2 :001 &gt; Time.now
 =&gt; 2015-02-16 18:29:23 -0500
</code>
But that&rsquo;s just one format of dealing with time. Want to know what time it is in the Unix Epoch? Simply apply the ever-handy <code>to_i</code> method:
<code>
2.1.2 :002 &gt; Time.now.to_i
 =&gt; 1424129416
</code>
And what if you want to convert a Unix timestamp (like the one in my JSON response) back to a Ruby <code>Time</code> object? Just use the <code>Time.at</code> method:
<code>
2.1.2 :003 &gt; Time.at(1423694433)
 =&gt; 2015-02-11 17:40:33 -0500
</code></p>

<p>Okay, okay &ndash; but what about all the stuff that happened before 1970? How do we account for that? I&rsquo;ll tell you how: NEGATIVE. NUMBERS.
<code>
2.1.2 :003 &gt; Time.at('-1423694433'.to_i)
 =&gt; 1924-11-19 20:19:27 -0500
</code>
Pretty sweet, right? Don&rsquo;t worry, I&rsquo;m about to complicate it a bit further.</p>

<h2>Even More Types of Time</h2>

<p>Another very common format for handling Time is ISO8601. There have been a lot of arguments <a href="http://japhr.blogspot.com/2009/01/iso-8601-is-only-date-format.html">in favor of ISO8601</a>, its YYYY-MM-DD formatting being one of the foremost reasons for that debate. The ISO8601 format is also supported by various libraries, and can be sorted easily, which makes it the ideal candidate for your database.</p>

<p>An important thing to remember about using ISO8601 is that it&rsquo;s part of the Ruby Standard Library, which means you must require it. (If you missed my explanation on the difference between the Ruby Standard Library and the Core Library, head over to <a href="http://vaidehijoshi.github.io/blog/2015/02/10/money-makes-the-world-go-round-using-money-rails-and-bigdecimal/">last week&rsquo;s post</a> to catch up.)</p>

<p>But if we play with ISO8601 in irb, you&rsquo;ll notice something kind of strange:
<code>
2.1.2 :004 &gt; require 'time'
 =&gt; true
2.1.2 :005 &gt; Time.now.iso8601
 =&gt; "2015-02-16T19:09:38-05:00"
2.1.2 :006 &gt; Time.now.utc.iso8601
 =&gt; "2015-02-17T00:09:34Z"
</code>
See that <code>Z</code> at the end of the string? That&rsquo;s how the <code>UTC</code> timezone is represented in ISO8601, with the <code>Z</code> short for &ldquo;Zero&rdquo; time. It&rsquo;s also worth reminding ourselves that Unix timestamps are also set in the <code>UTC</code> timezone.</p>

<h2>Goddamn Time Zones</h2>

<iframe src="//giphy.com/embed/CsV1pnR9hYLuM" width="480" height="269" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Look man, I&rsquo;m not gonna lie to you: timezones will jack your shit up. Timezone bugs are <em>so</em> common, it&rsquo;s like they&rsquo;re just waiting there patiently, hoping that you&rsquo;ll make a mistake.</p>

<p>But you&rsquo;re a Rails developer &ndash; ain&rsquo;t no timezone gonna stop you! Instead, you&rsquo;re going to make your code defensive and subscribe to these best practices:</p>

<ol>
<li><p>Set your timezone in the <code>config/application.rb</code> file in your Rails app. Look for <code>config.time_zone</code>, and configure your time zone equal to that value. Rails will refer to that as your base timezone going forward, and ActiveRecord will convert between `UTC and your set timezone whenever you query.</p></li>
<li><p>Use the <code>in_time_zone</code> method to convert <code>Time</code> to your system&rsquo;s current set timezone. For example, <code>Time.now.in_time_zone("EST").iso8601</code>.</p></li>
<li><p>Use <code>Time.current</code> whenever you make an ActiveRecord query (ActiveRecord will convert <code>Time.current</code> and convert it to <code>UTC</code>: <code>Comment.where(["comments.published_at &gt; ?", Time.current])</code></p></li>
<li><p>DO NOT use <code>Time.now</code>! This returns <em>your</em> system&rsquo;s time, and ignores whatever timezone you configured for your Rails app. Instead, use numerical attributes and methods (such as <code>1.day.from_now</code> or <code>Date.current</code>), which rely on the timezone you configured in your <code>application.rb</code> to determine the return value.</p></li>
</ol>


<p>There are a lot of loopholes when it comes to dealing with Time zones. You can read more about them on <a href="http://www.elabs.se/blog/36-working-with-time-zones-in-ruby-on-rails">this super helpful post</a>.</p>

<h2>Time: Annoying, But Also&hellip;Awesome?</h2>

<p>Ok, don&rsquo;t get me wrong &ndash; time makes our lives miserable as developers. But it also presents some pretty epic challenges, which also makes our jobs interesting! (Look, I&rsquo;m trying to point out the silver lining here.)</p>

<p>For example, <strong>leap seconds</strong>. Yes, really &ndash; it&rsquo;s a thing. <a href="http://en.wikipedia.org/wiki/Leap_second">Leap seconds</a> occur 1-2 times a year, on either June 30 and/or December 31st. They&rsquo;re necessary in order to keep the Earth&rsquo;s time of day close enough to the Sun&rsquo;s mean time. But, how do you account for this in programs? Well, Google actually does something pretty cool: instead of adding one second, Google&rsquo;s servers implement &ldquo;leap smears&rdquo;, which extend the seconds surrounding a leap second by just a little bit &ndash; enough to account for an entire extra second! Side note: the next leap second is on June 30th of this year! I hope you&rsquo;re ready.</p>

<p>Another bizarre thing is <strong>Y2038</strong>. If this sounds reminiscient of Y2K, that&rsquo;s because it is. Essentially, <a href="http://www.y2038.com/">the 2038 problem</a> boils down to this: On January 19, 2038, Unix timestamps will stop working because of a 32-bit overflow. So, all of the millions of applications that use this time format will have to either reconfigure to 64-bit systems, or choose a new format to store dates and times. There&rsquo;s supposedly no universal solution to this, but hopefully someone will figure out a fix in the next 22 years.</p>

<p>Hopefully by that point, someone will have figured out how to get rid of time zones completely.</p>

<iframe src="//giphy.com/embed/f96k0qHpzmnPG" width="480" height="269" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>Unix timestamps and ISO8601 are both good formats for storing date and time in your database. Do a little research to decide <a href="http://stackoverflow.com/questions/15554586/timestamps-iso8601-vs-unix-timestamp">which of these formats</a> is the best tool for whatever job you&rsquo;re trying to accomplish.</li>
<li>Dealing with timezones is hard, but the <a href="http://danilenko.org/2012/7/6/rails_timezones/">Exhaustive Guide to Rails Time Zones</a> will save you hours of banging your head against the wall &ndash; well, for time-related things, at least.</li>
<li>Want to be a <code>Time</code> object superstar? Read <a href="https://unix4lyfe.org/time/?v=1">this post</a>, which was featured on HackerNews, and peruse the <a href="http://ruby-doc.org//core-2.2.0/Time.html">Ruby documentation</a> to get the skinny on all things time-related.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Money Makes the World Go Round: Using Money-Rails and BigDecimal]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/02/10/money-makes-the-world-go-round-using-money-rails-and-bigdecimal/"/>
    <updated>2015-02-10T08:07:09-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/02/10/money-makes-the-world-go-round-using-money-rails-and-bigdecimal</id>
    <content type="html"><![CDATA[<p><img src="http://s3-ec.buzzfed.com/static/enhanced/webdr02/2013/3/26/12/enhanced-buzz-19756-1364314697-15.jpg" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>Mo money, mo problems. This is especially the case when you&rsquo;re a new developer trying to onboard onto a huge eCommerce Rails application.</p>

<p>No, but really - money is such a pain in the ass to deal with as a programmer. So much logic and detail goes into accpeting a payment, processing a transaction, checking an order&rsquo;s status&hellip;and don&rsquo;t even get me <em>started</em> on shipping &ndash; seriously, I&rsquo;m saving the entire concept of shipping for another blog post.</p>

<p>But, at some point or another, you have to deal with other people&rsquo;s money. And you have to try and not screw it up, because apparently people really don&rsquo;t like that. So, how do you handle all those dolla dolla bills? Yup, you guessed it: with the <strong>money-rails library</strong> and Ruby&rsquo;s <strong>BigDecimal object</strong>.</p>

<!-- more -->


<h2>Get Dat Dough: Implementing Money-Rails</h2>

<p>Including the money-rails library is fairly simple: add <code>gem 'money-rails'</code> to your Gemfile and then <code>bundle</code> in your console.</p>

<p>But what exactly <em>is</em> this library, and how do you effectively use it? Well, that&rsquo;s another thing entirely.</p>

<p>The most important thing to note is that the <code>money-rails</code> library provides integration of the <code>money</code> gem for Rails applications. So, before you go around throwing about your dough every which way, here are a few things about the <code>money</code> gem to keep in mind:</p>

<ol>
<li>It gives you a <code>Money</code> class, and instances of this class (<code>Money</code> objects) contain all the information about a certain <em>amount</em> of money.  Provides a Money class which encapsulates all information about an certain amount of money, such as its value and its currency.</li>
<li>It provides you with a <code>Money::Currency</code> class, which contains all the information about a certain monetary unit. Instances of this class are how we will represent different currencies.</li>
<li>It includes APIs to exchange one kind of currency into another.</li>
<li>It represents money in <code>Integer</code> values, not <code>Float</code>, in order to avoid rounding errors.</li>
</ol>


<p>This last one is important, so try to remember it &ndash; we&rsquo;re going to come back to this in a bit.</p>

<h2>Make It Rain!</h2>

<p>Ok, time to get rich: let&rsquo;s make ourselves some money. Instantiating a <code>Money</code> object isn&rsquo;t too hard; simply create a new instance and pass it an amount and a currency:
<code>ruby
five_bucks = Money.new(500, "USD")  #=&gt; $5.00 USD
five_bucks.cents     #=&gt; 500
five_bucks.currency  #=&gt; Currency.new("USD")
</code></p>

<p>Notice that the amount must be passed in as cents, while the currency must be passed in as either a <code>String</code> or a <code>Money::Currency</code> object.</p>

<p>Money usually means math, so let&rsquo;s do some:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_money</span> <span class="o">=</span> <span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">USD</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">your_money</span> <span class="o">=</span> <span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1500</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">USD</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;my_money + your_money == Money.new(4500, &amp;ldquo;USD&amp;rdquo;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can also use the <code>parse</code> method, which takes in a symbol and number in a string format, and returns a <code>Money</code> object with the correct currency type:
<code>ruby
Money.parse("Â£60") == Money.new(60, "GBP")
</code></p>

<p>In addition to comparing currencies, you can create an access them as objects:
<code>ruby
currency = Money.new(60, "GBP").currency #=&gt; "Â£60.00 GBP"
currency.iso_code #=&gt; "GBP"
currency.name     #=&gt; "British Pound"
</code></p>

<p>You can access any information of a currency (which is, again, just a <code>Money</code> object), including its <code>name</code>, <code>iso_code</code>, <code>symbol</code>, and <code>delimiter</code>. And if you want to create a new currency, you&rsquo;d simply need to pass in the values as a hash into the <code>register</code> class method. There&rsquo;s also the <code>default_currency</code> class method, which does exactly what you think it does, and an <code>exchange_to</code> method, which can be super handy if you ever want to sell your products&hellip;well, basically anywhere.</p>

<p>So. You can make money now. Like, actually <em>create</em> it. Do you feel like a god yet? Okay good. Hold onto that feeling, because it&rsquo;s about to get a little more complicated.</p>

<iframe src="//giphy.com/embed/jUNAEqdvpQCcM" width="480" height="239" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>BigDecimal: Not Just Any Ol&#8217; Number</h2>

<p>When I was first playing around with this gem, I was much like you: young, naive, thoroughly amused by the fact that I could play with money in my console with (mostly) no consequences. And then I saw this:</p>

<pre><code class="ruby">#&lt;BigDecimal:7fbd6eab87f8,'0.8E1',9(36)&gt;
</code></pre>

<p><em>Um. What? Is that an association? An object? Is it even Ruby?</em></p>

<p>The answer to my questions were no, yes, and absolutely. Actually, that little guy up there is my new friend, <code>BigDecimal</code>. And by the time you finish reading this post, I think you&rsquo;re going to like him, too.</p>

<p>Okay, time for a quick exercise! Open up irb and type in: <code>1.01 - 1.00</code></p>

<pre><code>2.1.2 :001 &gt; 1.01 - 1.00
 =&gt; 0.010000000000000009 
2.1.2 :002 &gt; n = _
 =&gt; 0.010000000000000009 
2.1.2 :003 &gt; n &gt; 0.01
 =&gt; true 
</code></pre>

<p>Wait&hellip;Ruby thinks that the difference between <code>1.01</code> and <code>1.00</code> is greater than <code>0.01</code>? OH SHIT. DID WE BREAK RUBY?!</p>

<p>Nope, nope we did not. But, we <em>did</em> just discover the one true flaw of Ruby <code>Float</code>, which is that they can&rsquo;t store decimals very precisely. Apparently, the reason for this</a> is that floats are stored in a binary number format, which means that there&rsquo;s a lot of conversion from binary to decimal going on under the hood.</p>

<p>This probably doesn&rsquo;t seem all that important, but here&rsquo;s the thing: people really don&rsquo;t like it when you take their money. And when you use floats, you may very well be rounding up in cases when you really shouldn&rsquo;t be, which would result in some sort of numerical error.</p>

<p>Enter our new buddy, <code>BigDecimal</code>. We can do the exact same calculation with this object, but without the arbitrary rounding! If we try it out in irb, we&rsquo;ll get the number that we were originally expecting:</p>

<pre><code>2.1.2 :005 &gt; BigDecimal.new("1.01") - BigDecimal.new("1.00")
 =&gt; #&lt;BigDecimal:7fee2add1560,'0.1E-1',9(27)&gt; 
2.1.2 :006 &gt; n = _
 =&gt; #&lt;BigDecimal:7fee2add1560,'0.1E-1',9(27)&gt; 
2.1.2 :007 &gt; n.to_f
 =&gt; 0.01 
</code></pre>

<p>If you remember scientific notation from middle school, then you&rsquo;ll notice what&rsquo;s going on in <code>0.1E-1</code>, and how that converts to <code>0.01</code> when we called the <code>to_f</code> method on it. This takes more time, but it is far more accurate &ndash; something that&rsquo;s pretty important when it comes to the monies.</p>

<p>Remember earlier in the post when I told you to remember that the <code>money</code> gem uses <code>Integer</code> but not <code>Float</code>? Well, it also uses <code>BigDecimal</code> objects, for the same exact reason that we just discovered on our own.</p>

<h2>What Is Standard Cannot Be Core</h2>

<p>If your first reaction to reading this post was opening up irb and trying to make your own <code>BigDecimal</code> object, then you most certainly encountered this error:</p>

<pre><code>â™¥ irb
2.1.2 :001 &gt; BigDecimal.new
NameError: uninitialized constant BigDecimal
  from (irb):1
</code></pre>

<p>Before you freak out, let me assure you that I did not lie to you &ndash; <code>BigDecimal</code> most surely is a real thing. But it&rsquo;s not a core thing. What I mean by that is, <code>BigDecimal</code> is not part of the Ruby Core Library; it&rsquo;s actually part of the Ruby Standard Library.</p>

<p>If you&rsquo;re thinking to yourself, <em>Whut?! Ruby has two different libraries?</em>, you&rsquo;d be right. But even though both deal with Ruby objects, there&rsquo;s a fundamental difference between the two.</p>

<p>The <a href="http://www.ruby-doc.org/core-2.2.0/">Ruby Core Library</a> is what you use every day, including basic objects such as <code>String</code>, <code>Integer</code>, <code>Float</code>, <code>Array</code>, <code>Hash</code>, and many others. On the other hand, the objects in the <a href="http://www.ruby-doc.org/stdlib-2.2.0/">Ruby Standard Library</a> may seem a little less familiar. Unlike the Core Library, objects from the Standard Library have to be explicitly required. <code>BigDecimal</code> objects are part of the Standard Library, as are <code>Abbrev</code>, <code>Logger</code>, and <code>Matrix</code> objects.</p>

<p>The Standard Library is an extension of the Ruby language. You will always have access to the Core Library, but if you want to use an objec that exists outside of the Core Library, you&rsquo;ll need to specifically require it. So, if you want to play with <code>BigDecimal</code> in the console or use it in your application, you&rsquo;ll have to type this in to have access to the object: <code>require 'bigdecimal'</code>.</p>

<h2>More Bang For Your Buck</h2>

<p>When I first started reading about <code>BigDecimal</code>, I wondered why I had never run into this type of object before. How could I have missed it entirely? As a beginner, it may not sense to use this type of Ruby object at all, and it may very well slow you down. In fact, I think floats are the default object in use for a reason: they&rsquo;re much cheaper to use in memory, and can convert, lookup, and do arithmetic much faster than <code>BigDecimal</code>. Calculations on <code>BigDecimal</code> objects are much slower because they are objects, which take up <em>far</em> more space and memory. However, if you&rsquo;re actually dealing with currency values &ndash; building an ecommerce application, for example &ndash; <code>BigDecimal</code> still seems to be a clear winner to me.</p>

<p>The <code>money</code> gem and <code>money-rails</code> library provide a lot of flexibility when it comes to handling money in your application mostly because they create <code>Money</code> objects. I&rsquo;m a huge fan of object-oriented programming, and these libraries allow you to manipulate and access your currency with far more ease than if they were stored as simple integers, or even floats.</p>

<p>However, these resources are only the tip of the iceberg when it comes to dealing with money in your Rails application. Another awesome library is <a href="https://github.com/RubyMoney/monetize">monetize</a>, which allows you to convert different types of Ruby objects into <code>Money</code> objects. Once you get the basic structure and namespacing of these libraries, learning about new ones will be a piece of cake. Pretty soon, you&rsquo;ll be breaking the bank with all your knowledge about using money in Rails. Maybe you&rsquo;ll even end up like this guy:</p>

<iframe src="//giphy.com/embed/3Jhdg8Qro5kMo" width="480" height="295" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>The <code>money-rails</code> library allows you to create <code>Money</code> objects, including different currencies. Ruby <code>BigDecimal</code> objects round more accurately and are more precise than <code>Float</code> objects, making them more preferable when working with money.</li>
<li>Read more about the methods available to <code>BigDecimal</code> objects in the <a href="http://www.ruby-doc.org/stdlib-2.2.0/libdoc/bigdecimal/rdoc/index.html">Ruby documentation</a>, and check out all the cool stuff that the <code>money</code> gem can do over on <a href="http://rubymoney.github.io/money/">their website</a>.</li>
<li>Want to know more about what makes floats weird? Read <a href="http://www.rails-troubles.com/2011/12/ruby-float-quirks.html">this blog post</a>.</li>
</ul>

]]></content>
  </entry>
  
</feed>
