<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Words and Code]]></title>
  <link href="http://vaidehijoshi.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://vaidehijoshi.github.io/"/>
  <updated>2015-04-14T00:15:22-04:00</updated>
  <id>http://vaidehijoshi.github.io/</id>
  <author>
    <name><![CDATA[Vaidehi Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tackling Those Tests, Part 1: The How, When, and What of Rspec Testing]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/04/14/tackling-those-tests-part-1-the-how-when-and-what-of-rspec-testing/"/>
    <updated>2015-04-14T08:17:03-04:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/04/14/tackling-those-tests-part-1-the-how-when-and-what-of-rspec-testing</id>
    <content type="html"><![CDATA[<p><img src="http://www.datamation.com/imagesvr_ce/306/philosophy-geeks.jpg" style="display: block; margin-left: auto; margin-right: auto; width: 50%; height: 50%;"></p>

<p>Up until two weeks ago, I had one great fear: <em>testing</em>. And, to be clear, when I say &ldquo;fear&rdquo;, what I actually mean is sheer terror.</p>

<p>My test-writing anxiety stems from the fact that I&rsquo;ve never really had to do it before. I mean, I&rsquo;ve had to make tons of tests <em>pass</em>, which means that I read other people&rsquo;s tests all the time. Yet I&rsquo;ve somehow made it thus far in my coding career without ever having to write relatively complex tests of my own. But that all changed a few weeks ago, when I was forced to finally confront my fear of testing.</p>

<p>The thing about conquering fears, however, is that usually involves doing the very thing that you&rsquo;re afraid of. So, I spent the better portion of a week learning how and when to write tests, all while encountering a couple painful bugs along the way. It was not a fun week, but the good news is that I can write a fully-functioning test suite now! And now that I know more about testing, I actually find it kind of fun &ndash; so fun, in fact, that I&rsquo;m going to share it with you!</p>

<!--more-->


<h2>Ain&rsquo;t No Spec Like Rspec</h2>

<p>Before we get into the how and when of testing, we first need to setup our Rails application with <code>rspec</code>, a behavior-driven development framework built specifically for testing in Ruby.</p>

<p>We&rsquo;ll first want to add <code>rspec-rails</code> to our the development and test group in our <code>Gemfile</code>:</p>

<pre><code class="ruby">group :development, :test do
  gem 'rspec-rails'
end
</code></pre>

<p>Next, we&rsquo;ll run a quick <code>bundle install</code>, and then generate a <code>/spec</code> folder by running <code>rails generate rspec:install</code>. We now have access to a <code>rails_helper.rb</code> and <code>spec_helper.rb</code> file inside of our <code>/spec</code> directory.</p>

<p>Finally, we&rsquo;ll want to add files for everything that we want to test. But let&rsquo;s start simple for now and just test our <code>ReadingList</code> model. The path to this spec file should be <code>/spec/models/reading_list_spec.rb</code>, so we&rsquo;ll need to add a <code>models</code> directory and a <code>reading_list_spec.rb</code> file.</p>

<p>Once we&rsquo;ve done that, we can check that everything is setup properly by running our <code>rspec</code> command:</p>

<pre><code>â™¥ rspec
No examples found.


Finished in 0.00023 seconds (files took 0.08619 seconds to load)
0 examples, 0 failures
</code></pre>

<p>You know what needs to happen next, right? It&rsquo;s time for us to write some tests.</p>

<iframe src="//giphy.com/embed/nhj799TYbxG80" width="480" height="235" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Okay, I feel your pain. But I promise, we&rsquo;re going to get through this together.</p>

<h2>Knowing What To Test</h2>

<p>I&rsquo;ve found that the best way to start writing tests is by picking one section to work on first. Otherwise, it can just be so overwhelming and might make you want to give up completely. Let&rsquo;s take a look at what our <code>ReadingList</code> model:</p>

<pre><code class="ruby">class ReadingList &lt; ActiveRecord::Base
  belongs_to :user
  has_many :books

  attr_accessor :read

  def books_read
    books.where(read: true).count
  end

  def books_unread
    books.where(read: false).count
  end

  def percentage_read
    read = books_read.to_f
    unread = books_unread.to_f

    calculate_percentage(read, unread)
  end

  def calculate_percentage(read, unread)
    ((read / unread) * 100).round(2)
  end
end
</code></pre>

<p>Whoa, this seems like a lot. But fear not! Programming is nothing more than breaking down big problems into smaller, bite-sized pieces. And that&rsquo;s exactly what we&rsquo;ll do when writing these tests.</p>

<p>Let&rsquo;s look at the <code>percentage_read</code> method to start. This is the instance method that we&rsquo;ll actually want to call somewhere in our view. It uses the number of books marked <code>read</code> (which will always be a boolean <code>true</code> or <code>false</code> value), and calculates the <code>User</code>&rsquo;s reading progress on the list, returning a percentage.</p>

<p>But even though this is the method we want to test, a deeper look reveals that it actually relies and calls upon three other methods: <code>books_read</code>, <code>books_unread</code>, and <code>calculate_percentage</code>. This should be a big red flag, because it means that we need to test these three methods individually, first. The flow of our code is actually directing us in our test-writing process: we can decide which tests to write and in which order by looking at our method&rsquo;s dependencies.</p>

<p>So, let&rsquo;s hop to it:</p>

<ul>
<li>We&rsquo;ll start by first requiring <code>rails_helper</code> in our <code>reading_list_spec.rb</code>, and stubbing out our tests with a block:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rails_helper</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/li&gt;</span>
</span><span class='line'><span class="sr">&lt;/u</span><span class="n">l</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="no">ReadingList</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:model</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#percentage_read&amp;rdquo; do</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We can use a <code>describe</code> block to break up our tests into different sections. They will come in handy as our tests start to grow, and will make our test suite easier to read &ndash; not just when we come back to look at them later, but also when another developer digs through our code. The <code>#</code> symbol before our method name denotes that <code>percentage_read</code> is an instance method, another important distinction to make as we go about adding more tests.</p>

<ul>
<li>Next, we&rsquo;ll describe what our method <em>should</em> do by using <code>it</code> blocks</li>
</ul>


<pre><code class="ruby">  describe "#percentage_read" do
    it "finds the number of read books in a list" do
    end

    it "finds the number of unread books in a list" do
    end

    it "calculates a percentage when given two values" do
    end

    it "calculates the percentage of books read in a list" do
    end
  end
</code></pre>

<ul>
<li>Now we need to add some data &ndash; but not too much! We only want enough data to test the functionality of our method. Let&rsquo;s create a list with two books, one marked read and the other not marked read. We&rsquo;ll add this before our <code>describe</code> and <code>it</code> blocks:</li>
</ul>


<pre><code class="ruby">  let(:list) { ReadingList.create!(title: "Vaidehi's List" }
  let(:book1) { list.books.build(title: "A Game Of Thrones", read: true) }
  let(:book2) { list.books.build(title: "A Storm Of Swords", read: false) }
</code></pre>

<p>Wait, what&rsquo;s that <code>let</code> doing in there? The answer is: something magical! It creates an instance of <code>ReadingList</code> and makes a reference to it called <code>list</code>, which is then accessible to us in each of our <code>it</code> blocks. The <code>let</code> syntax is <a href="http://www.reddit.com/r/ruby/comments/2bcz12/newbie_to_rspec_why_use_let_instead_of_a_local/">an alternative</a> to creating local variables inside <em>every single</em> one of our <code>it</code> blocks.</p>

<ul>
<li>Finally, we&rsquo;ll add some expectations for our model&rsquo;s behavior when each method is called. Our finished test suite now looks like this:</li>
</ul>


<pre><code class="ruby">RSpec.describe ReadingList, :type =&gt; :model do
  let(:list) { ReadingList.create!(title: "Vaidehi's List" }
  let(:book1) { list.books.build(title: "A Game Of Thrones", read: true) }
  let(:book2) { list.books.build(title: "A Storm Of Swords", read: false) }

  describe "#percentage_read" do
    it "finds the number of read books in a list" do
      expect(list.books_read).to eq(1)
    end

    it "finds the number of unread books in a list" do
      expect(list.books_unread).to eq(1)
    end

    it "calculates a percentage when given two values" do
      expect(list.calculate_percentage(3.0, 4.0)).to eq(75.00)
    end

    it "calculates the percentage of books read in a list" do
      expect(list.percentage_read).to eq(50.00)
    end
  end
end
</code></pre>

<p>Each one of our tests is just a single line, specifying our exact expectations! Pretty awesome, right? This makes for relatively DRY code, which is pretty easy to understand.</p>

<h2>Testing Your Assumptions</h2>

<p>Now that we know <em>how</em> to write tests, it&rsquo;s time to address the question of <em>when</em> and <em>what</em> to test. Here&rsquo;s a good rule of thumb that I adhere to: <strong>test your assumptions</strong>. Whenever we write code, we make a ton of assumptions. The problem with making assumptions, however, is that you forget or don&rsquo;t realize that you made them, and then they end up coming back to screw you.</p>

<p><img src="http://www.explainxkcd.com/wiki/images/e/e6/when_you_assume.png" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>In fact, even the tests we just wrote are based on a lot of assumptions. And there are a lot of things that we haven&rsquo;t considered. For example:</p>

<ol>
<li>Does the <code>read</code> attribute on a <code>ReadingList</code> object only accept a <code>boolean</code> value? What if someone tries to pass a non-boolean value as <code>read</code>?</li>
<li>What is the default value of the <code>read</code> attribute?</li>
<li>What if <code>read</code> is nil &ndash; what will break?</li>
<li>What if the return value of <code>books_unread</code> is <code>0</code>?</li>
</ol>


<p>Just FYI, I discovered the answer to number 4, which looks like this:</p>

<blockquote class="twitter-tweet tw-align-center" lang="en"><p>Uh oh&#8230;I did a bad thing: <a href="http://t.co/uFZEkyCPRl">pic.twitter.com/uFZEkyCPRl</a></p>&mdash; Vaidehi Joshi (@vaidehijoshi) <a href="https://twitter.com/vaidehijoshi/status/583994491570229249">April 3, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>This is all to say that we must write tests for behavior that <em>should</em> and <em>should not</em> occur. We&rsquo;d probably want to write validations to prevent <code>nil</code> values, and we&rsquo;d definitely want to raise an error whenever we try to divide by <code>0</code>. We aren&rsquo;t just testing for what we can see &ndash; we also need to test for things we can&rsquo;t see, and any edge cases that we can think of.</p>

<p>Learning the how, when, and what of testing is a process that comes with time and practice. The more tests you write, the better you&rsquo;ll get at testing. Of course, there are few tips and tricks of the testing trade that can very quickly and easily save you a lot of heartache.</p>

<p>Tune in again next Tuesday, when I&rsquo;ll delve into generating fixtures for test data using FactoryGirl &ndash; a trick that&rsquo;s going to make your testing life so much easier.</p>

<h2>tl;dr?</h2>

<ul>
<li>All <code>rspec</code> tests have an <code>it</code> block, which describes what behavior is expected. This block should never be too big, and contains an assertion of what expected value should be returned.</li>
<li>The <code>let</code> syntax allows for lazy evaluation and keeps you from having to create a new instance of an object inside of every single <code>it</code> block. Check out more on the <code>let</code> and <code>let!</code> helper methods over on <a href="http://stackoverflow.com/questions/17407733/trouble-differentiating-rspecs-let-vs-let">this Stack Overflow answer</a> or on <a href="https://www.relishapp.com/rspec/rspec-core/v/2-5/docs/helper-methods/let-and-let">this blog post</a>.</li>
<li>Use <code>describe</code> blocks to divide up your tests into sections, based on functionality and code cohesion. You can also use <code>context</code> blocks to assert different scenarios that could occur during one method call. Read about the <a href="http://lmws.net/describe-vs-context-in-rspec">difference between describe and context</a>.</li>
<li>Find out more about different rspec testing conventions at <a href="http://betterspecs.org/">Better Specs</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delegating All of the Things With Ruby Forwardable]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/03/31/delegating-all-of-the-things-with-ruby-forwardable/"/>
    <updated>2015-03-31T08:35:27-04:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/03/31/delegating-all-of-the-things-with-ruby-forwardable</id>
    <content type="html"><![CDATA[<p><img src="http://assets.amuniversal.com/77c6dce06d5c01301d80001dd8b71c47" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>It was the best of times. It was the worst of times. It was&hellip;refactoring time! Well it was for me yesterday, at least.</p>

<p>Refactoring your own code has a great payoff at the end, but boy, does it take some work to get there. Something I&rsquo;ve noticed about my own code recently is that I&rsquo;m now able to know that something needs to be refactored pretty easily. I&rsquo;ve been having a lot of gut feelings about parts of my code that just <em>feel</em> wrong, inefficient, and repetitive. The problem is, even though I know where my code is weak, I don&rsquo;t usually know <em>how</em> to go about making my code better.</p>

<p>And this is where making effective use of resources (read: The Art Of Effective Googling) comes quite in handy. Yesterday, however, I used even better resource &ndash; a more experienced developer! We took a look at my code and came up with some ways I could refactor it. I learned about a pretty interesting module that could save me lines of code and keep my application <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>. And now I get to share it with you! This module is called <a href="http://ruby-doc.org/stdlib-2.0/libdoc/forwardable/rdoc/Forwardable.html">Forwardable</a>, and trust me when I say that it&rsquo;s going to make you want to delegate all the things.</p>

<!--more-->


<h2>Infatuation With Delegation</h2>

<p>Before we even get to Ruby&rsquo;s Forwardable module, let&rsquo;s first make sure we understand delegation. So, <em>whut</em> exactly is delegation? It&rsquo;s probably exactly what you imagine it to be. In plain English, when you delegate something to someone else, you divide up responsibilities amongst yourselves. For example, if I had someone to delegate all these blog posts to, I wouldn&rsquo;t have to write all of them myself! But I digress; back to programming.</p>

<p>Delegation in programming is not too different. When an object has a lot of responsibilities and things to do, it&rsquo;s generally easier to give some of those responsibilities to another object &ndash; a &ldquo;helper&rdquo; object &ndash; to avoid repetition and keep things working efficiently. Let&rsquo;s put this in some technical context for a hot minute: we can use a technique called <strong>encapsulation</strong> to pack a bunch of functionality into a single object&rsquo;s class and instance methods.</p>

<iframe src="//giphy.com/embed/UOpdmwKA7la0g" width="480" height="207" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>Ok, maybe you&rsquo;re not a fan of technical jargon. Maybe you&rsquo;d much rather prefer a real-life example of delegation? Alright, here you are:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sku</span>
</span><span class='line'>    <span class="c1"># Returns a sku specific to a</span>
</span><span class='line'>    <span class="c1"># particular instance of a product.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Book &amp;lt;&amp;lt; Product</span>
</span><span class='line'><span class="sr">  def author</span>
</span><span class='line'><span class="sr">    # Returns an Author object</span>
</span><span class='line'><span class="sr">    # associated with that book.</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="no">Yup</span><span class="p">,</span> <span class="n">that</span><span class="s1">&#39;s right. Class inheritance, a concept I&#39;</span><span class="n">ve</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://vaidehijoshi.github.io/blog/2015/02/24/class-inheritance-part-2-singletons-and-eigens-oh-my/&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">written</span> <span class="n">about</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://vaidehijoshi.github.io/blog/2014/10/16/class-inheritance-part-1/&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">a</span> <span class="n">couple</span> <span class="n">times</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">that</span> <span class="n">you</span><span class="s1">&#39;re probably pretty familiar with at this point, is a type of delegation. </span>
</span><span class='line'>
</span><span class='line'><span class="s1">Since a `Book` object inherits from a `Product` object, it has both an `author` method an a `sku` method. When you ask a `Book` for its `sku`, it first looks in the `Book` class, and when it doesn&#39;</span><span class="n">t</span> <span class="n">find</span> <span class="n">the</span> <span class="nb">method</span> <span class="k">in</span> <span class="n">there</span><span class="p">,</span> <span class="n">it</span> <span class="n">delegates</span> <span class="n">up</span> <span class="n">to</span> <span class="n">its</span> <span class="n">parent</span> <span class="n">class</span><span class="p">,</span> <span class="n">which</span> <span class="n">is</span> <span class="n">the</span> <span class="sb">`Product`</span> <span class="n">class</span><span class="o">.</span> <span class="no">Instead</span> <span class="n">of</span> <span class="n">making</span> <span class="n">the</span> <span class="sb">`Book`</span> <span class="n">responsible</span> <span class="k">for</span> <span class="n">all</span> <span class="n">the</span> <span class="n">functionality</span><span class="p">,</span> <span class="n">we</span><span class="s1">&#39;re using the `Product` object to take care of doing the logic and finding and returning the correct `sku`.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">See, you&#39;</span><span class="n">ve</span> <span class="n">already</span> <span class="n">worked</span> <span class="n">with</span> <span class="n">delegation!</span> <span class="no">Nothing</span> <span class="n">to</span> <span class="n">fear</span> <span class="n">here</span><span class="o">.</span> <span class="no">Now</span> <span class="n">let</span><span class="s1">&#39;s apply delegation to the Forwardable module.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">##Put Your Best Foot Forward</span>
</span><span class='line'>
</span><span class='line'><span class="s1">The best way to see Ruby Forwardable in action is by using it to actually refactor something. So, let&#39;</span><span class="n">s</span> <span class="n">take</span> <span class="n">a</span> <span class="n">look</span> <span class="n">at</span> <span class="n">what</span> <span class="n">our</span> <span class="n">raw</span> <span class="n">code</span> <span class="n">looks</span> <span class="n">like</span> <span class="n">right</span> <span class="ss">now</span><span class="p">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Book</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">language</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">English</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def year</span>
</span><span class='line'><span class="sr">    &amp;ldquo;1926&amp;rdquo;</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">author</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Ernest</span> <span class="no">Hemingway</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def title</span>
</span><span class='line'><span class="sr">    &amp;ldquo;The Sun Also Rises&amp;rdquo;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Product</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def initialize</span>
</span><span class='line'><span class="sr">    @book = Book.new</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">language</span>
</span><span class='line'>    <span class="vi">@book</span><span class="o">.</span><span class="n">language</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def year</span>
</span><span class='line'><span class="sr">    @book.year</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">author</span>
</span><span class='line'>    <span class="vi">@book</span><span class="o">.</span><span class="n">author</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def info</span>
</span><span class='line'><span class="sr">    @book.title</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Ugh. You&rsquo;ve probably already recoiled in horror. We have a <code>Book</code> object, which has a <code>language</code>, <code>year</code>, <code>author</code>, and <code>title</code>. And we have a <code>Product</code> object, which creates a new instance of a <code>Book</code> object, and then pretty much repeats all those methods again, using the instance it creates in the <code>initialize</code> method.</p>

<p>We already know this code is bad. But how to go about refactoring it? Use Forwardable, obvs, and do some forwarding! We&rsquo;ll delegate all the handling of information to the <code>Book</code> object. Our <code>Product</code> class doesn&rsquo;t need to worry about that!</p>

<p>Cool. So how do we do this? Like so:</p>

<ul>
<li>Let&rsquo;s first get rid of all of those methods in the <code>Product</code> class. We&rsquo;ll keep our <code>initialize</code> method, since that&rsquo;s how we&rsquo;ll create a new instance of <code>Book</code> in order to have something that we can call methods on. Now our class looks pretty empty:</li>
</ul>


<pre><code class="ruby">class Product 
  def initialize
    @book = Book.new
  end
end
</code></pre>

<ul>
<li>We&rsquo;ll add the Forwardable module, part of the Ruby standard library, by extending it in the first line of the class:</li>
</ul>


<pre><code class="ruby">extend Forwardable
</code></pre>

<ul>
<li>Now we&rsquo;ll specify the methods that we to call on a <code>Book</code> object <em>through</em> our <code>Product</code> class by using the <code>def_delegators</code> method, available through Forwardable:</li>
</ul>


<pre><code class="ruby">def_delegators :@book, :language, :year, :author
</code></pre>

<ul>
<li>We also want to get the title as well, but we want to rename that method as <code>info</code>. We can use <code>def_delegator</code> in order to do that:</li>
</ul>


<pre><code class="ruby">def_delegator :@book, :title, :info
</code></pre>

<p>Now we&rsquo;ve cut down these two classes a lot. Our refactored code looks like this:</p>

<pre><code class="ruby">class Book
  def language
    "English"
  end

  def year
    "1926"
  end

  def author
    "Ernest Hemingway"
  end

  def title
    "The Sun Also Rises"
  end
end

class Product
  extend Forwardable

  def_delegators :@book, :language, :year, :author
    def_delegator :@book, :title, :info

  def initialize
    @book = Book.new
  end
end
</code></pre>

<p>What can this refactored code actually do? Well, it lets us call <code>info</code> on a <code>Product</code> and get back the title of the book! And it allows us to call <code>year</code> directly on an instance of <code>Product</code>:
<code>
p = Product.new
 =&gt; #&lt;Product:0x007feb2183ea78 @book=#&lt;Book:0x007feb2183e9d8&gt;&gt;
p.year
 =&gt; "1926"
p.info
 =&gt; "The Sun Also Rises"
</code></p>

<p>But wait &ndash; we didn&rsquo;t write a <code>year</code> method in the <code>Product</code> class! Well, okay, we <em>kind</em> of did. We used <code>def_delegators</code>, to tell the <code>Product</code> class that it should respond to three methods: <code>language</code>, <code>author</code>, and <code>year</code>. And, we&rsquo;re telling the <code>Product</code> class to respond to each of these methods by calling it on an instance of <code>@book</code>.</p>

<p>And how did we rewrite that <code>title</code> method, exactly? We used <code>def_delegator</code> (singular, not plural!) to tell the <code>Product</code> class to respond to a method called <code>info</code> by calling <code>title</code> on <code>@book</code>. The reason that this works is only because we already have a <code>title</code> method defined on all instances of the <code>Book</code> class.</p>

<h2>Delegate Like You Mean It</h2>

<p>Using the Forwardable module comes in handy not just for refactoring, but also for your initial structuring of an application. Anytime you have an object handling lots of functionality, think about whether you can encapsulate that functionality into another class, and delegate the methods that aren&rsquo;t directly required into that &ldquo;helper&rdquo; class.</p>

<p>There are some great blog posts with examples of how to use the Forwardable module effectively. Here&rsquo;s an implementation on a Reading List class (think Goodreads):
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ReadingList</span>
</span><span class='line'>    <span class="kp">extend</span> <span class="no">Forwardable</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def_delegators :@books, :map, :size, :&amp;lt;&amp;lt;, :shuffle</span>
</span><span class='line'><span class="sr">def_delegator :@books, :shift, :remove_book</span>
</span><span class='line'><span class="sr">def_delegator :@books, :push, :add_book</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def initialize</span>
</span><span class='line'><span class="sr">    @books = []</span>
</span><span class='line'><span class="sr">end      </span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There&rsquo;s some pretty bomb stuff happening in such few lines. The <code>ReadingList</code> class gets initialized with an empty array, which we save as an instance variable, <code>@books</code>. Then we&rsquo;ve also our <code>def_delegators</code>, which delegate <code>map</code>, <code>size</code>, <code>&lt;&lt;</code>, and <code>shuffle</code> to the <code>@books</code>. And we have two methods that we (kinda) wrote: <code>remove_book</code> and <code>add_book</code>.</p>

<p>That&rsquo;s a lot of stuff for 9 lines of code! So what can this do, exactly? Well, let&rsquo;s see our reading list in action:
<code>
vaidehis_list = ReadingList.new
 =&gt; #&lt;ReadingList:0x007feb21a6d0b0 @books=[]&gt;
vaidehis_list.add_book('For Whom The Bell Tolls')
 =&gt; ["For Whom The Bell Tolls"]
vaidehis_list.add_book('The Old Man And The Sea')
 =&gt; ["For Whom The Bell Tolls", "The Old Man And The Sea"]
 vaidehis_list.add_book('To Have And To Have Not')
 =&gt; ["For Whom The Bell Tolls", "The Old Man And The Sea", "To Have And To Have Not"]
vaidehis_list.size
 =&gt; 3
vaidehis_list.shuffle
 =&gt; ["For Whom The Bell Tolls", "To Have And To Have Not", "The Old Man And The Sea"]
vaidehis_list.remove_book
 =&gt; "For Whom The Bell Tolls"
vaidehis_list.size
 =&gt;
</code></p>

<p><em>Dayummmmm</em>. Pretty sweet, right? We get to call all these methods directly on our <code>ReadingList</code> class! But what are they actually getting called on? Well, by using <code>def_delegators</code> and <code>def_delegator</code>, we&rsquo;re telling our <code>ReadingList</code> class to call methods like <code>shift</code> and <code>shuffle</code> on our <code>@books</code> instance. And here&rsquo;s where it gets pretty cool: our <code>@books</code> variable is&hellip;an ARRAY.</p>

<p>Just in case you&rsquo;re not as enthused about this fact as I am, let me explain what this means. It means that we can have access to every single method available on an array instance. Just in case you&rsquo;re wondering, all instance of <code>Array</code>s have 113 methods available to them (not including the 54 methods available to all instance of <code>Object</code>)! All we&rsquo;d have to do is add a method (literally, you can choose any method available on an array) like <code>flat_map</code> to our <code>def_delegators</code> line, and tada! It&rsquo;s ours to use on our <code>ReadingList</code> object.</p>

<p>You can see how this can get pretty powerful, pretty fast. In just a few lines of code, we&rsquo;re exercising the functionality of an entire plain old ruby object (PORO), simply by delegating methods through Forwardable.</p>

<p>Okay, that was a lot of refactoring magic. I told you, right? Lots of effort, but lots of payoff! Now, if you&rsquo;ll excuse me, I apparently have some books to read.</p>

<iframe src="//giphy.com/embed/112iFz2Y2b1Pwc" width="480" height="270" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>Delegation is the idea that an object can delegate a task to an associated &ldquo;helper&rdquo; object.</li>
<li>The Forwardable module uses <code>def_delegators</code> to delegate methods to another Ruby object, and <code>def_delegator</code> to rename a method that&rsquo;s being delegated to another object.</li>
<li>For another example of this module, read this <a href="http://oneofthesedaysblog.com/ruby-day-4-forwardable">incredibly thorough</a> blog post on implementing Forwardable.</li>
<li>Curious about delegation patterns in Object-Oriented Programming? <a href="http://radar.oreilly.com/2014/02/delegation-patterns-in-ruby.html">This post</a> has gotcha covered.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bundle Up &amp; Let Your Objects Do the Freezing: Frozen Hashes]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/03/03/bundle-up-and-let-your-objects-do-the-freezing-frozen-hashes/"/>
    <updated>2015-03-03T08:43:04-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/03/03/bundle-up-and-let-your-objects-do-the-freezing-frozen-hashes</id>
    <content type="html"><![CDATA[<iframe src="//giphy.com/embed/b7pVN1KY8ycg0" width="480" height="213" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Snowmageddon. Snowpocalypse. The Deep Freeze of 2015. You can call it whatever you want, but we can all agree on one thing: it&rsquo;s so damn cold outside. In fact, it&rsquo;s so cold that I recently saw this error message while debugging a Postgres issue:
<code>RuntimeError: can't modify frozen Hash</code></p>

<p>My first thought was, naturally, <em>holy shit, even my hashes are frozen</em>. I did a little digging, and it turns out that we aren&rsquo;t the only ones susceptible to these chilly temperatures. Apparently, objects can also freeze!</p>

<p>So, in honor of the frozen tundra that we all seem to currently inhabit, I decided to explore the icy-cold depths of Rails frozen objects. Before you read on though, you should know: I&rsquo;m going to use only gifs from the Disney animated film, <em>Frozen</em> â€” don&rsquo;t say I didn&rsquo;t warn you.</p>

<!-- more -->


<h2>Objects As Cold As Ice</h2>

<p>First things first: what&rsquo;s a frozen object? Well, they&rsquo;re frozen, which means they can&rsquo;t change &ndash; they&rsquo;re immutable and cannot be modified. There are some objects in Ruby that are perpetually frozen, such as any <code>Fixnum</code>, <code>Bignum</code>, <code>Float</code>, and <code>Symbol</code> objects.</p>

<iframe src="//giphy.com/embed/Fjy5XItIvYjEQ" width="480" height="269" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>You&rsquo;ve probably worked with all of these objects before, but may not know that they&rsquo;re actually frozen! Don&rsquo;t believe me? Well, you can check for yourself. Just call the <code>frozen?</code> method on any object of this class:</p>

<pre><code>$ irb
2.2.0 :001 &gt; 1.frozen?
 =&gt; true
2.2.0 :002 &gt; a = :im_a_symbol
 =&gt; :im_a_symbol
2.2.0 :003 &gt; a.frozen?
 =&gt; true
2.2.0 :004 &gt; 3.14.frozen?
 =&gt; true
</code></pre>

<p>This kind of makes sense though, right? Imagine if I could just start rewriting values all over the damn place. I could set <code>1</code> equal to <code>nil</code> and make <code>2</code> equal <code>3</code>, and then we&rsquo;d really hit crazytown.</p>

<p>Frozen objects keep certain things secure and certain in Ruby (and also in Rails!) So, freezing objects is a&hellip;good thing? Well, yes. But also, no.</p>

<h2>The Freeze Method: A Cold Piece Of Work</h2>

<p>Just as there&rsquo;s a method to check whether an object is <code>frozen?</code> or not, there&rsquo;s also a method to freeze mutable objects and make them immutable called &ndash; you guessed it &ndash; <code>freeze</code>. This method is pretty simple: yuo just call it on an object in order to rpevent further modifications to said object. If you <em>do</em> try to modify the object after freezing it, you&rsquo;ll get a <code>RuntimeError</code>:
<code>
2.2.0 :005 &gt; x = {1 =&gt; 'a', 2 =&gt; 'b', 3 =&gt; 'c'}
 =&gt; {1=&gt;"a", 2=&gt;"b", 3=&gt;"c"}
2.2.0 :006 &gt; x.freeze
 =&gt; {1=&gt;"a", 2=&gt;"b", 3=&gt;"c"}
2.2.0 :007 &gt; x.frozen?
 =&gt; true
2.2.0 :008 &gt; x[1] = 'b'
RuntimeError: can't modify frozen Hash
</code></p>

<iframe src="//giphy.com/embed/oYKesMM459o4w" width="480" height="200" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>But before you get all Elsa on me and start freezing everything, you should know some things about how to use the <code>freeze</code> method as a responsible developer:</p>

<ol>
<li><p>First and foremost: don&rsquo;t try to call a <code>defrost</code> or <code>thaw</code> method, because there&rsquo;s no such thing. In fact, there is <em>absolutely no way</em> to unfreeze an object. It simply cannot be undone. So, proceed with great caution when freezing things. Or maybe just don&rsquo;t do it at all.</p></li>
<li><p>The <code>freeze</code> method operates on an object reference, not on a variable. Wait, whut? If this sounds like Ruby objects aren&rsquo;t actually being modified, but their references are instead, well&hellip;that&rsquo;s totally right.</p></li>
</ol>


<p>I really liked the way that Michael Morin explained this in <a href="http://ruby.about.com/od/qa/ss/Can-T-Modify-Frozen-String.htm">his post</a> on frozen objects:</p>

<blockquote><p>When you freeze a hash, it just freezes the references to the objects it already has, it doesn&rsquo;t actually freeze the objects themselves. The frozen hash won&rsquo;t know the difference here. This is an important thing to understand about freezing objects, it&rsquo;s not recursive. All freezing does is prevent the references the object holds from being modified.</p></blockquote>

<p>While we can&rsquo;t unfreeze &ldquo;frozen&rdquo; objects, this particular quality gives us a little bit leeway to get around the lack of a thaw method.</p>

<h2>Chill Out, But Don&rsquo;t Freeze</h2>

<p>There are a few different ways to change an immutable frozen object (which, hello, aren&rsquo;t actually frozen, just their references are). One thing you can do is create a duplicated object, which will <em>not</em> be frozen and therefore, completely mutable:
<code>
2.2.0 :009 &gt; x.dup
 =&gt; {1=&gt;"a", 2=&gt;"b", 3=&gt;"c"}
2.2.0 :010 &gt; y = _
 =&gt; {1=&gt;"a", 2=&gt;"b", 3=&gt;"c"}
2.2.0 :011 &gt; y.frozen?
 =&gt; false
2.2.0 :012 &gt; x.frozen?
 =&gt; true
2.2.0 :013 &gt; y[1] = 'b'
 =&gt; "b"
2.2.0 :014 &gt; y
 =&gt; {1=&gt;"b", 2=&gt;"b", 3=&gt;"c"}
</code></p>

<p>Keep in mind, however, that this only changes the data in the duplicated object, not the original one! So&hellip;what now? Well, since only the reference to an object is frozen, that means that you can modify the actual data inside of the frozen object:
<code>
2.2.0 :015 &gt; x[1] &lt;&lt; 'bc'
 =&gt; "ab"
2.2.0 :016 &gt; x
 =&gt; {1=&gt;"abc", 2=&gt;"b", 3=&gt;"c"}
2.2.0 :017 &gt; x.frozen?
 =&gt; true
</code></p>

<p>Weird, right!? Our <code>x</code> variable, which points to the <code>Hash</code> object, is still very much frozen. But, we can modify the data and values inside of the object itself. Since we don&rsquo;t want to make an actual copy of the variable, we can instead modify the objects held within that variable (in our case, we&rsquo;re directly modifying the <code>String</code> object, which is a the value of a key in this frozen Hash)</p>

<h2>Freezing Out Those Error Messages</h2>

<p>Cool, so this I guess this is a thing in Ruby. But wait &ndash; it&rsquo;s also a pretty important thing in Rails! Objects in Rails are infinitely more complicated than in Ruby, mostly because you&rsquo;re dealing with ActiveRecord and its methods. Whenever you&rsquo;re trying to delete an ActiveRecord object, you depend on the <code>destroy</code> method.</p>

<p>For example, I use this method in my bookstore app, and I have a <code>delete</code> action in my <code>BooksController</code> that contains code that looks something like this:
<code>ruby
@book = Book.find(1)
@book.destroy
</code></p>

<p>Now if I wanted to modfiy this book&rsquo;s type after I delete it, I&rsquo;d get an error:
<code>
[1] pry(main)&gt; @book.type = 'hardcover'
TypeError: can't modify frozen hash
</code></p>

<p>Why is this? Well, even though I deleted the object, it still exists in the <code>@book</code> variable, which still retains all the attributes of the object. Once I destroy the record, the object became frozen. Since the object&rsquo;s attributes hash is frozen, when I try to modify it, I get this error.</p>

<p>The <a href="http://api.rubyonrails.org/classes/ActiveRecord/Persistence.html#method-i-destroy">Rails documentation</a> explains how it implements the <code>freeze</code> method, stating that <code>destroy</code> method:</p>

<blockquote><p>Deletes the record in the database and freezes this instance to reflect that no changes should be made (since they can&rsquo;t be persisted).</p></blockquote>

<p>To avoid creating a <code>@book</code> object that&rsquo;s frozen and still hanging around for no apparent reason, I could instead implicitly delete the object in a single line. Either this:
<code>ruby
Book.find(1)destroy
</code>
or
<code>ruby
Book.destroy(1)
</code>
would work.</p>

<p>Alternatively, I could just use the <code>delete</code> method, which doesn&rsquo;t instantiate an object, but isntead directly removes the row from the database.</p>

<p>Frozen objects are in front of us everyday. Ruby actually uses the <code>freeze</code> method when you copy certain objects. According to <a href="http://rubylearning.com/satishtalim/mutable_and_immutable_objects.html">this post</a>, when you use a string as a key of a <code>Hash</code> object, the string is copied, frozen, and then that duplicated copy is used as the key of the hash. This is pretty cool because this means that even if the original string is modified, the duplicated one isn&rsquo;t affected because it has been frozen! The same goes for filenames: internal operations of an application rely on a frozen copy of a filename, rather than the original one.</p>

<p>Once you understand the functionality of <code>freeze</code>, it becomes a lot easier to understand those weird error messages. Soon, you&rsquo;ll no longer fear the ice, but instead bask in the sun. Or&hellip;something more poetic.</p>

<p>Anyways, here&rsquo;s a dancing snowman:</p>

<iframe src="//giphy.com/embed/N80v6XYayA5vG" width="480" height="213" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>You can use the <code>freeze</code> method to make mutable objects immutable. To check whether an object can be modified or not, use the <code>frozen?</code> method, which will return a boolean value.</li>
<li>Certain Ruby objects, such as integers, floats, and symbols, are always frozen and cannot be modified.</li>
<li>Someone made a <a href="https://github.com/zizkovrb/melt">melt gem</a> &ndash; for realsies!</li>
<li>Some people are <a href="http://m.onkey.org/ruby-i-don-t-like-3-object-freeze">not big fans</a> of the weird functionality of Ruby <code>freeze</code>. But it&rsquo;s still worth it to <a href="http://blog.adamstegman.com/activerecord-hangs-on-to-destroyed-relations.html">learn how it works</a>, especially since it can be <a href="http://blog.adamstegman.com/activerecord-hangs-on-to-destroyed-relations.html">super helpful</a> for <a href="http://www.devarticles.com/c/a/Ruby-on-Rails/Updating-and-Deleting-with-the-Active-Record/2/">debugging Rails apps</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class Inheritance: Part 2 (Singletons and Eigens, Oh My!)]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/02/24/class-inheritance-part-2-singletons-and-eigens-oh-my/"/>
    <updated>2015-02-24T08:13:49-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/02/24/class-inheritance-part-2-singletons-and-eigens-oh-my</id>
    <content type="html"><![CDATA[<p><em>This blog post is part of a series on Class Inheritance. Read Part 1 <a href="http://vaidehijoshi.github.io/blog/2014/10/16/class-inheritance/">here</a>.</em></p>

<p>I recently stumbled upon this line of code that totally floored me. I mean, I had to drop everything I was doing and do some serious Googling, my friends. Well, that and also I asked my fellow developers at work who are far more seasoned programmers than me.</p>

<p>Now, I&rsquo;m going to share this line of code with you, but you&rsquo;ve got to try not to totally freak out if you haven&rsquo;t seen it before. Are you ready? Ok, here we go:</p>

<pre><code class="ruby">class SomeObject
  class &lt;&lt; self
    def some_method
      "A string returned by some_method."
    end
  end
end
</code></pre>

<p>Are you with me? Did you make it past the second line? Do I need to call an ambulance? Well, if your reaction was anything like mine, you saw <code>class &lt;&lt; self</code> and experienced something akin to an aneurysm.</p>

<iframe src="//giphy.com/embed/ds8khI25lsR3y" width="480" height="255" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Ok, let&rsquo;s agree on one thing right here, right now: everything in Ruby is an object. No matter how crazy it&rsquo;s about to get, just remember that. In fact, it&rsquo;s worth repeating again: <em>Everything in Ruby is an object &ndash; <strong>even a class</strong>.</em></p>

<p>Got it? Okay, now let&rsquo;s figure what the hell that code means, exactly.</p>

<!-- more -->


<h2>Class Methods, Because Your Instances Should Never Be Too Greedy</h2>

<p>In order to understand the meaning behind <code>class &lt;&lt; self</code>, we first need to understand the <code>&lt;&lt; self</code> syntax. Let&rsquo;s recap a couple basics about class inheritance first:</p>

<ol>
<li>Classes can have two different types of methods: class methods, which can be called on a <code>Class</code> object, and instance methods, which can only be called on <em>instances</em> of a <code>Class</code> object.</li>
<li>There are multiple ways to create class methods:</li>
</ol>


<p>You can use <code>self</code> as the receiver of a method within a class, which is probably the most common way of defining a class method:
<code>ruby
class Book
  def self.type
    "paperback"
  end
end
</code>
You can also define a method on the class name (for example, class <code>Book</code>), which implies that the entire <code>Class Book</code> object can receive the <code>type</code> method:
<code>ruby
def Book.type
  "paperback"
end
</code>
But, you can also do this:
<code>ruby
class &lt;&lt; Book
  def type
    "paperback"
  end
end
</code>
And &ndash; wait for it &ndash; this:
<code>ruby
class Book
  class &lt;&lt; self
    def type
      "paperback"
    end
  end
end
</code></p>

<p>Okay, so that funky <code>class &lt;&lt; self</code> syntax is just another way of defining a class method? But&hellip;but how?</p>

<h2>One Method To Rule Them All</h2>

<p>So, we know that class methods are a good place to put all the behavior and functionality of <em>all instances</em> of that class. If you want all instances of your <code>Book</code> objects to have a title and an author, you&rsquo;d want that behavior to be put into the <code>Book</code> class, since all instances of Book will inherit from their parent class.</p>

<p>But, what if you wanted a particular instance of a <code>Book</code> to have a specific kind of functionality. Well, you definitely wouldn&rsquo;t want to define a method on the class, because it&rsquo;s only a particular instance that you care about. So why not define a method on that particular instance, then?</p>

<pre><code class="ruby">great_gatsby = Book.new
charlottes_web = Book.new

def charlottes_web.wilbur
  "Some Pig"
end

charlottes_web.type
# =&gt; "paperback"

charlottes_web.wilbur
# =&gt; "Some Pig"

great_gatsby.type
# =&gt; "paperback"

great_gatsby.wilbur
# =&gt; NoMethodError: undefined method `wilbur' for #&lt;Book:0x007fc8ebb01bc8&gt;
</code></pre>

<p>At first glance, nothing here seems all that weird, right? Both the books have access to the <code>type</code> class method, which we defined earlier, while only the <code>charlottes_web</code> <code>Book</code> object has access to the <code>wilbur</code> method. Ruby seems to know that the <code>wilbur</code> method is scoped only to this instance, but it also knows that this instance has other methods &ndash; class methods &ndash; that are also accessible to it. But how is this actually possible?</p>

<p>Well, the answer is for two reasons: <strong>singleton methods</strong> and Ruby&rsquo;s <strong>method lookup chain</strong>.</p>

<p>Singleton methods are methods defined on an object itself, rather than on an object&rsquo;s class. Ruby&rsquo;s method <a href="http://madebydna.com/images/posts/object_method_lookup.gif">lookup chain</a> is pretty intricate:</p>

<p><img src="http://madebydna.com/images/posts/object_method_lookup.gif" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>An object inherits from its class, and its class can inherit from many more objects, which will then inherit from <code>Object</code>, which inherits from the great grandma of all objects in Ruby: <code>BasicObject</code>. Remember: <em>everything in Ruby is an object &ndash; even a class.</em></p>

<p>So at this point, you&rsquo;re probably wondering what this has to do with class methods. Well, a lot, actually.</p>

<h2>A Class Of One&rsquo;s Own</h2>

<p>We can create all the singleton methods we want, but where do they all go? Not in the <code>Book</code> class, that&rsquo;s for sure. So where do we put them, exactly?</p>

<p>It turns out, an object&rsquo;s singleton methods all go into their own neat little class called an <strong>eigenclass</strong>, which is just another name for a singleton class. The word &ldquo;eigen&rdquo; comes from a German term meaning &ldquo;one&rsquo;s very own&rdquo;. I personally like to call it an eigenclass because it minimizes confusion between singleton methods and classes. Also, throwing down terms like <em>eigenclass</em> make you sound like a total badass.</p>

<p>Here&rsquo;s the cool thing about eigenclasses: they&rsquo;re totally hidden. I should warn you though, the thing that makes them cool is the very same thing that makes them complicated. Because they&rsquo;re hidden and anonymous, you obviously can&rsquo;t see them and so it&rsquo;s hard to figure out where in the method lookup path they are. Here&rsquo;s the trick, though: whenever you open up an eigenclass, you shift up the original class.</p>

<iframe src="//giphy.com/embed/jXMtxrFs292so" width="480" height="202" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>In my book example, the <code>charlottes_web</code> object inherits from the <code>Book</code> class. But when I created the <code>wilbur</code> method, I opened up the object&rsquo;s eigenclass, and shifted up the original <code>Book</code> class. Now, the <code>charlottes_web</code> object inherits from its eigenclass, which in turn inherits from the <code>Book</code> class. The <code>Book</code> class has now become the superclass of our object.</p>

<p>Okay, that was a lot. To recap, here&rsquo;s the most important stuff to know about the mysterious eigenclass:</p>

<ol>
<li>An eigenclass is an anonymous class that is created to hold an object&rsquo;s singleton methods.</li>
<li>The anonymous eigenclass then becomes the object&rsquo;s immediate class, which it inherits from.</li>
<li>The original class is re-designated as the superclass of the anonymous eigenclass.</li>
<li>But because eigenclasses are hidden, when you call <code>charlottes_web.class</code>, it will return <code>Book</code>.</li>
</ol>


<h2>Reveal Thyself, You Eigen, You!</h2>

<p>So, eigenclasses don&rsquo;t show themselves. Cool. Except not cool. Because I want to see it! Well, you can see it, but you have to do a little extra work to make the magic happen. Actually, all you have to do is add a method available to all Ruby <code>Object</code>s, like this:</p>

<pre><code class="ruby">class Object
  def eigenclass
    class &lt;&lt; self
    # This is what opens the eigenclass of the object that is the reciever of the eigenclass method

      self
      # Now we are in the scope of the eigenclass, and "self" is now the
      # eigenclass object. Since we are returning self, we will get to see what
      # the eigenclass actually looks like!

    end
  end
end
</code></pre>

<p>We open up the eigenclass of the object when we use the <code>class &lt;&lt; self</code> syntax. And once we open it up, we are in the scope of the eigenclass. Here, <code>self</code> is now the eigenclass object (everything in Ruby is an object!), and since we are returning <code>self</code>, we will get to see what the eigenclass actually looks like:</p>

<pre><code>charlottes_web.eigenclass
 =&gt; #&lt;Class:#&lt;Book:0x007fc8ebaf3c08&gt;&gt;
charlottes_web.eigenclass.class
 =&gt; Class
charlottes_web.eigenclass.superclass
 =&gt; Book
charlottes_web.eigenclass.superclass.superclass
 =&gt; Object
charlottes_web.eigenclass.superclass.superclass.superclass
 =&gt; BasicObject
charlottes_web.eigenclass.superclass.superclass.superclass.superclass
 =&gt; nil

charlottes_web.singleton_methods
 =&gt; [:wilbur]
charlottes_web.eigenclass.singleton_methods
 =&gt; [:type]
</code></pre>

<p>Interesting. So, the eigenclass of our <code>charlottes_web</code> object does look pretty anonymous, and you might not even notice its weirdness at first. But, it does clearly seem to be a <code>Class</code> object and, as we expected, was inserted into the method lookup chain right between the object and the <code>Book</code> class.</p>

<p>But if you look at the last two lines and their value, that&rsquo;s where stuff gets really interesting. The <code>wilbur</code> method, which we defined on a particular instance of an object, is a singleton method on only that object. The <code>type</code> method, however, lives in the <em>eigenclass</em> of that object.</p>

<p>Is it all coming together now? While the <code>wilbur</code> method could only be called on an instance, the <code>type</code> method can be called on an entire class. So, perhaps you&rsquo;re not not technically creating a class method, but more of an &ldquo;eigenclass class method&rdquo;. In fact, there actually is no such thing as a &ldquo;class method&rdquo; &ndash; you&rsquo;re actually inside of the eigenclass when you create that. But effectively, it&rsquo;s the same thing, because you can&rsquo;t see an eigenclass and it still inherits all the methods from a basic <code>Class</code> object.</p>

<h2>WAT</h2>

<iframe src="//giphy.com/embed/i9nkolRQgbN9C" width="480" height="362" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>If all of this was Greek to you, don&rsquo;t worry. This is just honestly really hard stuff. At the end of the day, all you <em>really</em> need to know is that <code>class &lt;&lt; self</code> is just another way of defining a class method. That and, <em>everything</em> in Ruby is an object.</p>

<p>There&rsquo;s plenty of debate about whether or not using the <code>class &lt;&lt; self</code> syntax is helpful or just confusing. Personally, I like to use it when I have a lot of class methods to define. It can keep your code clean and easy to read, and helps you avoid typing out <code>self.method</code> multiple times.</p>

<p>But, if DRYing out your code is more confusing to you than helpful, you should probably avoid it. It&rsquo;s more about personal preference than anything else. Find a style that works for you and try not to think too much about all the crazy anonymous classes spinning around your head. Try being the keyword here.</p>

<h2>tl;dr?</h2>

<ul>
<li>Technically speaking, there&rsquo;s actually no such thing as a <em>class method</em> in Ruby. You&rsquo;re always opening up the eigenclass/singleton class of an object whenever you define a class method. Keep in mind that there are many different syntaxes you can use in order to achieve this!</li>
<li>Curious about the <code>self.method</code> vs <code>class &lt;&lt; self</code> debate? Check out this <a href="http://stackoverflow.com/questions/10964081/class-self-vs-self-method-with-ruby-whats-better">thread on Stack Overflow</a>.</li>
<li>Read more about the <a href="http://stackoverflow.com/questions/23848667/ruby-method-lookup-path-for-an-object">method lookup path</a> to understand where Ruby looks for stuff.</li>
<li>Tons of good resources on this stuff <a href="http://madebydna.com/all/code/2011/06/24/eigenclasses-demystified.html">here</a> and <a href="http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/">here</a>. Oh, and <a href="http://ruby-metaprogramming.rubylearning.com/html/seeingMetaclassesClearly.html">here</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time: The Black Sheep of the Programming Family]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/02/17/time-the-black-sheep-of-the-programming-family/"/>
    <updated>2015-02-17T08:30:24-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/02/17/time-the-black-sheep-of-the-programming-family</id>
    <content type="html"><![CDATA[<iframe src="//giphy.com/embed/FHuIOZoauNXXO" width="480" height="480" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>No matter where you&rsquo;re from, what programming language you prefer, or which JavaScript framework you&rsquo;re committed to, I think you&rsquo;ll agree with me on one thing: time is a bitch. And no, I don&rsquo;t mean the wrinkles on your forehead kind of time (although that sucks too); I&rsquo;m talking about time as a programming concept.</p>

<p>I mean, you create some migrations, build some models, make some API calls, but then time shows up and brings down the party. I happened to learn all about programming&rsquo;s royal pain in the ass while working with the <a href="http://instagram.com/developer/">Instagram API</a> last week. After I finally got my code working, I took a look at my JSON response and saw this strange creature:
<code>
"created_time": "1423694433"
</code></p>

<p>Yeah, I didn&rsquo;t know what that was either. So I went down the rabbit hole and learned about all the different things there are to know about dealing with time in your Rails applications. So save yourself some time (HAHA get it, get it?) and get the lowdown below.</p>

<!-- more -->


<h2>In The Beginning, It Was&hellip;1970?</h2>

<p>Okay, so you know that weird JSON response I got? The one that looked like this crazysauce: <code>"1423694433"</code>.</p>

<p>Well, believe it or not, that&rsquo;s not just a random number &ndash; it&rsquo;s a representation of time. When I first saw this in my API reponse, I knew that this definitely was neither a typical Ruby <code>Time</code> object, nor something I&rsquo;d ever seen in any of the databases of my Rails applications (which usually uses the <code>datetime</code> format).</p>

<p>So, I asked the interwebz for help. It turns out that this format is something called <strong>Unix time</strong> (also sometimes referred to as POSIX time or Epoch time). Unix time is short for the &ldquo;Unix Epoch&rdquo;, which is what we refer to when we use <a href="http://en.wikipedia.org/wiki/Unix_time">Unix time formats</a>. Basically what you need to know is this: when the first computer turned on at 00:00:00 Coordinated Universal Time (UTC) on Thursday, January 1st, 1970, time officially began. I mean, time just <em>started</em>. The computer turned on and BOOM! It just started counting.</p>

<p>If you&rsquo;ve ever played around in irb, you&rsquo;ve probably used this method to figure out what time it is:
<code>
â™¥ irb
2.1.2 :001 &gt; Time.now
 =&gt; 2015-02-16 18:29:23 -0500
</code>
But that&rsquo;s just one format of dealing with time. Want to know what time it is in the Unix Epoch? Simply apply the ever-handy <code>to_i</code> method:
<code>
2.1.2 :002 &gt; Time.now.to_i
 =&gt; 1424129416
</code>
And what if you want to convert a Unix timestamp (like the one in my JSON response) back to a Ruby <code>Time</code> object? Just use the <code>Time.at</code> method:
<code>
2.1.2 :003 &gt; Time.at(1423694433)
 =&gt; 2015-02-11 17:40:33 -0500
</code></p>

<p>Okay, okay &ndash; but what about all the stuff that happened before 1970? How do we account for that? I&rsquo;ll tell you how: NEGATIVE. NUMBERS.
<code>
2.1.2 :003 &gt; Time.at('-1423694433'.to_i)
 =&gt; 1924-11-19 20:19:27 -0500
</code>
Pretty sweet, right? Don&rsquo;t worry; I&rsquo;m about to complicate it a bit further.</p>

<h2>Even More Types of Time</h2>

<p>Another very common format for handling Time is ISO8601. There have been a lot of arguments <a href="http://japhr.blogspot.com/2009/01/iso-8601-is-only-date-format.html">in favor of ISO8601</a>, its YYYY-MM-DD formatting being one of the foremost reasons for that debate. The ISO8601 format is also supported by various libraries, and can be sorted easily, which makes it the ideal candidate for your database.</p>

<p>An important thing to remember about using ISO8601 is that it&rsquo;s part of the Ruby Standard Library, which means you must require it. (If you missed my explanation on the difference between the Ruby Standard Library and the Core Library, head over to <a href="http://vaidehijoshi.github.io/blog/2015/02/10/money-makes-the-world-go-round-using-money-rails-and-bigdecimal/">last week&rsquo;s post</a> to catch up.)</p>

<p>But if we play with ISO8601 in irb, you&rsquo;ll notice something kind of strange:
<code>
2.1.2 :004 &gt; require 'time'
 =&gt; true
2.1.2 :005 &gt; Time.now.iso8601
 =&gt; "2015-02-16T19:09:38-05:00"
2.1.2 :006 &gt; Time.now.utc.iso8601
 =&gt; "2015-02-17T00:09:34Z"
</code>
See that <code>Z</code> at the end of the string? That&rsquo;s how the <code>UTC</code> time zone is represented in ISO8601, with the <code>Z</code> short for &ldquo;Zero&rdquo; time. It&rsquo;s also worth reminding ourselves that Unix timestamps are also set in the <code>UTC</code> time zone.</p>

<h2>Goddamn Time Zones</h2>

<iframe src="//giphy.com/embed/CsV1pnR9hYLuM" width="480" height="269" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Look man, I&rsquo;m not gonna lie to you: time zones will jack your shit up. Time zone bugs are <em>so</em> common, it&rsquo;s like they&rsquo;re just waiting there patiently, hoping that you&rsquo;ll make a mistake.</p>

<p>But you&rsquo;re a Rails developer &ndash; ain&rsquo;t no time zone gonna stop you! Instead, you&rsquo;re going to make your code defensive and subscribe to these best practices:</p>

<ol>
<li><p>Set your time zone in the <code>config/application.rb</code> file in your Rails app. Look for <code>config.time_zone</code>, and configure your time zone equal to that value. Rails will refer to that as your base time zone going forward, and ActiveRecord will convert between `UTC and your set time zone whenever you query.</p></li>
<li><p>Use the <code>in_time_zone</code> method to convert <code>Time</code> to your system&rsquo;s current set time zone. For example, <code>Time.now.in_time_zone("EST").iso8601</code>.</p></li>
<li><p>Use <code>Time.current</code> whenever you make an ActiveRecord query (ActiveRecord will convert <code>Time.current</code> and convert it to <code>UTC</code>: <code>Comment.where(["comments.published_at &gt; ?", Time.current])</code></p></li>
<li><p>DO NOT use <code>Time.now</code>! This returns <em>your</em> system&rsquo;s time, and ignores whatever time zone you configured for your Rails app. Instead, use numerical attributes and methods (such as <code>1.day.from_now</code> or <code>Date.current</code>), which rely on the time zone you configured in your <code>application.rb</code> to determine the return value.</p></li>
</ol>


<p>There are a lot of loopholes when it comes to dealing with Time zones. You can read more about them on <a href="http://www.elabs.se/blog/36-working-with-time-zones-in-ruby-on-rails">this super helpful post</a>.</p>

<h2>Time: Annoying, But Also&hellip;Awesome?</h2>

<p>Ok, don&rsquo;t get me wrong &ndash; time makes our lives miserable as developers. But it also presents some pretty epic challenges, which also makes our jobs interesting! (Look, I&rsquo;m trying to point out the silver lining here.)</p>

<p>For example, <strong>leap seconds</strong>. Yes, really &ndash; it&rsquo;s a thing. <a href="http://en.wikipedia.org/wiki/Leap_second">Leap seconds</a> occur 1-2 times a year, on either June 30 and/or December 31st. They&rsquo;re necessary in order to keep the Earth&rsquo;s time of day close enough to the Sun&rsquo;s mean time. But, how do you account for this in programs? Well, Google actually does something pretty cool: instead of adding one second, Google&rsquo;s servers implement &ldquo;leap smears&rdquo;, which extend the seconds surrounding a leap second by just a little bit &ndash; enough to account for an entire extra second! Side note: the next leap second is on June 30th of this year! I hope you&rsquo;re ready.</p>

<p>Another bizarre thing is <strong>Y2038</strong>. If this sounds reminiscent of Y2K, that&rsquo;s because it is. Essentially, <a href="http://www.y2038.com/">the 2038 problem</a> boils down to this: On January 19, 2038, Unix timestamps will stop working because of a 32-bit overflow. So, all of the millions of applications that use this time format will have to either reconfigure to 64-bit systems, or choose a new format to store dates and times. There&rsquo;s supposedly no universal solution to this, but hopefully someone will figure out a fix in the next 22 years.</p>

<p>Hopefully by that point, someone will have figured out how to get rid of time zones completely.</p>

<iframe src="//giphy.com/embed/f96k0qHpzmnPG" width="480" height="269" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>Unix timestamps and ISO8601 are both good formats for storing date and time in your database. Do a little research to decide <a href="http://stackoverflow.com/questions/15554586/timestamps-iso8601-vs-unix-timestamp">which of these formats</a> is the best tool for whatever job you&rsquo;re trying to accomplish.</li>
<li>Dealing with time zones is hard, but the <a href="http://danilenko.org/2012/7/6/rails_timezones/">Exhaustive Guide to Rails Time Zones</a> will save you hours of banging your head against the wall &ndash; well, for time-related things, at least.</li>
<li>Want to be a <code>Time</code> object superstar? Read <a href="https://unix4lyfe.org/time/?v=1">this post</a>, which was featured on HackerNews, and peruse the <a href="http://ruby-doc.org//core-2.2.0/Time.html">Ruby documentation</a> to get the skinny on all things time-related.</li>
</ul>

]]></content>
  </entry>
  
</feed>
