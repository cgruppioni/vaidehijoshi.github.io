<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Words and Code]]></title>
  <link href="http://vaidehijoshi.github.io/atom.xml" rel="self"/>
  <link href="http://vaidehijoshi.github.io/"/>
  <updated>2014-11-16T13:09:10-05:00</updated>
  <id>http://vaidehijoshi.github.io/</id>
  <author>
    <name><![CDATA[Vaidehi Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Have You Met Your Controller Yet?]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2014/10/30/have-you-met-your-controller-yet/"/>
    <updated>2014-10-30T23:28:43-04:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2014/10/30/have-you-met-your-controller-yet</id>
    <content type="html"><![CDATA[<p>Controllers: we all have &lsquo;em. Sure, they put the C in MVC, but how much do we really <em>know</em> about these mysterious creatures? Probably not a lot. Don&rsquo;t you wish you could just look your Controller in the eye and be all, &ldquo;Hey dude, what <em>are</em> you?&rdquo; Well, you can. All you have to do is just poke around a bit in your code.</p>

<p>Let&rsquo;s start with what we <em>do</em> know. Given the MVC orientation of Rails, we already know that the Controller acts as a kind of mediator, intercepting messages between the client and the server, and passing information between the model and view. But ultimately, Controllers are nothing more than Ruby classes (that inherit from ActionController::Base) with class methods called &ldquo; actions&rdquo;, which are simply meant to render a template for the user to see. But don&rsquo;t mistake them as simple chunks of code; there are also some pretty amazing things that Controllers can do.</p>

<!-- more -->


<h2>1. Controllers can have empty actions and STILL work.</h2>

<p>Okay, time to break the ice. Let&rsquo;s get to know our Controllers. Below is some generic code for a Controller for a guacamole app. First off is my main ApplicationController, which becomes a parent class for my GuacController to inherit from:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GuacController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">render</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>See that <code>render()</code> method? All it does is render the default template for the current controller and action. And since I&rsquo;m in the index action of the GuacController, this code would render the template <code>app/views/guac/index.html.erb</code></p>

<p>But what would happen if I had an empty <code>index</code> method?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GuacController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would also render <code>app/views/guac/index.html.erb</code>. But&hellip;why? Well, the cool thing about Controllers is that they will call <code>render</code> by default, even if the action (in this case, <code>index</code>) doesn&rsquo;t call the <code>render</code> method explicitly. In fact, every single Controller action already has the render method implicitly within it!</p>

<p>And you know what&rsquo;s really crazy? This code would <em>also</em> render the same index page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GuacController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When Rails gets a request for the <code>index</code> action and sees that there&rsquo;s no such action in the GuacController, it assumes that if there <em>were</em> an <code>index</code> action, it would render <code>app/views/guac/index.html.erb</code>. So that&rsquo;s exactly what it does, even though you haven&rsquo;t even given it the code to do so explicitly.</p>

<p>Obie Fernandez explains why exactly this works in his book, <em>The Rails 4 Way</em>:</p>

<blockquote><p>&ldquo;The goal of the typical controller action is to render a view template—that is, to fill out the template and hand the results, usually an HTML document, back to the server for delivery to the client. Oddly—at least it might strike you as a bit odd, though not illogical—you don’t actually need to define a controller action, as long as you’ve got a template that matches the action name.&rdquo;</p></blockquote>

<h2>2. Controllers can render almost anything:</h2>

<p>Even though the <code>render</code> method is implicit and doesn&rsquo;t actually ever have to be written out by you, the programmer, it can actually be quite a handy little tool. You can use this method within a Controller action if you want it to render something <em>other</em> than its default template. For example, I could tell my GuacController to render any other file in my <code>app/views</code> directory by just using the <code>render</code> method.</p>

<p>This is useful for two different reasons:</p>

<ul>
<li><p>You can render another action&rsquo;s template:
⋅⋅*For example, my <code>create</code> action in my GuacController could have something like <code>render action:'new'</code>, which would render my <code>app/views/guac/new.html.erb</code>. This could be super awesome if a new instance of <code>@guac</code> hadn&rsquo;t been saved.</p></li>
<li><p>You can render a different template entirely:
⋅⋅*If I was out of guac and I wanted my guac index page to actually render the template for my salsa index, I could explicitly render it by putting the following code in the <code>index</code> action of my GuacController: <code>render template:'/salsa/index.html.haml'</code>. Of course, this doesn&rsquo;t really answer the question of where all my guacamole went, but that&rsquo;s neither here nor there.</p></li>
</ul>


<h2>3. Controllers are all for Convention over Configuration:</h2>

<p>Because of naming conventions for Controllers, if I have a Guac Controller, Rails assumes that there is a class called GuacController saved as a file <code>guac_controller.rb</code> in my <code>app/controllers</code> directory. It will also look for corresponding view templates for my GuacController in <code>app/views/guac</code>, and it will take the output of these views and save them as <code>guac.html.erb</code>.</p>

<p>Basically, your Controller makes a lot of assumptions whenver it gets a single web request. But, this also means that <em>you</em> can  anticipate how your Controller might react by simply understanding what your Controller already knows and assumes about your code.</p>

<p>I guess what I&rsquo;m trying to say is&hellip;get to know each other.</p>

<h2>tl;dr?</h2>

<ul>
<li>Your Controller does a lot of stuff for you without you even realizing it. To make the most of its magical powers, learn as much as you can about its conventions.</li>
<li>Play around with the <code>render</code> method to understand when it can be used and for what purposes.</li>
<li>Get to know your Controller. I&rsquo;m telling you: it will be the beginning of a beautiful friendship.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class Inheritance]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2014/10/16/class-inheritance/"/>
    <updated>2014-10-16T21:00:34-04:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2014/10/16/class-inheritance</id>
    <content type="html"><![CDATA[<p>Confession time: I&rsquo;m kind of in love with object-oriented programming.</p>

<p>I should probably clarify that I don&rsquo;t always understand OOP, and I sometimes even confuse myself for no good reason whenever the topic of &ldquo;self&rdquo; comes up. But hey, every relationship has its ups and downs, and I&rsquo;ve only really been committed to this one for the past week or so.</p>

<p>OOP is easy to understand mostly because of its strong connection to real life &ndash; everything is an object, all objects have properties/traits/characteristics, so on and so forth. But dealing with multiple <em>types</em> of objects across different types of <em>classes</em> gets real tricky, <em>real</em> fast. This especially holds true when it comes to class inheritance.</p>

<!-- more -->


<h2>WTF is inheritence?</h2>

<p>Inheritence in object-oriented programming is pretty much exactly what it sounds like: when one class <strong>inherits</strong> the properties of another class, just like how you inherit traits from your parents (even if you might wish otherwise).</p>

<p>Okay, maybe an example here will help:</p>

<p>Imagine that you have a class called <code>BakedStuff</code>, which includes all the baked goods your heart could ever desire. Every instance (every <em>object</em>) of this <code>BakedStuff</code> class has a <code>name</code>, baking <code>time</code>, and <code>baking_temperature</code>, which we&rsquo;ll set to default at 375 degrees.</p>

<p>And for good measure, let&rsquo;s also throw in a little method in there called <code>bake_for</code>, which is just going to return a string that will tell us how much time to bake our treats for, and at what temperature.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BakedStuff</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:time</span><span class="p">,</span> <span class="ss">:baking_temperature</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">baking_temperature</span><span class="o">=</span><span class="mi">375</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@time</span> <span class="o">=</span> <span class="n">time</span>
</span><span class='line'>    <span class="vi">@baking_temperature</span> <span class="o">=</span> <span class="n">baking_temperature</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bake_for</span>
</span><span class='line'>    <span class="s2">&quot;To make </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">, bake for </span><span class="si">#{</span><span class="n">time</span><span class="si">}</span><span class="s2"> at </span><span class="si">#{</span><span class="n">baking_temperature</span><span class="si">}</span><span class="s2"> degrees fahrenheit.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing <em>too</em> complicated about it, right?</p>

<p>Now I can create an actual object and pass in the correct parameters. I can even ask the cake how long I should bake it for, which would look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cake</span> <span class="o">=</span> <span class="no">BakedStuff</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;cake&quot;</span><span class="p">,</span> <span class="s2">&quot;30 min&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">cake</span><span class="o">.</span><span class="n">bake_for</span>
</span></code></pre></td></tr></table></div></figure>


<p>would output: <code>To make cake, bake for 30 min at 375 degrees fahrenheit.</code></p>

<p>Awesome. I love cake. But you know what I like even more than cake? Cookies! Just like in my first class, I want to make a new <code>Cookie</code> class, which will also have a name, time, baking temperature, and <code>bake_for</code> method. Now, I could theoretically rewrite all of my code from the <code>BakedStuff</code> class, but then I&rsquo;d have less time to bake and I&rsquo;m also pretty sure that goes against the whole &ldquo;DRY&rdquo; concept in Ruby.</p>

<p>What I <em>could</em> do is have my new <code>Cookie</code> class <em>inherit</em> everything from my <code>BakedStuff</code> class, since I want all my new instances of <code>Cookie</code> to share the same methods as my <code>BakedStuff</code> class.</p>

<p>Let me try it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Cookie</span> <span class="o">&lt;</span> <span class="no">BakedStuff</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:cookies_made</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">cookies_made</span><span class="p">,</span> <span class="n">baking_temperature</span><span class="o">=</span><span class="mi">375</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="vi">@time</span> <span class="o">=</span> <span class="s2">&quot;20 min&quot;</span>
</span><span class='line'>    <span class="vi">@cookies_made</span> <span class="o">=</span> <span class="n">cookies_made</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bake_for</span>
</span><span class='line'>    <span class="k">super</span> <span class="o">+</span> <span class="s2">&quot; This recipe will yield </span><span class="si">#{</span><span class="n">cookies_made</span><span class="si">}</span><span class="s2"> cookies.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whoa! New code!</p>

<ul>
<li>That <code>&lt;</code> sign is what we use to dennote inheritence. All it means is that my <code>Cookie</code> class is now <em>inheriting</em> all the methods from my <code>BakedStuff</code> class.</li>
<li>Notice that this class has some additional features, including a new instance method which sets the <code>cookies_made</code>.</li>
<li>But wait, what&rsquo;s that <code>super</code> thing doing in there??</li>
</ul>


<h2>WHUT is <code>super</code>?</h2>

<p>The <code>super</code> keyword in Ruby is, well, pretty super. Okay, okay, what it <em>really</em> does is allow you to call methods up the &ldquo;inheritence heirarchy&rdquo;, which means that you can use methods that were perviously defined in classes that this class now inherits from.</p>

<p>In fact, <code>super</code> is what allows me to pull down everything from my <code>initialize</code> and <code>bake_for</code> methods in my parent class, which in this case is my <code>BakedStuff</code> class. You&rsquo;ll also notice that I&rsquo;ve reassigned my <code>@time</code> variable to equal 20 minutes, and that I&rsquo;ve added a string interpolation into my <code>bake_for</code> method. And I didn&rsquo;t have to retype any of the code from my parent class in the process!</p>

<p>Let&rsquo;s look at what an object of the Cookie class could look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cookies</span> <span class="o">=</span> <span class="no">Cookie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;cookies&quot;</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">cookies</span><span class="o">.</span><span class="n">bake_for</span>
</span></code></pre></td></tr></table></div></figure>


<p>would output: <code>To make cookies, bake for 20 min at 400 degrees fahrenheit. This recipe will yield 15 cookies.</code></p>

<p>Okay, one last example. Let&rsquo;s say that my favorite kind of cookie is a Snickerdoodle. I want it to inherit from its parent class, <code>Cookie</code>, but I also want to jazz the <code>Snickerdoodle</code> class up a little bit. I&rsquo;m going to change its <code>bake_for</code> method and make a little counter that will tell me exactly how many snickerdoodles I&rsquo;ve got left.</p>

<p>This would look something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Snickerdoodle</span> <span class="o">&lt;</span> <span class="no">Cookie</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">baking_temperature</span><span class="o">=</span><span class="mi">375</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="vi">@time</span> <span class="o">=</span> <span class="s2">&quot;25 min&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bake_for</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">cookies_made</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;There&#39;s only </span><span class="si">#{</span><span class="vi">@cookies_made</span><span class="si">}</span><span class="s2"> snickerdoodles left!&quot;</span>
</span><span class='line'>    <span class="vi">@cookies_made</span> <span class="o">=</span> <span class="n">cookies_made</span><span class="o">.</span><span class="n">to_i</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let me actually create a batch of snickerdoodles:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">snickerdoodle</span> <span class="o">=</span> <span class="no">Snickerdoodle</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;snickerdoodles&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">snickerdoodle</span><span class="o">.</span><span class="n">bake_for</span>
</span></code></pre></td></tr></table></div></figure>


<p>which outputs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">There</span><span class="s1">&#39;s only 10 snickerdoodles left!</span>
</span><span class='line'><span class="s1">There&#39;</span><span class="n">s</span> <span class="n">only</span> <span class="mi">9</span> <span class="n">snickerdoodles</span> <span class="n">left!</span>
</span><span class='line'><span class="no">There</span><span class="s1">&#39;s only 8 snickerdoodles left!</span>
</span><span class='line'><span class="s1">There&#39;</span><span class="n">s</span> <span class="n">only</span> <span class="mi">7</span> <span class="n">snickerdoodles</span> <span class="n">left!</span>
</span><span class='line'><span class="no">There</span><span class="s1">&#39;s only 6 snickerdoodles left!</span>
</span><span class='line'><span class="s1">There&#39;</span><span class="n">s</span> <span class="n">only</span> <span class="mi">5</span> <span class="n">snickerdoodles</span> <span class="n">left!</span>
</span><span class='line'><span class="no">There</span><span class="s1">&#39;s only 4 snickerdoodles left!</span>
</span><span class='line'><span class="s1">There&#39;</span><span class="n">s</span> <span class="n">only</span> <span class="mi">3</span> <span class="n">snickerdoodles</span> <span class="n">left!</span>
</span><span class='line'><span class="no">There</span><span class="s1">&#39;s only 2 snickerdoodles left!</span>
</span><span class='line'><span class="s1">There&#39;</span><span class="n">s</span> <span class="n">only</span> <span class="mi">1</span> <span class="n">snickerdoodles</span> <span class="n">left!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for the tricky part. What do you think will happen if I create a new batch of cookies in my <code>Cookie</code> class? Do you think I&rsquo;ll get a cookie counter? Do you think my <code>Cookie</code> class will be affected by my <code>Snickerdoodle</code> class? Let&rsquo;s try it and see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">chocolate_chip_cookie</span> <span class="o">=</span> <span class="no">Cookie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;chocolate chip cookies&quot;</span><span class="p">,</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">chocolate_chip_cookie</span><span class="o">.</span><span class="n">bake_for</span>
</span></code></pre></td></tr></table></div></figure>


<p>which outputs: <code>To make chocolate chip cookies, bake for 20 min at 375 degrees fahrenheit. This recipe will yield 24 cookies.</code></p>

<p>And what about if I create a new pie?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pie</span> <span class="o">=</span> <span class="no">BakedStuff</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;pie&quot;</span><span class="p">,</span> <span class="s2">&quot;45 min&quot;</span><span class="p">,</span> <span class="mi">450</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">pie</span><span class="o">.</span><span class="n">bake_for</span>
</span></code></pre></td></tr></table></div></figure>


<p>outputs: <code>To make pie, bake for 45 min at 450 degrees fahrenheit.</code></p>

<p>Interesting. It doesn&rsquo;t seem to matter at all that I changed my <code>Cookie</code> class &ndash; <code>BakedStuff</code> stayed the same. And all the edits I made to my <code>Snickerdoodle</code> class didn&rsquo;t fall up to my <code>Cookie</code> class, either. That&rsquo;s because inheritance only works in one direction, from the parent class, down to its children.</p>

<p>I should also mention that <code>super</code> didn&rsquo;t change my parent classes either; all it did was bring the already-created methods from my parent classes down to its children. It&rsquo;s actually passing all the arguments to the parent class&#8217; method.</p>

<p>Finally, it&rsquo;s crucial to remember that a class can only inherit from one class at a time. Something like <code>Snickerdoodle &lt; Cookie &lt; BakedStuff</code> would have raised an error. Also, remember that instance variables have nothing to do with class inheritance, since they are not defined by the class itself!</p>

<h2>tl;dr?</h2>

<ul>
<li>Class inheritance is an incredibly powerful tool. Use it.</li>
<li>The <code>super</code> keyword can save you a ton of time. Remember that it only works with methods of a class, and <em>not</em> instance variables. Read more about it <a href="http://rubylearning.com/satishtalim/ruby_inheritance.html">here</a> and <a href="http://rubylearning.com/satishtalim/ruby_overriding_methods.html">here</a></li>
<li>Cookies just make everything better (just in case it wasn&rsquo;t obvious already).</li>
</ul>

]]></content>
  </entry>
  
</feed>
