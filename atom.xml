<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Words and Code]]></title>
  <link href="http://vaidehijoshi.github.io/atom.xml" rel="self"/>
  <link href="http://vaidehijoshi.github.io/"/>
  <updated>2015-01-27T21:17:34-05:00</updated>
  <id>http://vaidehijoshi.github.io/</id>
  <author>
    <name><![CDATA[Vaidehi Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Embrace Your Inner Paranoia: Using Acts_as_paranoid]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/01/27/embrace-your-inner-paranoia-use-acts-as-paranoid/"/>
    <updated>2015-01-27T19:36:16-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/01/27/embrace-your-inner-paranoia-use-acts-as-paranoid</id>
    <content type="html"><![CDATA[<p>Yesterday, I started my very first job as a software engineer! It&rsquo;s been super exciting, slightly terrifying, and sometimes overwhelming. I think one of the trickiest parts of starting as a new engineer at a company is the onboarding process.</p>

<p>It might seem kind of scary, but if you think about it, it&rsquo;s actually pretty fun. You get to dive down a rabbit hole and look at production code that you didn&rsquo;t write. It&rsquo;s getting a new puzzle that you haven&rsquo;t solved yet: you try to figure out how one thing connects to another, where modules and methods exist, how things are namespaced, not to mention learning about new frameworks and gems. I feel like I&rsquo;m entering into new dimensions and travelling through a space-time continuum or something. This also might be attributed to the fact that I&rsquo;ve been  listening exclusively to the <a href="https://www.youtube.com/watch?v=YOWSTtXxf9s">Interstellar soundtrack</a> for the past two days, but whatever &ndash; you get the point.</p>

<p>My favorite part of the onboarding process is how much I&rsquo;ve been learning. Every new class or module definition brings a new piece of the puzzle that I&rsquo;ve never seen before, but can&rsquo;t wait to learn about. It&rsquo;s kind of crazy that I get paid to read and learn all day, every day &ndash; that&rsquo;s the dream, right?</p>

<p>Anyways, all of this is to say that I&rsquo;ve found and learned about some cool stuff! For example this little ditty: <code>acts_as_paranoid</code>. I saw this in a class definition and my first thought was literally: <em>Damn, that&rsquo;s a great name for a validation!</em> But as it turns out, it&rsquo;s not actually a validation &ndash; it&rsquo;s Rails magic!</p>

<!-- more -->


<h2>Start acting paranoid!</h2>

<p>Okay, I lied: <code>acts_as_paranoid</code> not actually <em>magic</em> &ndash; it&rsquo;s a Rails ActiveRecord plugin. But it&rsquo;s still pretty magical, you guys! So, what does it do? Well, it helps you be less paranoid about deleting stuff by accident (hence the name). Essentially, <code>acts_as_paranoid</code> allows you to make soft deletes in Rails. That means that it gives you the flexibility to delete an object without actually deleting it from the database.</p>

<iframe src="//giphy.com/embed/VpbctjT9VrALS" width="480" height="260" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>Does this sound like black magic yet? Just wait, you&rsquo;re about to see some real magic.</p>

<h2>So&hellip;how do I starting acting paranoid?</h2>

<p>In my example, I&rsquo;ll be implementing <code>acts_as_paranoid</code> on some <code>Book</code> objects in my eCommerce bookstore app. Using <code>acts_as_paranoid</code> is relatively simple. You can break it down into two simple steps:</p>

<p>First, add <code>acts_as_paranoid</code> to your class definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">acts_as_paranoid</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, add a column to the database for that class called <code>deleted_at</code>, which is set to a <code>datetime</code> format:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddDatetimeToBooks</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:books</span><span class="p">,</span> <span class="ss">:deleted_at</span><span class="p">,</span> <span class="ss">:datetime</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ok, I&rsquo;m getting paranoid now &ndash; how does this work?</h2>

<p>So, we have another column in our <code>Books</code> table that has a <code>deleted_at</code> column with a type of <code>:datetime</code>. Now, this is where the magic happens: the <code>acts_as_paranoid</code> plugin actually <em>overrides</em> ActiveRecord&rsquo;s <code>find</code>, <code>count</code>, and <code>destroy</code> methods. So now when we call the <code>destroy</code> method on a <code>Book</code> object, instead of actually deleting the object, the object&rsquo;s <code>deleted_at</code> field will be set to the current date and time.</p>

<p>And, if we call the <code>find</code> method on all of our <code>Book</code> objects, the one we just &ldquo;deleted&rdquo; won&rsquo;t show up! Instead, only the objects that <em>don&rsquo;t</em> have a value in their <code>deleted_at</code> column will render.</p>

<p>So, calling <code>@book.destroy</code> doesn&rsquo;t delete a row from the database; it actually just updates the row by giving a datetime to the object&rsquo;s <code>deleted_at</code> field. If you&rsquo;re into SQL queries, this is what&rsquo;s going on:</p>

<p><code>UPDATE books SET deleted_at = '2015-01-27 19:36:16' WHERE (id = 50)</code></p>

<p>The <code>Book</code> object with an id of <code>50</code> isn&rsquo;t <em>actually</em> deleted from the database, even though it will appear so in all of our views, and to our users/admins.</p>

<h2>But who needs soft deletes, anyways?</h2>

<p>I actually didn&rsquo;t realize the use case for soft deletes at first. But it turns out that they are incredibly helpful when building out large, more complicated Rails applications.</p>

<p>It&rsquo;s important to remember that Ruby is an object-oriented programming language. Any object that has an association with another object inherently relies upon it. In my bookstore app example, a <code>Book</code> object would belong to a <code>Order</code> object, and also be associated with a <code>User</code> object of some sort. If you think about the appliation on a broader, less granular level, you might realize that deleting any given <code>Book</code> object could actually have serious repercussions.</p>

<p>For example, you might want to see a <code>Book</code> object that was ordered in the past, even if that <code>Book</code> has since been deleted from a store. Perhaps you want to view the details of a <code>Shipment</code> object, even if that shipment was cancelled. Or, you might want to see an order that was placed by a <code>User</code> who may have deactivated their account months ago.</p>

<p>The <code>acts_as_paranoid</code> plugin helps you access all of this information, without keeping you up at night, wondering whether you deleted the wrong row from the database. Because honestly, who has time for that? Not this kitty, for sure:</p>

<p><img src="https://idp05.files.wordpress.com/2008/03/paranoid-cat.jpg" style="display: block; margin-left: auto; margin-right: auto;"></p>

<h2>tl;dr?</h2>

<ul>
<li>The <code>acts_as_paranoid</code> plugin modifies ActiveRecord methods and allows you to implement soft deletes on your Ruby objects. Just remember to include it in your class definition and add a <code>deleted_at</code> column to your migration, with a type of <code>datetime</code>.</li>
<li>Want to see another example of disabling records using <code>acts_as_paranoid</code>? Check out <a href="https://www.safaribooksonline.com/library/view/rails-cookbook/0596527314/ch14s11.html">this blog post</a>.</li>
<li>To read more about <code>acts_as_paranoid</code> and its many caveats, check out <a href="https://github.com/ActsAsParanoid/acts_as_paranoid/">the easy-to-follow documentation</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Fog Creek Fellowship: Lessons in Fearlessness and Fortitude]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/01/23/the-fog-creek-fellowship-lessons-in-fearlessness-and-fortitude/"/>
    <updated>2015-01-23T14:04:16-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/01/23/the-fog-creek-fellowship-lessons-in-fearlessness-and-fortitude</id>
    <content type="html"><![CDATA[<p>There are a lot of scary things out there. To start, there are lions and tigers and bears. But if you go a bit below the surface, that&rsquo;s where you&rsquo;ll hit the dark stuff &ndash; the kind of stuff that I was forced to confront when I started as a student at <a href="http://www.flatironschool.com">The Flatiron School</a>.</p>

<p>Sure, learning how to program is really hard &ndash; it&rsquo;s not just learning another language, it&rsquo;s learning an entirely new way to think. But, working on code is far easier than working on yourself. My twelve weeks at The Flatiron School pushed me to deal with some tough thoughts, most of which had always lurked in the skeleton closets of my mind: <em>I don&rsquo;t know if I can do this. I&rsquo;m not cut out for this. I&rsquo;m not prepared. I&rsquo;m not smart enough. I won&rsquo;t fit in. I can&rsquo;t undersand. I won&rsquo;t understand.</em></p>

<p>Most of us have all had these thoughts at some point in our lives, regardless of what we look like or what we do for a living. Some of us have stopped dead in our tracks, sometimes unable to move beyond them at all. But learning to code meant dealing with these fears on a daily basis; at some point, I just stopped listening to them entirely.</p>

<!-- more -->


<h2>The Fog Creek Fellowship</h2>

<p>Before I learned to code, I was a writer and a teacher. In other words, I had no background in computer science or software developement. Now, it&rsquo;s already pretty terrifying to enter a new field in which you have no experience. But it gets <a href="http://thinkprogress.org/economy/2013/09/10/2599491/women-stem/">even more frightening</a> when you realize that only 25% of the industry is female and that 71% of your coworkers are white. All these facts combined can be fairly paralyzing &ndash; it&rsquo;s no wonder, then, that so many women and minorities choose not to enter STEM fields.</p>

<p>After graduating from Flatiron, I found myself facing an entirely new sea of questions: <em>Am I prepared for all these technical interviews? How do I negotiate a salary? What offer should I accept? What&rsquo;s the best job for me? Do I want to be the only woman in an all-male tech team?</em> Luckily, I didn&rsquo;t have to swim through this alone. Instead, I had a support system gliding along beside me the entire way: <a href="http://blog.fogcreek.com/announcing-the-fog-creek-fellowship/">The Fog Creek Fellowship</a>.</p>

<p>Forged through a partnership with the Flatiron School, the fellowship is dedicated to creating a more diverse and welcoming tech community by nurturing a select group of female Flatiron graduates as they look for their first programming jobs. Fellows are paired with a Fog Creek, Trello, or StackExchange developer &ndash; who just so happen to be some of the best coders in the country &ndash; and have the opportunity to create long-lasting relationships through pair programming sessions, interview prep, and technical talks.</p>

<blockquote class="twitter-tweet tw-align-center" lang="en"><p>Class two began today! <a href="http://t.co/LUaRwAnLUW">http://t.co/LUaRwAnLUW</a> &amp; the list of additional companies getting involved is so inspiring! <a href="http://t.co/hFaCy5HUlg">pic.twitter.com/hFaCy5HUlg</a></p>&mdash; Elizabeth Hall (@Liz_Hall1) <a href="https://twitter.com/Liz_Hall1/status/552204196016312320">January 5, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>Fearlessness</h2>

<p>I wasn&rsquo;t sure what to expect when I started the fellowship. Thankfully, my <a href="https://twitter.com/ianthehenry">phenomenal mentor Ian</a> was full of ideas. Thinking back on it now, I realize that all of our mentors helped us to confront the things that we were the most uncomfortable (read: afraid) of.</p>

<p>A lot of us didn&rsquo;t understand a lot of the computer science concepts that were coming up in technical interviews, so the mentors took the time to review tougher technical topics, and encouraged us to always speak up if ever we were confused.</p>

<blockquote class="twitter-tweet tw-align-center" lang="en"><p>Trello devs taking a break from making <a href="https://twitter.com/trello">@trello</a> awesome to help some <a href="https://twitter.com/FlatironSchool">@FlatironSchool</a> devs be more awesome <a href="https://twitter.com/hashtag/fogcreek?src=hash">#fogcreek</a> <a href="http://t.co/bS2iTQfpRm">pic.twitter.com/bS2iTQfpRm</a></p>&mdash; Michael Pryor (@michaelpryor) <a href="https://twitter.com/michaelpryor/status/555807419214102528">January 15, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><br></p>

<p>I always wanted to learn more about Objective C and iOS, so my mentor and I built a simple iPhone app that implemented the New York Times API and showed the top stories of the day. It was undoubtedly hard, but everything that&rsquo;s new and different always is. Ian helped me face my doubts head on, and nudged me to be unafraid of making mistakes or being wrong.</p>

<p>All the mentors and mentees hung out together, ate lunch, and talked tech and non-tech topics. And when I was trying to choose between a few different offers, they helped me talk through what I wanted out of my job, and which position would make me happy. We talked about everything from what we wanted our careers to look like in five years, to the pipeline problem for women in tech.</p>

<h2>Fortitude</h2>

<p>It takes a great deal of grit and strength of mind to endure and accept obstacles that come your way. To be a woman in technology, you need ample amounts of fortitude. There&rsquo;s really no other way to put it: <a href="http://www.payscale.com/career-news/2014/12/what-it's-really-like-for-women-in-tech">it&rsquo;s</a> <a href="http://www.washingtonpost.com/blogs/on-leadership/wp/2015/01/20/the-women-who-make-it-in-tech/">hard</a> to be a <a href="http://www.geekwire.com/2015/commentary-bring-binders-full-women-tech-must-get-page/">woman</a> in <a href="http://thinkprogress.org/economy/2013/09/10/2599491/women-stem/">tech</a>. It&rsquo;s hard to be <a href="http://www.theverge.com/2015/1/20/7856467/airbnb-diversity-report-gender-race-interactive-chart">a person of color</a> in tech. But the only way that we can begin to change the reality of the situation is by bringing in more women and minorities into the industry.</p>

<p>Granted, the solution to the problem might come in different shades for various people. Whether that means creating relationships based on trust and openness (such as the ones that we had with our mentors), or providing the resources to build confidence (like technical talks or interview prep), they&rsquo;re all steps in the right direction. If enough people follow suit, the industry will soon have an entirely new generation of developers and engineers, each of whom will pay it forward.</p>

<p>From my own personal experience at Fog Creek Software, I can definitely vouch for the simplicity of a safe, welcoming space for women. If you&rsquo;re wondering how you can change the industry, I&rsquo;d say that this is a good way to start. I suppose that it&rsquo;s a simple thing, really, but it makes a world of difference. Both Fog Creek and the Flatiron School are communities that acknowledge a problem and then proceed to create an environment that mirrors a world that we want to one day live in.</p>

<p>I&rsquo;d consider myself one of the lucky few who has been a part of this incremental change. The Flatiron School and the Fog Creek Fellowship opened so many doors for me &ndash; doors that I know I could have never opened on my own. As I take my first step and start a new job as a developer, I&rsquo;m realizing that the fellowship isn&rsquo;t really over. It&rsquo;s just that my role in it is changing. Soon, it&rsquo;ll be my turn to help open the very same doors for someone else.</p>

<p>Hopefully, she&rsquo;ll be even more fearless than me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing REM in CSS (or, How to Be a Shiny Happy Developer)]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/01/20/implementing-rem-in-css-or-how-to-be-a-shiny-happy-developer/"/>
    <updated>2015-01-20T17:39:10-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/01/20/implementing-rem-in-css-or-how-to-be-a-shiny-happy-developer</id>
    <content type="html"><![CDATA[<p>During a recent pair programming session, I came to the tough realization that I really know <em>nothing</em> about CSS. Granted, I can add in a <code>div</code> tag here and there, and yes, I can make a responsive page using Twitter Bootstrap like no one&rsquo;s business. But, what do I really know about design? Not as much as I thought I did.</p>

<p>I figured out that this was the case when the designer I was pairing with started using <strong>ems</strong> and <strong>rems</strong>. I should probably preface this and say that I have always been a pixel kind of girl. I was formerly of the mindset that you can have any font size you like &ndash;  as long as it&rsquo;s defined in pixels.</p>

<p>But, after doing a bit of research, I found that ems and rems actually have an interesting history behind them, and are super helpful when it comes to elastic layouts and responsive design.</p>

<!-- more -->


<h2>wait. there are different types of layouts?</h2>

<p>Yes! Trying to make your web applications responsive can be a nightmare, and kind of feels like this:</p>

<iframe src="//giphy.com/embed/13FrpeVH09Zrb2" width="480" height="462" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>Designers have long debated <a href="http://www.smashingmagazine.com/2009/06/02/fixed-vs-fluid-vs-elastic-layout-whats-the-right-one-for-you/">what kind of page layouts</a> are the best solution for this problem. The most interesting one is the elastic layout, which combines fluid and fixed layouts, and relies completely on sizing all the elements on a page by using <strong>ems</strong>. This is a pretty popular layout amongst designers and developers alike because, when it&rsquo;s properly implemented, the entire page grows or shrinks in proportion with the user&rsquo;s window size.</p>

<p>By now, you&rsquo;re probably thinking to yourself, <em>Okay, that&rsquo;s all great, but dear lord please tell me what ems and rems are!</em></p>

<p>Well, your wish is my command.</p>

<h2>Getting down with ems</h2>

<p>An <a href="http://en.wikipedia.org/wiki/Em_%28typography%29"><em>em</em></a> is nothing more than a unit of measurement. Ems have actually been around for awhile and date back to the early days of typography. The em was originally a point of reference to the width of the metal block used to make a capital &ldquo;M&rdquo; in any particular size of typeface.</p>

<p>But for our purposes, we only need to think about ems in the context of CSS, which is a vertical measurement. <a href="http://v1.jontangerine.com/log/2007/09/the-incredible-em-and-elastic-layouts-with-css">Jon Tan</a>, designer and typographer extrordinaire, describes em units pretty clearly:</p>

<blockquote><p>&ldquo;One em equals the vertical space needed for any given letter in a font, regardless of the horizontal space it occupies. Therefore:<br> If the font size is 16px, then 1em = 16px.&rdquo;</p></blockquote>

<p>Protip: most popular web browsers have a default font size of 16 pixels. So, if you wanted to have a font size that was half that size, or 8 pixels, you could specify that in ems as &ldquo;0.5em&rdquo; (in other words, 50% of the original font size).</p>

<h2>But do i really need to use &lsquo;em?</h2>

<p>You don&rsquo;t <em>have</em> to use ems. Case in point: I&rsquo;d never used them until a week ago. But using them can save you lines of code. The most important thing to remember about ems is how they are different from pixels: <strong>ems are relative, pixels are not.</strong> This is especially helpful when you have nested elements.</p>

<p>Imagine you have a file that needs to have four different font sizes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.regular_font</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">14px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.big_font</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">28px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.med_font</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">21px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.small_font</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">7px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>regular_font</code> class is the parent type, from which the three other classes will inherit. This code is perfectly fine, but imagine that you need six different font sizes or, for a larger app, ten or twenty. And what if you decided at the last minute that you wanted to make the parent element 16px, rather than 14px? Since pixel values don&rsquo;t inherit, you&rsquo;d have to go back and change <em>every single font size</em> to make all the styling to scale. No bueno, amirite?</p>

<p>The same styling could be rewritten using ems, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.regular_font</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">1.0em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.big_font</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">2.0em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.med_font</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">1.5em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.small_font</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All of the font sizes now inherit from their parent element, which means that they will scale (think perecentages) depending on the size of the parent element. If you wanted to change the styling of all these font sizes, you&rsquo;d only actually have to change the parent element. Muy bueno, si?</p>

<h2>Okay, Okay &ndash; but what&rsquo;s this rem nonsense?</h2>

<p>Rems are almost the same as ems, except that there&rsquo;s no parent element that&rsquo;s defined. Instead, all the font sizes are based on the root <code>html</code> element. Don&rsquo;t freak out &ndash; all this really means is that you define a font size on the html element, and then all other elements will scale in font size relative to that.</p>

<p>In this example, the <code>.small_font</code> class inherits directly from the <code>html</code> parent element:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">html</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">1.0em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.small_font</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>But, but&hellip;I&rsquo;m really bad at math!</h2>

<p>Don&rsquo;t worry: there&rsquo;s an app for that. More specifically, a website that helps you calculate your ems. You can head on over to <a href="http://pxtoem.com/">PXtoEm.com</a>, and play around with pixels and ems and become a styling wizard.</p>

<p>Now, GO FORTH and style away!</p>

<iframe src="//giphy.com/embed/f0SFw1gXlmkc8" width="480" height="564" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>Ems are relative units of measurement, and pixels are not. Rems are basically just like ems, except that they inherit from the <code>html</code> element directly.</li>
<li>You don&rsquo;t have to use ems, but they can be helpful. A good way to start is by using pixels in development, and then assess whether your application actually <em>needs</em> to be responsive before heading over into em territory.</li>
<li>For more clarity on <strong>ems vs rems</strong>, check out <a href="https://j.eremy.net/confused-about-rem-and-em/">Jeremy Church&rsquo;s awesome post</a> on exactly that.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tidying Up Those Views: Using Decorators in Rails]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/01/13/tidying-up-those-views-using-decorators-in-rails/"/>
    <updated>2015-01-13T22:53:10-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/01/13/tidying-up-those-views-using-decorators-in-rails</id>
    <content type="html"><![CDATA[<p>Last week, I had my first full-day technical interview. It was a thrilling experience, and so much more fun than I expected. Part of that was because I viewed the whole experience not as an evaluation, but rather an opportunity to learn as much as I could from experienced developers. I also knew that, irrespective of whether I did well or not, I&rsquo;d learn some new technologies and tricks. And boy, was that the truth.</p>

<p>I left the interview with a long list of things I&rsquo;d never heard of (<em>why hello, blog posts for the next five Tuesdays!</em>), one of which included the use of decorators in Rails. I was actually kind of surprised that I had never encountered decorators while building my own Rails apps, but it turns out that these are actually pretty advanced topics and there&rsquo;s a good amount of <a href="https://bibwild.wordpress.com/2012/12/19/the-simplest-rails-decorator-implementation-that-just-might-work/">debate on how and when to use decorators</a>, and <a href="http://thepugautomatic.com/2014/03/draper/">whether or not they&rsquo;re actually useful</a>.</p>

<p>But hey, none these discussions apply or make any sense unless you know <em>what</em> a decorator actually is. So, let&rsquo;s find out!</p>

<!-- more -->


<p></p>

<p>It&rsquo;s a well-known fact that your Rails model should be fat, and your controllers should be skinny. But what about your views? Well, there are varying schools of thought on the MVC framework and how it should function. Steve Klabnik <a href="http://blog.steveklabnik.com/posts/2011-12-30-active-record-considered-harmful">argued that views should have no logic</a>, stating that otherwise &ldquo;They&rsquo;re hard to test, they&rsquo;re hard to read, and it&rsquo;s not just a slippery slope, but a steep one. Things go downhill rapidly.&rdquo;</p>

<p>I really liked the way that John Otander described how views should function in <a href="http://johnotander.com/rails/2014/03/07/decorators-on-rails/">his blog post on decorators</a>:</p>

<blockquote><p>&ldquo;Your views should be stupid. I like to use the analogy that views should read similarly to a shopping list. There shouldn&rsquo;t be any complexity or logic.&rdquo;</p></blockquote>

<p>I decided to look back at <a href="https://flatiron-cabbie.herokuapp.com/">Cabbie</a>, one of my first projects, and check out the shape of my own views. This app basically was a review system (think Yelp) for New York City cab drivers. We had models such as Users, Drivers, Reviews, etc.</p>

<p>Here&rsquo;s a taste of our driver show page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;div class=&quot;driver-info&quot;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="vi">@driver</span><span class="o">.</span><span class="n">medallion_number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@driver</span><span class="o">.</span><span class="n">medallion_number</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">4</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    Medallion Number: </span><span class="cp">&lt;%=</span> <span class="vi">@driver</span><span class="o">.</span><span class="n">medallion_number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    License Number: </span><span class="cp">&lt;%=</span> <span class="vi">@driver</span><span class="o">.</span><span class="n">medallion_number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<iframe src="//giphy.com/embed/jrK9MW7x3GkOk" width="480" height="199" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>That&rsquo;s pretty much the face I made when I looked at this code with a fresh set of eyes. This is one tiny little snippet of code, but imagine many more conditionals and much more logic in this view, and you get the idea. Not a pretty picture.</p>

<p>A couple things seemed problematic about this code:</p>

<ol>
<li>The first problem was that the view had to do the logic of figuring out whether a driver had a four-digit medallion number (NYC taxi) or a longer medallion number (an Uber driver). How could we fix this? Well, we could abstract this into a method in the class.</li>
<li>The second problem: why is it the <code>Driver</code> object&rsquo;s job to keep track of this? Do we really need a helper method in this case? All we really need this logic for is in rendering the view. We could make it its own class that inherits from the Driver class, maybe?</li>
<li>Ok, the third problem: we know what we want &ndash; a <code>Driver</code> object that has some special functionality when it comes to presenting it in the view. But how do we get it? We want to extend the behavior of the <code>Driver</code> class purely for decorative purposes. Sounds like a job for a <strong>decorator</strong>!</li>
</ol>


<p>So, what is a decorator, you might ask? Well, firstly, it&rsquo;s actually known as the <strong>decorator pattern</strong>. An aspect of object-oriented programming, decorators allow you to add functionality to an object, but also retains all the other methods that belong to that object&rsquo;s class. It&rsquo;s a great tool to use when you want to implement and/or encapsulate certain methods that are only used in the view, and yet still have access to all the other properties of that object.</p>

<p>The best way to learn what a decorator does is to try and use it yourself and see what happens. I implemented my decorator on my Cabbie app, using the <a href="https://github.com/drapergem/draper">Draper gem</a>.</p>

<p>First, you&rsquo;ll want to make sure you add <code>gem 'draper'</code> to your Gemfile.</p>

<p>Next, you&rsquo;ll want to generate the decorator for whatever object you want to &lsquo;decorate&rsquo;. In my case, I wanted to implement it on the driver object, so I typed <code>rails generate decorator Driver</code> into my terminal.</p>

<p>Then, add <code>.decorate</code> to your object in the appropriate controller. Here&rsquo;s how I did it in my <code>DriversController</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DriversController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@driver</span> <span class="o">=</span> <span class="no">Driver</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">decorate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">search</span>
</span><span class='line'>    <span class="vi">@driver</span> <span class="o">=</span> <span class="no">Driver</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">:medallion_number</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:medallion_number</span><span class="o">].</span><span class="n">upcase</span><span class="p">)</span><span class="o">.</span><span class="n">decorate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After generating your decorator, you&rsquo;ll notice that there&rsquo;s a new directory in your <code>/app</code> file called <code>decorators</code>. Nothing to be scared of here: it&rsquo;s just a class that inherits from the Draper Decorator gem. Here&rsquo;s where you&rsquo;ll add any additonal functionality you want your &lsquo;decorated&rsquo; object to have.</p>

<p>In my case, I wanted to abstract away the Driver&rsquo;s medallion/license number away and encapsulate it into a method. I created an <code>id_number</code> method in my decorator file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DriverDecorator</span> <span class="o">&lt;</span> <span class="no">Draper</span><span class="o">::</span><span class="no">Decorator</span>
</span><span class='line'>  <span class="n">delegate_all</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">id_number</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">medallion_number</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">4</span>
</span><span class='line'>      <span class="s2">&quot;Medallion Number: </span><span class="si">#{</span><span class="n">medallion_number</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="s2">&quot;License Number: </span><span class="si">#{</span><span class="n">medallion_number</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay, you still with me? Here&rsquo;s the satisfying part. Cut out all that ridiculous erb from your view &ndash; we don&rsquo;t need that anymore! Instead, we&rsquo;ll just call on the decorator method that we wrote for exactly this purpose. Ready? Okay. Let&rsquo;s do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;div class=&quot;driver-info&quot;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="vi">@driver</span><span class="o">.</span><span class="n">id_number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>LOOK. AT. THAT. No iterations. No <code>if</code>/<code>elsif</code>/<code>end</code> keywords. One method, being called on exactly one object. No logic at all. You can read this and know exactly what we&rsquo;re trying to render. <em>Beautiful</em>.</p>

<p>As lovely as this looks, it&rsquo;s also important to keep in mind that this is an advanced topic and not always necessary. Only use decorators if they&rsquo;ll actually clean up your code and be helpful.</p>

<p>And on that note, there&rsquo;s only one thing left to do: Get tidying, kids!</p>

<iframe src="//giphy.com/embed/s90QFDMh0RAIg" width="480" height="269" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>tl;dr?</h2>

<ul>
<li>Using a decorator isn&rsquo;t always the right answer. Make sure you&rsquo;re comfortable with the MVC framework and that you really need to use a decorator before you go about implementing one.</li>
<li>If you want a more in-depth introduction to presenters and decorators, check out <a href="https://www.youtube.com/watch?v=xf7i44HJ_1o">this RailsConf presentation by Mike Moore</a>.</li>
<li>If this is still confusing, read more code examples; there are lots of <a href="http://robots.thoughtbot.com/evaluating-alternative-decorator-implementations-in">really</a> <a href="https://bibwild.wordpress.com/2012/12/19/the-simplest-rails-decorator-implementation-that-just-might-work/">good</a> <a href="http://robots.thoughtbot.com/tidy-views-and-beyond-with-decorators">blog</a> <a href="http://johnotander.com/rails/2014/03/07/decorators-on-rails/">posts</a> that implement decorators.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Final Countdown: Using JavaScript's setInterval + clearInterval Methods]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2015/01/06/the-final-countdown-using-javascripts-setinterval-plus-clearinterval-methods/"/>
    <updated>2015-01-06T16:30:53-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2015/01/06/the-final-countdown-using-javascripts-setinterval-plus-clearinterval-methods</id>
    <content type="html"><![CDATA[<p>It&rsquo;s a brand new year, and with that comes a renewed sense of self. Also: a rather lengthy todo list. Enter <strong>#technicaltuesdays</strong>, or my attempt at beefing up my technical chops by posting a blog post every week &mdash; specifically on Tuesdays, in case it wasn&rsquo;t obvious. (Sorry, Thursday, you were a close second, but you just didn&rsquo;t make the cut.)</p>

<p>So, what&rsquo;s on the menu this week? JavaScript! New year = new me, you guys. Actually, some of my technical interviews have been a bit JavaScript-heavy, so I&rsquo;ve been stepping up my curly bracket game.</p>

<p>In honor of the new year, I wanted to use JavaScript to create a quick &ldquo;New Year&rsquo;s Countdown&rdquo; function. Suffice it to say, <em>it was neither quick nor easy</em>. But I learned about two cool timing events in JavaScript &ndash; <strong>setInterval</strong> and <strong>clearInterval</strong> &ndash; and now you can learn about them, too!</p>

<!-- more -->


<p></p>

<h2>setInterval()</h2>

<p>Okay, so what exactly was my goal with this function? I wanted to it to countdown from 10 to 1 and then print out &ldquo;Happy New Year!&rdquo;. JavaScript has a couple different time events, but the trick is figuring out which one works best for your purposes.</p>

<p>I first started off trying to use the setTimeout() method, which waits a certain amount of time before executing the function that you pass it as a parameter. I was stuck for a long time trying to figure out how to get my code to execute again after every second. I quickly realized that this method wasn&rsquo;t the best tool for the job.</p>

<p>Luckily, one method did just the trick: <strong>setInterval()</strong>. The setInterval method executes a function that you pass in as a parameter at a deteremined interval. The interval is also a parameter, and is passed in as milliseconds. <em>Protip: 1000 milliseconds = 1 second</em>. A generic setInterval method might look something like <code>setInterval(functionYouWantToRun(), 1000)</code>.</p>

<p>This was perfect for my countdown function, which needed to do the same thing &ndash; namely, count down from ten to zero &ndash; every one second.</p>

<p>Here&rsquo;s what my function looked like in the first iteration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">counter</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">counter</span><span class="o">--</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">counter</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;HAPPY NEW YEAR!!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I first created a <code>counter</code> variable, which I logged to the console, and then decremented by one each time the function ran. I passed in the two parameters that setInterval requires: a function to execute (in my case, an anonymous, unnamed function), and an interval at which it should be executed (every one second). I also added a conditional to log &ldquo;Happy New Year!&rdquo; once the counter hit zero.</p>

<p>So, did it work? YES! But also, NO. This code <em>does</em> count down from 10, and prints out &ldquo;HAPPY NEW YEAR!!&rdquo; when it hits zero. But now, there was another problem: it just WOULD. NOT. STOP.</p>

<p><img src="http://i.imgur.com/tGznKSo.gif" style="display: block; margin-left: auto; margin-right: auto;"></p>

<h2>Make it stop!! Or, clearInterval()</h2>

<p>The setInterval method is great and all, until you hit an infinite loop and your code runs forever and ever and ever and &ndash; you get the idea. This method on its own doesn&rsquo;t do much more than loop by default. But, when it&rsquo;s combined with its twin method <strong>clearInterval()</strong>, which &ndash; you guessed it &ndash; clears the function at a certain interval, you it can acutally be quite handy.</p>

<p>So, how does clearInterval work? Well, it takes just one parameter: the function that you want to clear. This is important for remember for two reasons:</p>

<ol>
<li>You have to save your setInterval method to a variable</li>
<li>This variable must be accessible (in scope) by the clearInterval method</li>
</ol>


<p>A clearInterval method might look something like <code>clearInterval(func)</code>, where <code>var func = setInterval(functionYouWantToRun(), 1000)</code>.</p>

<p>Here&rsquo;s what the second iteration of my function looked like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">newYearCountdown</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">counter</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">counter</span><span class="o">--</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">counter</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;HAPPY NEW YEAR!!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">newYearCountdown</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I saved my function to variable called <code>newYearCountdown</code>, and then passed that variable in as a parameter to my clearInterval method, which will only fire when the <code>counter</code> variable is set to zero. When <code>var counter</code> is set to zero, a couple things will happen:</p>

<ol>
<li>The string <code>HAPPY NEW YEAR!!</code> will be logged to the console</li>
<li>The clearInterval method will execute</li>
<li>The setInterval method will stop running</li>
</ol>


<p>And this is what will be printed out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">9</span>
</span><span class='line'><span class="mi">8</span>
</span><span class='line'><span class="mi">7</span>
</span><span class='line'><span class="mi">6</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="nx">HAPPY</span> <span class="nx">NEW</span> <span class="nx">YEAR</span><span class="o">!!</span>
</span></code></pre></td></tr></table></div></figure>




<iframe src="//giphy.com/embed/7tE1zKt2AwOsM" width="480" height="192" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>Maybe my next blog post should be figuring out how to change that gif from &ldquo;2012&rdquo; to &ldquo;2015&rdquo;&hellip;</p>

<p>Hope you had a wonderful New Year&rsquo;s! Here&rsquo;s to 2015 and many more Technical Tuesdays! (I hope.)</p>

<h2>tl;dr?</h2>

<ul>
<li>The <strong>setInterval</strong> method takes a function to execute and a interval in milliseconds.</li>
<li>The <strong>clearInterval</strong> method takes an in-scope variable which points to the setInterval method.</li>
<li>Both of these timing events work together as a pair.</li>
<li>Want to read more about timing events in JavaScript? Check out setInterval + clearInterval&rsquo;s cousins, <a href="http://javascript.info/tutorial/settimeout-setinterval">setTimeout and clearTimeout</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Understand Recursion, You Must First Understand Recursion]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2014/12/14/to-understand-recursion-you-must-first-understand-recursion/"/>
    <updated>2014-12-14T22:32:29-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2014/12/14/to-understand-recursion-you-must-first-understand-recursion</id>
    <content type="html"><![CDATA[<p><img src="http://xkcdsw.com/content/img/1105.gif" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>Recursion is kind of like the cloud &ndash; it&rsquo;s hard to explain and you might not ever see it, but it definitely is a thing. Yet we deal directly with recursion more than we may realize.</p>

<p><strong><em>Recursion</em></strong> is the process of repating a procedure or action. In Ruby, we put all of our procedures inside of a method, and we use loops to repeat those procedures again and again. So, if we have methods and loops, what&rsquo;s the need for recursion?</p>

<p>Well, as Rubyists, we&rsquo;re pretty lucky to work with a language that&rsquo;s intuitive and human-friendly. We like to read and write code that&rsquo;s actually comprehensive and (ideally) can be understood and appreciated by programmers and non-programmers alike. It turns out that recursion is a big part of that. It can make our code more readable and can even help it run faster.</p>

<!-- more -->


<h2>Functionally Recursive Babushkas</h2>

<p>In Ruby, we use recursion when we call a method from within itself. Sometimes, when you&rsquo;re within the scope of a method, you want to repeat the same action again from inside of it. Functional recursion achieves exactly that goal.</p>

<p>One of the best metaphors for recursion that I&rsquo;ve heard comes from my friend and <a href="http://jimmykuruvilla.github.io/">fellow classmate, Jimmy</a>. He explained recursion as a set of nested Russian matryoshka (aka babushka) dolls:</p>

<p><img src="http://www.russia-ex.com/images/blog/Matryoshka-Dolls-1.jpg" style="display: block; margin-left: auto; margin-right: auto;"></p>

<p>These dolls work in a pretty interesting way. Within each one, there is another doll that is exactly the same. You have multiple copies of the same doll, each within another, until eventually, you get to the smallest doll.</p>

<p>In the programming context, the smallest doll is your <strong>base case</strong>. The base case is imperative when it comes to utilizing recursion. It&rsquo;s how you tell your recursive method when to <em>stop</em> calling itself from inside of itself.</p>

<p>Imagine what would happen if you didn&rsquo;t have a final doll to end with &ndash; you&rsquo;d just keep going and going and going until, eventually, your head would probably explode:</p>

<iframe src="//giphy.com/embed/MrZTFRJ8F4n6" width="480" height="641" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><br></p>

<p>Or, more likely, you&rsquo;d be stuck in something like an infinite loop, and you&rsquo;d eventually use more memory than whatever was available to you in the stack, ending up with an error like <code>SystemStackError: stack level too deep</code> or <code>Stack overflow!</code>.</p>

<p>These kinds of errors are good reminders of how dangerous recursion can be. But don&rsquo;t let that dissuade you! Recursion can also be pretty powerful, especially if you want to repeat a function multiple times.</p>

<h2>Recursion, Rinse, Repeat</h2>

<p>A classic example for explaining recursion is calculating factorials. Just in case you need a refresher: a factorial is the product of an integer and all the integers below it, up to the number 1. The factorial of 4 would be written out as: <code>4 * 3 * 2 * 1</code>, or <code>24</code>.</p>

<p>Now, we could very easily write this using a <code>while</code> loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="n">factorial_count</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">factorial_count</span> <span class="o">*=</span> <span class="n">num</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">factorial_count</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But let&rsquo;s look at this code for a second. What exactly happens when our compiler runs this code? Well, a lot of stuff.</p>

<ol>
<li>First, it has to keep track of our counter, since we only ever want to calculate a factorial down to the number 1.</li>
<li>Then, it checks that the number being passed in as a parameter (for example, <code>num = 7</code>), is greater than 0.</li>
<li>If <code>num</code> is greater than 0, it will multiply <code>num</code> by the counter.</li>
<li>Then, it will decrease the counter by 1.</li>
<li>Finally, it repeats steps 1-4 again until <code>num = 0</code>, in which case it will and finally break out of the <code>while</code> loop.</li>
</ol>


<p>Okay. <strong>WHUT?!</strong> This seems like a lot of stuff to keep track of. And that <code>factorial_count</code> variable is pretty weird and counter-intuitive (pun <em>totally</em> intended). And if we were calculating the factorials for a larger numbr &ndash; say 70, instead of 7 &ndash; this would be a lot of logic to keep track of and repeat over and over.</p>

<p>Let&rsquo;s rethink this problem for a second. What we actually want to do is find the factorials of all the numbers smaller than 7 and greater than 1, and then just multiply them together. In fact, all we really want to do is repeat the same procedure of multiplication.</p>

<p>Instead of using a loop, we could write a method that takes in a single argument <code>num</code>, and actually use that same method to replicate the process of multiplication. That might look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s something pretty interesting happening here. If we pass in the number 7 as our parameter for <code>num</code>, our compiler does the following:</p>

<ol>
<li>First, it immediately jumps past the <code>if</code> statement.</li>
<li>Next, it multiplies 7 by <code>factorial(6)</code></li>
<li>Then, inside of the <code>factorial(6)</code> method, it circumvents the <code>if</code> statement again, and multiplies 6 by <code>factorial(5)</code>.</li>
<li>Eventually, when it hits the <code>if</code> statement, it returns 1.</li>
</ol>


<p>Here&rsquo;s a visualization of what this looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factorial</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="o">=</span> <span class="mi">7</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>             <span class="o">=</span> <span class="mi">7</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>             <span class="o">=</span> <span class="mi">7</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>             <span class="o">=</span> <span class="mi">7</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>             <span class="o">=</span> <span class="mi">7</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>             <span class="o">=</span> <span class="mi">7</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>             <span class="o">=</span> <span class="mi">7</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">1</span>
</span><span class='line'>             <span class="o">=</span> <span class="mi">5040</span>
</span></code></pre></td></tr></table></div></figure>


<p>Does the Russian doll metaphor make a bit more sense now? Here are our seven dolls, each one nested within another. And our base case is 1, which is where our nesting and recursive function actually ends, helping us avoid a stack overflow error.</p>

<p>I think that the best part of this code, though, is that it&rsquo;s a <em>lot</em> easier to read. There&rsquo;s no counter, no loop, no incrementation. Just one clean and crisp method that you can use as many times as needed after defining it only once. And, if you think about it, the visual representation of the compiler&rsquo;s actions mimics exactly how a real human would write out and solve a factorial problem.</p>

<p>One of the most difficult aspects of programming is picking the right tool for a job. Sometimes, that tool might be recursion and make your job easier. Other times, it might be the completely wrong choice and infinitely complicate your life. But, the more that you code and get comfortable with recursion, the better you&rsquo;ll be at recognizing when to bust out the recursive wrench out of your toolbelt.</p>

<h2>tl;dr?</h2>

<ul>
<li><em>Recursion</em> is the process of calling a method or function from within itself.</li>
<li>Functional recursion <strong>must</strong> have a <em>base case</em> in order to avoid stack overflow errors.</li>
<li>Still curious? Check out <a href="http://vimeo.com/24716767">this video</a>, which introduces Ruby recursion in great depth.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So You Wanna Ship Some Software, Eh?]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2014/11/30/so-you-wanna-ship-some-software-eh/"/>
    <updated>2014-11-30T18:05:55-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2014/11/30/so-you-wanna-ship-some-software-eh</id>
    <content type="html"><![CDATA[<p>Disheveled hair. Bags under your eyes. Hermit-like tendencies. Suffice it to say, project mode can do a <em>lot</em> of things to a person. It&rsquo;s the first time you&rsquo;re on your own, and the feeling of &ldquo;sink or swim&rdquo; will, inevitably, hit you in the face at some point or another.</p>

<p>But, project mode also teaches you a lot about what it means to focus and ship software. And it doesn&rsquo;t really matter that you&rsquo;ve only been coding for 9 weeks and that your application has only four models and that you&rsquo;re missing a ton of <code>&lt;div&gt;</code> tags. Why? Because the mistakes you make in your first application are ones that you&rsquo;ll never make again. So, inspired by <a href="http://blakedeboer.ghost.io/recent-lessons-learned/">Blake&rsquo;s post on lessons learned</a> from building a web application, here are a few things I learned in the process of shipping my first piece of software:</p>

<!-- more -->


<h2>1. Build something you actually care about</h2>

<p>This seems obvious, but it&rsquo;s worth repeating: don&rsquo;t choose a project or problem that you think other people would find interesting &ndash; choose something that <em>you</em> genuinely find interesting. If you aren&rsquo;t invested in the question that you&rsquo;re trying to answer, it&rsquo;s going to be evident in the product and demo. On the other hand, if you really care about what you&rsquo;re building, your passion will not only come through in your product and presentation, but will filter down and get other people excited about what you&rsquo;re building. It&rsquo;s also important to remember that <em>you</em>, more than anyone else, are going to have to look at your data and code; you might as well pick something you won&rsquo;t mind looking at for hours at a time, days on end.</p>

<h2>2. Ignore the OCD impulses, leave styling for later</h2>

<p>Possibly the biggest mistake we made while building our app was trying to make it look better before it was really done. We tried to implement some styling not only before we had picked a theme, but worse: before we actually knew what information we&rsquo;d ultimately end up displaying to our users. All in all, we probably wasted 6-10 hours collectively, all in a futile attempt to make a broken application look prettier. When the time finally came to actually style our application, a lot of time went in trying to reformulate our CSS to make it work with the theme that we chose. So, no matter how much it gnaws at you, leave the styling, design, and UX stuff until your application is fully-functional and, most importantly, <em>finished</em>.</p>

<h2>3. Set small goals &amp; short time limits</h2>

<p>One of the things that our group did quite well was building out one feature at a time and adding functionality to our application bit by bit. We did a good job of writing out and prioritizing the different kinds of functionality and types of features we could tackle in a given day. But it was much tougher to learn how much time to spend on actually building a feature out. A few days into project mode, we started setting time limits for ourselves, both individually and as a team. One person could only spend so much time working on a problem before opening it up to the group, and as a group, we could only debug a problem for so long before outsourcing to a TA or classmate. This minimized the number of hours we spent staring our screens without knowing which direction to go in next. With small, progressive goals to work towards and short spurts of time to complete them in, we were as a whole, far more productive.</p>

<h2>4. Do what you don&rsquo;t know</h2>

<p>I have this fear of routes. Correction: I <em>had</em> a fear of routes. How did I stop being scared of routing and that silly little <code>routes.rb</code> file? I forced myself to map out the routes with my group and take the lead in actually programming them out in our application.</p>

<p>While I coded, my project partner Joe (who&rsquo;s a super skilled router) helped me debug our routes, and made sure to explain why we were routing certain things in a specific way. And when we got to the CSS and styling, he took over the wheel while I helped him navigate the grid column framework in Bootstrap. This ended up being a super symbiotic relationship, because we both worked on the exact topics we knew that we were weak in, and both became better programmers in the process.</p>

<h2>5. Version control: &lsquo;Nuff said.</h2>

<p>If you&rsquo;re rusty on merging branches, making a commit, or merging conflicts, use project mode as an opportunity to conquer your git fears and learn as much as you can. Version control is awesome. It will probably (read: definitely) save you at some point in your project.</p>

<h2>tl;dr?</h2>

<ul>
<li>Build first, design later.</li>
<li>Write code that you care about.</li>
<li>Practice what you don&rsquo;t already know.</li>
<li>For the love of God, commit yo shit!</li>
</ul>


<p><img src="http://www.explainxkcd.com/wiki/images/d/de/git_commit.png" alt="git commit comic" style="display: block; margin-left: auto; margin-right: auto;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Programming Makes You a Better Writer]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2014/11/19/how-programming-makes-you-a-better-writer/"/>
    <updated>2014-11-19T08:08:47-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2014/11/19/how-programming-makes-you-a-better-writer</id>
    <content type="html"><![CDATA[<p>When I was in my terrible twos, my mom walked in on me writing all over the white walls of our living room with a pencil. I didn&rsquo;t even know how to write, much less <em>what</em> to write. But apparently, even as a toddler, I knew that writing was exactly what I wanted to do. (Side note: when my dad got home, he made me erase everything I&rsquo;d written. But I digress.)</p>

<p>Suffice it to say that writing has always been the medium of choice when it comes to expressing myself. So when I set aside my literary pen eight weeks ago to learn how to code at <a href="http://www.flatironschool.com/">The Flatiron School</a>, I did it with a heavy heart. I knew I&rsquo;d be learning how to build amazing things with the powerful tools that programming gives you, but I also assumed that I&rsquo;d be abandoning my one true passion.</p>

<p>But I&rsquo;ve learned two important things since then: first, you probably shouldn&rsquo;t assume things randomly. Second, and more seriously, writing and coding are far more similar than they are different. And I&rsquo;ve realized that coding has not only made me a better writer &ndash; it has also made me a better person.</p>

<!-- more -->


<p>Writing is unanimously thought of as a communicative art form, something that is unrestricted and free-flowing, which can overcome you at any given moment; and when you&rsquo;re in that moment, you have to surrender yourself to that creative genius within. Programming&rsquo;s reputation, on the other hand, is far more rigid, dependent on logic, discipline, and structure. But as someone who is now trying to inhabit both of these worlds, I can tell you that writing also depends on order and coherence just as much as programming relies on creative flow, clarity, and communication. Ultimately, writing is just as much a puzzle as programming is a narrative.</p>

<h2>Intuition</h2>

<p>Words and code both depend on intuition. As you write, you have to be honest with yourself about why you make certain creative choices: does your favorite character really add anything significant to your narrative? Is your narrator&rsquo;s voice believable? Does the reader even want to keep reading after your opening paragraph?</p>

<p>The questions that programmers ask themselves aren&rsquo;t too different. Does this method do more than one thing? Can I encapsulate and abstract this function somewhere in my code to avoid repeating myself? Does this functionality even belong in my application&rsquo;s controller? And perhaps the most important question of all: can anyone else <em>understand</em> my code?</p>

<p>Writers and programmers don&rsquo;t just have to become comfortable with their art forms: they have to truly understand every aspect of them. Programmers internalize their code and what it does in the same way that writers embody their self-created literary worlds. While at first you may not be able to put your finger on what&rsquo;s missing from a piece of writing, the more you write, the better you get at articulating what makes a piece of writing work. Similarly, as a programmer, you don&rsquo;t initially make the most educated guesses as to where a bug in your code might be, or what kinds of methods belong in a certain class. But the more you code, the better your intuition becomes, and the better you get programming.</p>

<h2>Discipline</h2>

<p>One of the best parts of programming is that you can easily get instant feedback. Write your code, and you can immediately run it and see what works and what breaks. But more often than not, your code is broken and you are constantly working to fix it. This takes a tremendous amount of discipline.</p>

<p>Computer programming forces you to constantly evaluate (and then reevaluate) your creative choices. You have to work through problems methodically, and work towards creating a framework and structure that furthers the functionality of your application. But the thing is, the programming concept of &ldquo;Make it work, make it right, make it fast,&rdquo; attributed to <a href="http://c2.com/cgi/wiki?MakeItWorkMakeItRightMakeItFast">Kent Beck</a>, applies just as much to code in a text editor as it does to words on a page.</p>

<p>If you want to be a good writer, you have to be able to structure your stories and revisit your writing in various drafts. Strong writing is never created in the first draft; it requires a shit ton of work. Every single writer will tell you that the one of the hardest parts of their job is rewriting, editing, and then rewriting again. And just as programmers refactor their code, writers &ldquo;refactor&rdquo; their narratives, striving to eliminate superfluous words and unnecessary paragraphs. And the most prolific programmers and prophetic writers get to where they are because they are incredibly disciplined when it comes to their craft.</p>

<h2>Empathy</h2>

<p>Writers create for their readers. Programmers create for their users. Neither of them allows for complete solitude, and both of them force you to put yourself in someone else&rsquo;s shoes. Writers have to empathize with their characters in order to make them believable and reliable for their readers. Programmers have to not only think about how their users experience an application, but also the readability of their code when it comes to other developers joining a project. In both cases, there&rsquo;s very little room to be selfish.</p>

<p>You also learn to be kinder to yourself in the process. Writing and programming are equally hard, sometimes in the exact same way. In fact, all artistic endeavours are physically, mentally, and emotionally exhausting. But then again, isn&rsquo;t that supposed to be the case? You&rsquo;re creating something out of nothing &ndash; adding something to the universe that didn&rsquo;t already exist before <em>you</em> created it.</p>

<p>Code is a living, breathing piece of art. When you build and ship an application, it&rsquo;s (hopefully) consumed by users around the world, all the time. You&rsquo;re never really done creating your art. Words are not that different. You put yourself into your writing and release it out into the world, just as you&rsquo;d deploy an applicaiton, for all the world to see.</p>

<p>The idea of <a href="http://www.paulgraham.com/hp.html">hackers as artists</a> isn&rsquo;t a new one. The real question is, what about them is similar &ndash; and what can we learn about the creative process to become the best writers and programmers that we can be?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Asset WHUTline?: Revisiting the Asset Pipeline After JavaScript]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2014/11/16/the-asset-whutline-revisiting-the-asset-pipeline-after-javascript/"/>
    <updated>2014-11-16T23:14:13-05:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2014/11/16/the-asset-whutline-revisiting-the-asset-pipeline-after-javascript</id>
    <content type="html"><![CDATA[<p>Two weeks ago, I was introduced to the Asset Pipeline. I didn&rsquo;t really think much of it at first, and part of me even assumed that I&rsquo;d never really have to see it again. It was a little like going out on a pretty forgettable first date &ndash; nothing particularly intriguing about the whole thing, but it somehow leaves you feeling kind of confused and generally rather perplexed.</p>

<p>But here&rsquo;s the thing: I <em>did</em> see the Asset Pipeline again. And boy was it awkward. After learning JavaScript this week and brushing up on my Rails, I realized that I&rsquo;m going to run into the Asset Pipeline at some point or another, so I might as well get to know it a little better. Here&rsquo;s a little refresher just in case you haven&rsquo;t seen the Asset Pipeline in awhile, either.</p>

<!-- more -->


<h2>Why bother?</h2>

<p>Once upon a time, before Rails 3.0, anytime you wanted to include a JavaScript or CSS file in your application, you had to manually do it by including either a <code>&lt;script&gt;</code> or a <code>&lt;link&gt;</code> tag, like so:</p>

<p><code>&lt;script src="jquery.js" type="text/javascript"&gt;&lt;/script&gt;</code><br>
<code>&lt;link href="custom.css" rel="stylesheet" type="text/css"/&gt;</code></p>

<p>Imagine doing that for every single file in your application. Are you in pain yet? Yeah, me too.</p>

<p>Now imagine being able to create as many JavaScript and CSS files as your heart desired, <em>and</em> being able to include all of them together in one single, long concatenated file that would be delivered whenver the browser makes a page request.</p>

<p>Guess what? That&rsquo;s exactly what the Asset Pipeline does. Ultimately, the goal of the Asset Pipeline is to make your life as a programmer that much easier by helping you organize your JavaScript and CSS files (which, let&rsquo;s face it, you are going to <em>have</em> to use):</p>

<blockquote><p>&ldquo;I think empty folder and empty files are two of the pivotal innovations in Rails that has encouraged us to write clean applications since the framework appeared. And I think this is true because when you have a place for everything and everything is in it&rsquo;s place, things feel nice.&rdquo;</p></blockquote>

<p>&ndash; David Heinemeier Hansson, <a href="https://www.youtube.com/watch?v=cGdCI2HhfAU"><em>RailsConf 2011</em></a></p>

<h2>Explain me some pipeline</h2>

<p>The Asset Pipeline works directly with your JavaScript and CSS files (also known as assets), and functions within three main directories:</p>

<ol>
<li>The <code>app/assets</code> directory: for files that are owned by the application &amp; specific to the current project (such as custom images, JavaScript files or stylesheets).</li>
<li>The <code>lib/assets</code> directory: for assets for your own libraries&#8217; code.</li>
<li>The <code>vendor/assets</code> directory: for external libraries that are owned by someone else (for example, JavaScript plugins or CSS frameworks).</li>
</ol>


<p>Within your <code>assets</code> directory are two subdirectories: <code>app/assets/javascripts/</code> and <code>app/assets/stylesheets/</code>. The Asset Pipeline compiles any JavaScript and CSS files that you add to these folders and automatically adds them to every page of your application.</p>

<p>Within these folders are <em>manifests</em>, which, in the case of your CSS files, would be included as part of the default application layout in the <code>app/assets/stylesheets/application.css.scss</code> directory. A manifest sets directives to provide the exact order and list of files that should be concatenated and included in the single CSS file that is delivered to the browser.</p>

<h2>So&hellip;what exactly is a directive, again?</h2>

<p>Directives are nothing more than directions of which files to grab and glob together. In the comments at the top of any manifest, you can find something that looks like <code>*= require_tree</code>, which is a directory that includes the current directory plus its subdirectories.</p>

<p>The most basic directive is <code>require</code>, which will concatenate the content of the specified file only once into the final packaged asset (called the &ldquo;bundle&rdquo;).</p>

<p>Another common directive is <code>include</code>, which is similar to <code>require</code>, except that if it reads the same file more than once, it will insert it into the bundle again.</p>

<p>Other directives like <code>require_self</code> and <code>require_directory</code> are useful in grabbing the current file (such as the manifest file), a specified directory.</p>

<p>Directives are always are processed in the order that they are read in the file, with <code>require_tree</code> being the one exception to this rule.</p>

<h2>Help me help you (or just use a helper method)</h2>

<p>The Asset Pipeline has helper methods to make your life a little easier. Two of the most common helper methods are the <code>stylesheet_link_tag</code> and <code>javascript_include_tag</code>, which can be used to add CSS &amp; JavaScript to any page of your application.</p>

<p>Another useful method is <code>link_to</code>, which can replace the anchor <code>&lt;a&gt;</code> tags while linking to other parts of your application. This method takes two parameters: the string displayed as the anchor text for the link, and the route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">ul</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;nav&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="sx">%= link_to &#39;Super Cute Kittens&#39;, kittens_path %&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">render</span> <span class="s1">&#39;layouts/navigation_links&#39;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This helper method is pretty awesome because it allows you name a route and then target all of your link locations to your <code>routes.rb</code> file. This is particuarly great you&rsquo;re moving your website from say, <code>www.cats.com</code> to a new and improved dynamic website that follows RESTful conventions, like maybe <code>www.supercutekittens.com</code>. Imagine having to create absolute URLs for every single link on that website! Ok, don&rsquo;t panic, you don&rsquo;t have to.</p>

<h2>Protip:</h2>

<p>When you generate a scaffold or a controller(<code>rails g scaffold</code> or <code>rails g controller</code>), Rails also generates a JavaScript/CoffeeScript file and a CSS/SCSS file for that controller! This means that when I make my CatsController, Rails will also add a new file at <code>app/assets/javascripts/cats.js.coffee</code> and another at <code>app/assets/stylesheets/cats.css.scss</code>.</p>

<h2>tl;dr?</h2>

<ul>
<li>Keeping your assets in their proper place will make you a happier and more organized programmer.</li>
<li>The Asset Pipeline will make your application perform better. Remember that it&rsquo;s easier (and faster) for your browser to request one large file from the server, rather than a ton of small ones.</li>
<li>Other things to look into: <a href="http://guides.rubyonrails.org/asset_pipeline.html#what-is-fingerprinting-and-why-should-i-care-questionmark">Fingerprinting</a>, which makes the name of a file dependent purely on its content. When the file contents change, the filename also changes.</li>
<li>The Asset Pipeline is magical, yet <em>super</em> difficult to learn. You probably won&rsquo;t understand everything all at once. But hopefully you feel a less confused than this little guy. He&rsquo;s clearly had too much pipeline for one day:</li>
</ul>


<blockquote class="twitter-tweet tw-align-center" lang="en"><p>So, I met the asset pipeline today&#8230; <a href="http://t.co/gU43HTzmF6">pic.twitter.com/gU43HTzmF6</a></p>&mdash; Vaidehi Joshi (@VaidehiJoshi) <a href="https://twitter.com/VaidehiJoshi/status/529693995661021184">November 4, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Have You Met Your Controller Yet?]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2014/10/30/have-you-met-your-controller-yet/"/>
    <updated>2014-10-30T23:28:43-04:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2014/10/30/have-you-met-your-controller-yet</id>
    <content type="html"><![CDATA[<p>Controllers: we all have &lsquo;em. Sure, they put the C in MVC, but how much do we really <em>know</em> about these mysterious creatures? Probably not a lot. Don&rsquo;t you wish you could just look your Controller in the eye and be all, &ldquo;Hey dude, what <em>are</em> you?&rdquo; Well, you can. All you have to do is just poke around a bit in your code.</p>

<p>Let&rsquo;s start with what we <em>do</em> know. Given the MVC orientation of Rails, we already know that the Controller acts as a kind of mediator, intercepting messages between the client and the server, and passing information between the model and view. But ultimately, Controllers are nothing more than Ruby classes (that inherit from ActionController::Base) with class methods called &ldquo; actions&rdquo;, which are simply meant to render a template for the user to see. But don&rsquo;t mistake them as simple chunks of code; there are also some pretty amazing things that Controllers can do.</p>

<!-- more -->


<h2>1. Controllers can have empty actions and STILL work.</h2>

<p>Okay, time to break the ice. Let&rsquo;s get to know our Controllers. Below is some generic code for a Controller for a guacamole app. First off is my main ApplicationController, which becomes a parent class for my GuacController to inherit from:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GuacController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">render</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>See that <code>render()</code> method? All it does is render the default template for the current controller and action. And since I&rsquo;m in the index action of the GuacController, this code would render the template <code>app/views/guac/index.html.erb</code></p>

<p>But what would happen if I had an empty <code>index</code> method?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GuacController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would also render <code>app/views/guac/index.html.erb</code>. But&hellip;why? Well, the cool thing about Controllers is that they will call <code>render</code> by default, even if the action (in this case, <code>index</code>) doesn&rsquo;t call the <code>render</code> method explicitly. In fact, every single Controller action already has the render method implicitly within it!</p>

<p>And you know what&rsquo;s really crazy? This code would <em>also</em> render the same index page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GuacController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When Rails gets a request for the <code>index</code> action and sees that there&rsquo;s no such action in the GuacController, it assumes that if there <em>were</em> an <code>index</code> action, it would render <code>app/views/guac/index.html.erb</code>. So that&rsquo;s exactly what it does, even though you haven&rsquo;t even given it the code to do so explicitly.</p>

<p>Obie Fernandez explains why exactly this works in his book, <em>The Rails 4 Way</em>:</p>

<blockquote><p>&ldquo;The goal of the typical controller action is to render a view template—that is, to fill out the template and hand the results, usually an HTML document, back to the server for delivery to the client. Oddly—at least it might strike you as a bit odd, though not illogical—you don’t actually need to define a controller action, as long as you’ve got a template that matches the action name.&rdquo;</p></blockquote>

<h2>2. Controllers can render almost anything:</h2>

<p>Even though the <code>render</code> method is implicit and doesn&rsquo;t actually ever have to be written out by you, the programmer, it can actually be quite a handy little tool. You can use this method within a Controller action if you want it to render something <em>other</em> than its default template. For example, I could tell my GuacController to render any other file in my <code>app/views</code> directory by just using the <code>render</code> method.</p>

<p>This is useful for two different reasons:</p>

<ul>
<li><p>You can render another action&rsquo;s template:
⋅⋅*For example, my <code>create</code> action in my GuacController could have something like <code>render action:'new'</code>, which would render my <code>app/views/guac/new.html.erb</code>. This could be super awesome if a new instance of <code>@guac</code> hadn&rsquo;t been saved.</p></li>
<li><p>You can render a different template entirely:
⋅⋅*If I was out of guac and I wanted my guac index page to actually render the template for my salsa index, I could explicitly render it by putting the following code in the <code>index</code> action of my GuacController: <code>render template:'/salsa/index.html.haml'</code>. Of course, this doesn&rsquo;t really answer the question of where all my guacamole went, but that&rsquo;s neither here nor there.</p></li>
</ul>


<h2>3. Controllers are all for Convention over Configuration:</h2>

<p>Because of naming conventions for Controllers, if I have a Guac Controller, Rails assumes that there is a class called GuacController saved as a file <code>guac_controller.rb</code> in my <code>app/controllers</code> directory. It will also look for corresponding view templates for my GuacController in <code>app/views/guac</code>, and it will take the output of these views and save them as <code>guac.html.erb</code>.</p>

<p>Basically, your Controller makes a lot of assumptions whenver it gets a single web request. But, this also means that <em>you</em> can  anticipate how your Controller might react by simply understanding what your Controller already knows and assumes about your code.</p>

<p>I guess what I&rsquo;m trying to say is&hellip;get to know each other.</p>

<h2>tl;dr?</h2>

<ul>
<li>Your Controller does a lot of stuff for you without you even realizing it. To make the most of its magical powers, learn as much as you can about its conventions.</li>
<li>Play around with the <code>render</code> method to understand when it can be used and for what purposes.</li>
<li>Get to know your Controller. I&rsquo;m telling you: it will be the beginning of a beautiful friendship.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class Inheritance]]></title>
    <link href="http://vaidehijoshi.github.io/blog/2014/10/16/class-inheritance/"/>
    <updated>2014-10-16T21:00:34-04:00</updated>
    <id>http://vaidehijoshi.github.io/blog/2014/10/16/class-inheritance</id>
    <content type="html"><![CDATA[<p>Confession time: I&rsquo;m kind of in love with object-oriented programming.</p>

<p>I should probably clarify that I don&rsquo;t always understand OOP, and I sometimes even confuse myself for no good reason whenever the topic of &ldquo;self&rdquo; comes up. But hey, every relationship has its ups and downs, and I&rsquo;ve only really been committed to this one for the past week or so.</p>

<p>OOP is easy to understand mostly because of its strong connection to real life &ndash; everything is an object, all objects have properties/traits/characteristics, so on and so forth. But dealing with multiple <em>types</em> of objects across different types of <em>classes</em> gets real tricky, <em>real</em> fast. This especially holds true when it comes to class inheritance.</p>

<!-- more -->


<h2>WTF is inheritence?</h2>

<p>Inheritence in object-oriented programming is pretty much exactly what it sounds like: when one class <strong>inherits</strong> the properties of another class, just like how you inherit traits from your parents (even if you might wish otherwise).</p>

<p>Okay, maybe an example here will help:</p>

<p>Imagine that you have a class called <code>BakedStuff</code>, which includes all the baked goods your heart could ever desire. Every instance (every <em>object</em>) of this <code>BakedStuff</code> class has a <code>name</code>, baking <code>time</code>, and <code>baking_temperature</code>, which we&rsquo;ll set to default at 375 degrees.</p>

<p>And for good measure, let&rsquo;s also throw in a little method in there called <code>bake_for</code>, which is just going to return a string that will tell us how much time to bake our treats for, and at what temperature.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BakedStuff</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:time</span><span class="p">,</span> <span class="ss">:baking_temperature</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">baking_temperature</span><span class="o">=</span><span class="mi">375</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@time</span> <span class="o">=</span> <span class="n">time</span>
</span><span class='line'>    <span class="vi">@baking_temperature</span> <span class="o">=</span> <span class="n">baking_temperature</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bake_for</span>
</span><span class='line'>    <span class="s2">&quot;To make </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">, bake for </span><span class="si">#{</span><span class="n">time</span><span class="si">}</span><span class="s2"> at </span><span class="si">#{</span><span class="n">baking_temperature</span><span class="si">}</span><span class="s2"> degrees fahrenheit.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing <em>too</em> complicated about it, right?</p>

<p>Now I can create an actual object and pass in the correct parameters. I can even ask the cake how long I should bake it for, which would look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cake</span> <span class="o">=</span> <span class="no">BakedStuff</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;cake&quot;</span><span class="p">,</span> <span class="s2">&quot;30 min&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">cake</span><span class="o">.</span><span class="n">bake_for</span>
</span></code></pre></td></tr></table></div></figure>


<p>would output: <code>To make cake, bake for 30 min at 375 degrees fahrenheit.</code></p>

<p>Awesome. I love cake. But you know what I like even more than cake? Cookies! Just like in my first class, I want to make a new <code>Cookie</code> class, which will also have a name, time, baking temperature, and <code>bake_for</code> method. Now, I could theoretically rewrite all of my code from the <code>BakedStuff</code> class, but then I&rsquo;d have less time to bake and I&rsquo;m also pretty sure that goes against the whole &ldquo;DRY&rdquo; concept in Ruby.</p>

<p>What I <em>could</em> do is have my new <code>Cookie</code> class <em>inherit</em> everything from my <code>BakedStuff</code> class, since I want all my new instances of <code>Cookie</code> to share the same methods as my <code>BakedStuff</code> class.</p>

<p>Let me try it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Cookie</span> <span class="o">&lt;</span> <span class="no">BakedStuff</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:cookies_made</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">cookies_made</span><span class="p">,</span> <span class="n">baking_temperature</span><span class="o">=</span><span class="mi">375</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="vi">@time</span> <span class="o">=</span> <span class="s2">&quot;20 min&quot;</span>
</span><span class='line'>    <span class="vi">@cookies_made</span> <span class="o">=</span> <span class="n">cookies_made</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bake_for</span>
</span><span class='line'>    <span class="k">super</span> <span class="o">+</span> <span class="s2">&quot; This recipe will yield </span><span class="si">#{</span><span class="n">cookies_made</span><span class="si">}</span><span class="s2"> cookies.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whoa! New code!</p>

<ul>
<li>That <code>&lt;</code> sign is what we use to dennote inheritence. All it means is that my <code>Cookie</code> class is now <em>inheriting</em> all the methods from my <code>BakedStuff</code> class.</li>
<li>Notice that this class has some additional features, including a new instance method which sets the <code>cookies_made</code>.</li>
<li>But wait, what&rsquo;s that <code>super</code> thing doing in there??</li>
</ul>


<h2>WHUT is <code>super</code>?</h2>

<p>The <code>super</code> keyword in Ruby is, well, pretty super. Okay, okay, what it <em>really</em> does is allow you to call methods up the &ldquo;inheritence heirarchy&rdquo;, which means that you can use methods that were perviously defined in classes that this class now inherits from.</p>

<p>In fact, <code>super</code> is what allows me to pull down everything from my <code>initialize</code> and <code>bake_for</code> methods in my parent class, which in this case is my <code>BakedStuff</code> class. You&rsquo;ll also notice that I&rsquo;ve reassigned my <code>@time</code> variable to equal 20 minutes, and that I&rsquo;ve added a string interpolation into my <code>bake_for</code> method. And I didn&rsquo;t have to retype any of the code from my parent class in the process!</p>

<p>Let&rsquo;s look at what an object of the Cookie class could look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cookies</span> <span class="o">=</span> <span class="no">Cookie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;cookies&quot;</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">cookies</span><span class="o">.</span><span class="n">bake_for</span>
</span></code></pre></td></tr></table></div></figure>


<p>would output: <code>To make cookies, bake for 20 min at 400 degrees fahrenheit. This recipe will yield 15 cookies.</code></p>

<p>Okay, one last example. Let&rsquo;s say that my favorite kind of cookie is a Snickerdoodle. I want it to inherit from its parent class, <code>Cookie</code>, but I also want to jazz the <code>Snickerdoodle</code> class up a little bit. I&rsquo;m going to change its <code>bake_for</code> method and make a little counter that will tell me exactly how many snickerdoodles I&rsquo;ve got left.</p>

<p>This would look something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Snickerdoodle</span> <span class="o">&lt;</span> <span class="no">Cookie</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">baking_temperature</span><span class="o">=</span><span class="mi">375</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="vi">@time</span> <span class="o">=</span> <span class="s2">&quot;25 min&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bake_for</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">cookies_made</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;There&#39;s only </span><span class="si">#{</span><span class="vi">@cookies_made</span><span class="si">}</span><span class="s2"> snickerdoodles left!&quot;</span>
</span><span class='line'>    <span class="vi">@cookies_made</span> <span class="o">=</span> <span class="n">cookies_made</span><span class="o">.</span><span class="n">to_i</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let me actually create a batch of snickerdoodles:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">snickerdoodle</span> <span class="o">=</span> <span class="no">Snickerdoodle</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;snickerdoodles&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">snickerdoodle</span><span class="o">.</span><span class="n">bake_for</span>
</span></code></pre></td></tr></table></div></figure>


<p>which outputs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">There</span><span class="s1">&#39;s only 10 snickerdoodles left!</span>
</span><span class='line'><span class="s1">There&#39;</span><span class="n">s</span> <span class="n">only</span> <span class="mi">9</span> <span class="n">snickerdoodles</span> <span class="n">left!</span>
</span><span class='line'><span class="no">There</span><span class="s1">&#39;s only 8 snickerdoodles left!</span>
</span><span class='line'><span class="s1">There&#39;</span><span class="n">s</span> <span class="n">only</span> <span class="mi">7</span> <span class="n">snickerdoodles</span> <span class="n">left!</span>
</span><span class='line'><span class="no">There</span><span class="s1">&#39;s only 6 snickerdoodles left!</span>
</span><span class='line'><span class="s1">There&#39;</span><span class="n">s</span> <span class="n">only</span> <span class="mi">5</span> <span class="n">snickerdoodles</span> <span class="n">left!</span>
</span><span class='line'><span class="no">There</span><span class="s1">&#39;s only 4 snickerdoodles left!</span>
</span><span class='line'><span class="s1">There&#39;</span><span class="n">s</span> <span class="n">only</span> <span class="mi">3</span> <span class="n">snickerdoodles</span> <span class="n">left!</span>
</span><span class='line'><span class="no">There</span><span class="s1">&#39;s only 2 snickerdoodles left!</span>
</span><span class='line'><span class="s1">There&#39;</span><span class="n">s</span> <span class="n">only</span> <span class="mi">1</span> <span class="n">snickerdoodles</span> <span class="n">left!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for the tricky part. What do you think will happen if I create a new batch of cookies in my <code>Cookie</code> class? Do you think I&rsquo;ll get a cookie counter? Do you think my <code>Cookie</code> class will be affected by my <code>Snickerdoodle</code> class? Let&rsquo;s try it and see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">chocolate_chip_cookie</span> <span class="o">=</span> <span class="no">Cookie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;chocolate chip cookies&quot;</span><span class="p">,</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">chocolate_chip_cookie</span><span class="o">.</span><span class="n">bake_for</span>
</span></code></pre></td></tr></table></div></figure>


<p>which outputs: <code>To make chocolate chip cookies, bake for 20 min at 375 degrees fahrenheit. This recipe will yield 24 cookies.</code></p>

<p>And what about if I create a new pie?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pie</span> <span class="o">=</span> <span class="no">BakedStuff</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;pie&quot;</span><span class="p">,</span> <span class="s2">&quot;45 min&quot;</span><span class="p">,</span> <span class="mi">450</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">pie</span><span class="o">.</span><span class="n">bake_for</span>
</span></code></pre></td></tr></table></div></figure>


<p>outputs: <code>To make pie, bake for 45 min at 450 degrees fahrenheit.</code></p>

<p>Interesting. It doesn&rsquo;t seem to matter at all that I changed my <code>Cookie</code> class &ndash; <code>BakedStuff</code> stayed the same. And all the edits I made to my <code>Snickerdoodle</code> class didn&rsquo;t fall up to my <code>Cookie</code> class, either. That&rsquo;s because inheritance only works in one direction, from the parent class, down to its children.</p>

<p>I should also mention that <code>super</code> didn&rsquo;t change my parent classes either; all it did was bring the already-created methods from my parent classes down to its children. It&rsquo;s actually passing all the arguments to the parent class&#8217; method.</p>

<p>Finally, it&rsquo;s crucial to remember that a class can only inherit from one class at a time. Something like <code>Snickerdoodle &lt; Cookie &lt; BakedStuff</code> would have raised an error. Also, remember that instance variables have nothing to do with class inheritance, since they are not defined by the class itself!</p>

<h2>tl;dr?</h2>

<ul>
<li>Class inheritance is an incredibly powerful tool. Use it.</li>
<li>The <code>super</code> keyword can save you a ton of time. Remember that it only works with methods of a class, and <em>not</em> instance variables. Read more about it <a href="http://rubylearning.com/satishtalim/ruby_inheritance.html">here</a> and <a href="http://rubylearning.com/satishtalim/ruby_overriding_methods.html">here</a></li>
<li>Cookies just make everything better (just in case it wasn&rsquo;t obvious already).</li>
</ul>

]]></content>
  </entry>
  
</feed>
